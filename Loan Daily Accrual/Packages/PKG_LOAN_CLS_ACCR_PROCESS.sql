CREATE OR REPLACE PACKAGE PKG_LOAN_CLS_ACCR_PROCESS IS
  PROCEDURE PROC_INT_CALC_FOR_CLS(V_ENTITY_NUM     IN NUMBER,
                          V_BRN_CODE       IN NUMBER DEFAULT 0,
                          V_ACCOUNT_NUMBER IN NUMBER DEFAULT 0,
                          V_BATCH_NUM      OUT NUMBER);

  PROCEDURE PROC_BRN_WISE(V_ENTITY_NUM IN NUMBER,
                          V_BRN_CODE   IN NUMBER DEFAULT 0);

  PROCEDURE LAP(V_ENTITY_NUM     IN NUMBER,
                V_BRN_CODE       IN NUMBER DEFAULT 0,
                V_PROCESS_STATUS OUT NUMBER);
   W_CALL_FROM_LNINITCALL BOOLEAN DEFAULT FALSE;
END PKG_LOAN_CLS_ACCR_PROCESS;
/
CREATE OR REPLACE PACKAGE BODY PKG_LOAN_CLS_ACCR_PROCESS IS
  --NEELS-11-11-2010-beg
  PROCEDURE GET_PENDING_AMOUNT;
  --NEELS-11-11-2010-end

  /*
   Modification History
    -----------------------------------------------------------------------------------------
   Sl.            Description                              Mod By             Mod on
   -----------------------------------------------------------------------------------------
    1   Changes for Nepal Social Development Bank
    Need to chek LNPRD_UNREAL_INT_INCOME_REQD INSTEAD OF
         LNPRD_INT_APPL_FREQ = 'I'                        K Neelakantan        08-NOV-2010   -- NEELS-MDS-08-NOV-2010
  2   Changes for Nepal Social Development Bank
        Unrealized Int Accounted in Income is changed to
        Unrealized Int Accounted in Suspense
        Label Changes done in ILNPRODPM
        Default 0 Changed from Default 1                 K Neelakantan        30-NOV-2010   -- NEELS-MDS-30-NOV-2010
    3  Changes for Sonali Bank
       For NPA Loss Assets of category 3 Interest Calculation is stopped      16-AUG-2012   -- Avinash K 16-AUG-2012
       Since Account Balance consists of Suspense Amount after
       changes in loan interest accrual and application process
       while calculating compounding interest suspense balance
       should not be added to account balance.            Avinash K            22-AUG-2012  -- Avinash-SONALI-22AUG2012
  -----------------------------------------------------------------------------------------
   */
  --05-08-2010-beg
  W_PROC_BRN_CODE      NUMBER(6);
  W_OD_PENDING_PRODUCT NUMBER(18, 3);
  W_ARR_OD_INT_AMT     NUMBER(18, 3);
  W_YEAR NUMBER(6);
  PROCEDURE INSERT_RTMPLNNOTDUE(ACNUM           IN NUMBER,
                                GRACE_DUE_DATE  IN DATE,
                                AMOUNT          IN NUMBER,
                                ACTUAL_DUE_DATE DATE,
                                ENTRY_TYPE      VARCHAR2);

  W_MIN_PROC_DATE      DATE;
  W_ACTUAL_OVERDUE_AMT NUMBER(18, 3);
  W_PROCESS_ACT_AMT    NUMBER(18, 3);
  W_PROC_YEAR          NUMBER;
  W_UPTO_YEAR          NUMBER;
  TYPE TY_TRAN_REC IS RECORD(
    V_INTRD_BC_AMT  NUMBER(18, 3),
    V_CHARGE_BC_AMT NUMBER(18, 3),
    V_DB_CR_FLG     VARCHAR2(1),
    V_DATE_OF_TRAN  DATE);

  TYPE TAB_TRAN_REC IS TABLE OF TY_TRAN_REC INDEX BY PLS_INTEGER;
  TRAN_REC     TAB_TRAN_REC;
  W_GRACE_DAYS NUMBER(3);
  --05-08-2010-end

  -- INT ACCR AND INTEREST FREE LOAN CONDITION ADDED - 15-02-2008
  --29-07-2008-BEG
  /*     TYPE LN_ACNTBRN IS RECORD(
            LN_BRN_CODE     NUMBER(6));
       TYPE T_LN_ACNTBRN IS TABLE OF LN_ACNTBRN INDEX BY PLS_INTEGER;
       V_LN_ACNTBRN T_LN_ACNTBRN;
  */ --29-07-2008-END

  --21-oct-2009-beg
  W_PRIN_OD_AMT NUMBER(18, 3);
  --21-oct-2009-edn

  --10-01-2010-beg
  W_NPA_OD_INT_REQD NUMBER(1);
  --10-01-2010-end
  W_INT_ON_RECOVERY BOOLEAN;

  -- R.Senthil Kumar - 11-June-2010 - Begin
  W_IGNORE CHAR(1);
  W_COUNT  NUMBER;
  -- R.Senthil Kumar - 11-June-2010 - End
  W_PENDING_AMOUNT NUMBER(18, 3) := 0; -- NEELS-MDS-08-NOV-2010
  PROCEDURE DESTROY_BRN_WISE_ARRAYS;
  W_LAP_RUN_NUMBER    NUMBER(6);
  W_OD_FOUND          CHAR(1);
  W_SIMPLE_COMP_INT   CHAR(1);
  W_LIMIT_EXPIRY_DATE DATE;
  W_REPAY_START_DATE  DATE;
  W_FINAL_DUE_DATE    DATE;
  W_DAY_END_STR       VARCHAR2(100);
  W_MONTH_END_STR     VARCHAR(200);
  W_QUARTER_END_STR   VARCHAR(300);
  W_HALF_YEAR_END_STR VARCHAR(400);
  W_YEAR_END_STR      VARCHAR(500);
  W_FINAL_WHERE_STR   VARCHAR2(800);
  W_DMQHY             CHAR(1);
  TYPE RC IS REF CURSOR;
  E_USEREXCEP EXCEPTION;
  W_SUSPENSE_BAL        NUMBER(18, 3);
  W_RUN_NUMBER          NUMBER(6);
  W_FACTOR              NUMBER(3);
  W_SINGLE_INT_RATE     NUMBER(8, 5);
  W_ASSETCD_ASSET_CLASS CHAR(1);
  W_ASSETCLS_ASSET_CODE VARCHAR2(2);
  W_ASSETCLS_NPA_DATE   DATE;
  W_MULTI_INT_RATE      VARCHAR2(500);
  W_AMOUNT_STR          VARCHAR2(500);
  W_INTERNAL_ACNUM      NUMBER(14);
  W_ACNTS_CURR_CODE     VARCHAR2(3);
  W_ACNTS_PROD_CODE     NUMBER(4);
  W_INT_ACCR_UPTO_DATE  DATE;
  W_MIN_VAUE_DATE       DATE;
  W_SCAN_FROM_DATE      DATE;
  W_ASON_DATE           DATE;
  W_ACCRUAL_UPTO_DATE   DATE;
  W_SQL                 VARCHAR2(4300);
  W_VALUE_BALANCE       NUMBER(18, 3);
  W_VALUE_INT_BALANCE   NUMBER(18, 3);
  W_VALUE_CHG_BALANCE   NUMBER(18, 3);
  W_PREV_YR_VALUE_DATE  BOOLEAN;
  W_FIN_START_MONTH     NUMBER(2);
  W_PROCESS_DATE        DATE;
  W_INT_DEB_UPTO_DATE   DATE;
  W_OPENING_BALANCE     NUMBER(18, 3);
  W_TRAN_BALANCE_SUM    NUMBER(18, 3);
  W_TRAN_INT_BAL_SUM    NUMBER(18, 3);
  W_TRAN_CHG_BAL_SUM    NUMBER(18, 3);
  W_TRAN_BAL            NUMBER(18, 3);
  W_TRAN_INT_BAL        NUMBER(18, 3);
  W_TRAN_CHG_BAL        NUMBER(18, 3);
  W_REDUCE_AMOUNT       NUMBER(18, 3);
  V_BREAK_SL            NUMBER(5);
  W_INT_ON_AMT          NUMBER(18, 3);
  W_SANC_LIMIT          NUMBER(18, 3);
  W_DP_AMT              NUMBER(18, 3);
  W_OD_AMT              NUMBER(18, 3);
  W_MAIN_INDEX          NUMBER(8);
  W_OD_DATE             DATE;
  W_ERR_MSG             VARCHAR2(1300);
  W_PENAL_FOR_OVERDUE   NUMBER(8, 5);
  W_ACT_AC_INT_AMT      NUMBER(18, 9);
  W_ACT_BC_INT_AMT      NUMBER(18, 9);
  W_NPA_STATUS          NUMBER(1);
  W_NPA_AMT             NUMBER(18, 9);
  W_OD_AC_INT_AMT       NUMBER(18, 9);
  W_OD_BC_INT_AMT       NUMBER(18, 9);
  W_PRODCODE_CURRCODE   VARCHAR(13);
  W_SCHEME_CODE         VARCHAR2(6);
  W_SHORT_TERM_LOAN    CHAR(1);
  W_INT_APP_UPTO_DATE  DATE;
  W_ACNTS_OPENING_DATE DATE;
  W_DISB_AMT           NUMBER(18, 9);
  W_CAL_INT_AMT        NUMBER(18, 9);
  W_MIG_INT_AMT        NUMBER(18, 9);
  W_APP_INT_AMT        NUMBER(18, 9);
  W_LNIA_INT_AMT       NUMBER(18, 9);
  W_TOT_INT_DB         NUMBER(18, 9);
  W_CBD                 DATE; --Prasanth NS-CHN-07-10-2008-added
  W_LAP_PROCESS         BOOLEAN DEFAULT FALSE; --Prasanth NS-CHN-07-10-2008-added
  W_PENAL_INT_APPLICABLE CHAR(1) := '0'; --ADDED BY MANOJ PRABHAKAR 30-03-2012
  W_BATCH_NUM           NUMBER; -- ADDED BY BIBHU ON 29-11-2012
  W_IS_MIG_MONTH       VARCHAR2(10) := '';
  V_ACCR_DAILY_ASSET_CD CHAR(1) := '0';
  FUNCTION GET_QHY_MON(P_PROC_MON      IN NUMBER,
                       P_FIN_START_MON IN NUMBER,
                       P_QHY_TYPE      IN CHAR) RETURN NUMBER;
  PROCEDURE UPDATE_RTMPLNIADTL(W_INTEREST_RATE IN NUMBER,
                               W_AMOUNT        IN NUMBER,
                               W_INT_AMOUNT    IN NUMBER);
  PROCEDURE UPDATE_RTMPLNIA;
  TYPE T_INTERNAL_ACNUM IS TABLE OF NUMBER(14) INDEX BY PLS_INTEGER;
  V_INTERNAL_ACNUM T_INTERNAL_ACNUM;
  --30-08-2008-ADD
  V_DUMMY_INTERNAL_ACNUM T_INTERNAL_ACNUM;
  TYPE REC_ACNTS IS RECORD(
    ACNTS_INTERNAL_ACNUM         NUMBER(14),
    LNPRD_SHORT_TERM_LOAN        LNPRODPM.LNPRD_SHORT_TERM_LOAN%TYPE,
    LNACNT_INT_APPLIED_UPTO_DATE LOANACNTS.LNACNT_INT_APPLIED_UPTO_DATE%TYPE,
    ACNTS_OPENING_DATE           ACNTS.ACNTS_OPENING_DATE%TYPE);
  TYPE TT_ACNTS IS TABLE OF REC_ACNTS INDEX BY PLS_INTEGER;
  T_ACNTS TT_ACNTS;
  --30-08-2008-ADD
  TYPE LN_ACNTROW IS RECORD(
    ACNTS_PROD_CODE     NUMBER(4),
    ACNTS_CURR_CODE     VARCHAR2(3),
    ACNTS_INT_ACCR_UPTO DATE,
    ACNTS_OPENING_DATE  DATE,
    ACNTS_CLIENTS_CODE  NUMBER,
    ACNTS_SCHEME_CODE   VARCHAR2(6),
    ACNTS_INT_CALC_UPTO DATE);
  TYPE T_LN_ACNTROW IS TABLE OF LN_ACNTROW INDEX BY PLS_INTEGER;
  V_LN_ACNTROW T_LN_ACNTROW;
  TYPE LN_LNPRODPM IS RECORD(
    LNPRD_SIMPLE_COMP_INT     CHAR(1),
    LNPRD_INT_PROD_BASIS      CHAR(1),
    LNPRD_INT_RECOVERY_OPTION CHAR(1),
    LNPRD_INT_APPL_FREQ       CHAR(1),
    LNPRD_INT_ACCR_FREQ       CHAR(1),
    PRODUCT_EXEMPT_FROM_NPA   CHAR(1),
    LNPRD_SCHEME_REQD         CHAR(1),
    LNPRD_TERM_LOAN           CHAR(1),
    PRODUCT_FOR_RUN_ACS       CHAR(1),
    LNPRD_EDUCATIONAL_LOAN    CHAR(1),
    --26-06-2009-added
    LNPRD_INT_RECOV_GRACE_DAYS   NUMBER(2),
    LNPRD_PENAL_INT_APPLICABLE   CHAR(1), -- Add Guna 04/06/2010
    LNPRD_PENALTY_GRACE_DAYS     NUMBER(2), -- Add Guna 04/06/2010
    LNPRD_PENAL_INT_APPL_FROM    CHAR(1), --add 09-08-2010
    LNPRD_UNREAL_INT_INCOME_REQD CHAR(1) -- NEELS-MDS-08-NOV-2010 ADD
    );
  TYPE T_LN_LNPRODPM IS TABLE OF LN_LNPRODPM INDEX BY VARCHAR2(4);
  V_LN_LNPRODPM T_LN_LNPRODPM;
  TYPE LN_LNCURRPM IS RECORD(
    LNCUR_INT_CALCN_BASIS      NUMBER(3),
    LNCUR_INT_RNDOFF_PARAM     CHAR(1),
    LNCUR_INT_RNDOFF_PRECISION NUMBER(7, 3),
    LNCUR_MIN_INT_AMT          NUMBER(18, 3));
  TYPE T_LN_LNCURRPM IS TABLE OF LN_LNCURRPM INDEX BY VARCHAR2(13);
  V_LN_LNCURRPM T_LN_LNCURRPM;
  W_SKIP_FLAG   BOOLEAN;

  -- Add Guna 04/06/2010 start
  TYPE LN_LNACRSDTL IS RECORD(
    V_REPAY_FROM_DATE    DATE,
    V_NUM_OF_INSTALLMENT NUMBER(5),
    V_REPAY_AMT          NUMBER(18, 3),
    V_REPAY_FREQ         CHAR(1));
  TYPE IN_LN_LNACRSDTL IS TABLE OF LN_LNACRSDTL INDEX BY PLS_INTEGER;
  V_LN_LNACRSDTL IN_LN_LNACRSDTL;

  -- Add Guna 04/06/2010 end

  PROCEDURE DESTROY_ARRAYS IS
  BEGIN
    V_LN_LNPRODPM.DELETE;
    V_LN_LNCURRPM.DELETE;
    V_LN_ACNTROW.DELETE;
    DESTROY_BRN_WISE_ARRAYS;
  END DESTROY_ARRAYS;
  PROCEDURE CHECK_HOLIDAY_PERIOD;
  PROCEDURE CHECK_EXPIRY;
  PROCEDURE GET_LIMIT_EXPIRY;
  PROCEDURE FETCH_REPAY_END_DATE;
  PROCEDURE RECORD_EXCEPTION(W_EXCEPTION_DESC IN VARCHAR2) IS
  BEGIN
    PKG_PB_GLOBAL.DETAIL_ERRLOG(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                'X',
                                W_EXCEPTION_DESC || ' ' ||
                                ' Process Date =' || W_PROCESS_DATE,
                                ' ',
                                W_INTERNAL_ACNUM);
  END RECORD_EXCEPTION;
  FUNCTION SP_FORM_END_DATE(W_DATE IN DATE, P_QHY_TYPE IN CHAR) RETURN DATE IS
    W_PROC_MON             NUMBER(2);
    W_DUMMY_NUM            NUMBER(1);
    W_FINANCIAL_START_DATE DATE;
    W_FINALCIAL_YEAR       NUMBER(4);
    W_SP_FORM_START_DATE   DATE;
  BEGIN
    W_DUMMY_NUM      := 0;
    W_FINALCIAL_YEAR := 0;
    IF PKG_PB_GLOBAL.FN_GET_FIN_YEAR_MONTH(PKG_ENTITY.FN_GET_ENTITY_CODE) >
       EXTRACT(MONTH FROM W_DATE) THEN
      W_FINALCIAL_YEAR := EXTRACT(YEAR FROM W_DATE) - 1;
    ELSE
      W_FINALCIAL_YEAR := EXTRACT(YEAR FROM W_DATE);
    END IF;
    W_FINANCIAL_START_DATE := TO_DATE('01-' ||
                                      TO_CHAR(PKG_PB_GLOBAL.FN_GET_FIN_YEAR_MONTH(PKG_ENTITY.FN_GET_ENTITY_CODE)) || '-' ||
                                      W_FINALCIAL_YEAR,
                                      'DD-MM-YYYY');
    W_PROC_MON             := EXTRACT(MONTH FROM W_DATE);
    IF P_QHY_TYPE <> 'Y' THEN
      W_DUMMY_NUM := GET_QHY_MON(W_PROC_MON,
                                 PKG_PB_GLOBAL.FN_GET_FIN_YEAR_MONTH(PKG_ENTITY.FN_GET_ENTITY_CODE),
                                 P_QHY_TYPE);
    END IF;
    IF P_QHY_TYPE = 'Q' THEN
      W_SP_FORM_START_DATE := ADD_MONTHS(W_FINANCIAL_START_DATE,
                                         (W_DUMMY_NUM - 1) * 3);
    ELSIF P_QHY_TYPE = 'H' THEN
      W_SP_FORM_START_DATE := ADD_MONTHS(W_FINANCIAL_START_DATE,
                                         (W_DUMMY_NUM - 1) * 6);
    ELSIF P_QHY_TYPE = 'Y' THEN
      W_SP_FORM_START_DATE := W_FINANCIAL_START_DATE;
    END IF;
    RETURN W_SP_FORM_START_DATE;
  END SP_FORM_END_DATE;
  -- THIS IS FOR FINDING OUT THE QUARTER
  FUNCTION GET_QHY_MON(P_PROC_MON      IN NUMBER,
                       P_FIN_START_MON IN NUMBER,
                       P_QHY_TYPE      IN CHAR) RETURN NUMBER IS
    V_QHY_MON NUMBER(2);
  BEGIN
    IF P_PROC_MON < P_FIN_START_MON THEN
      V_QHY_MON := 12 + P_PROC_MON - P_FIN_START_MON + 1;
    ELSE
      V_QHY_MON := P_PROC_MON - P_FIN_START_MON + 1;
    END IF;
    IF P_QHY_TYPE = 'Q' THEN
      V_QHY_MON := V_QHY_MON MOD 3;
      IF V_QHY_MON = 0 THEN
        V_QHY_MON := 3;
      END IF;
    ELSIF P_QHY_TYPE = 'H' THEN
      V_QHY_MON := V_QHY_MON MOD 6;
      IF V_QHY_MON = 0 THEN
        V_QHY_MON := 6;
      END IF;
    END IF;
    RETURN V_QHY_MON;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END GET_QHY_MON;
  PROCEDURE GET_CURR_SPECIFIC_PARAM IS
    TYPE D_LN_LNCURRPM IS RECORD(
      LNCUR_PROD_SCHEME_CURR     VARCHAR(13),
      LNCUR_INT_CALCN_BASIS      CHAR(1),
      LNCUR_INT_RNDOFF_PARAM     CHAR(1),
      LNCUR_INT_RNDOFF_PRECISION NUMBER(9, 3),
      LNCUR_MIN_INT_AMT          NUMBER(18, 3));
    TYPE D_T_LN_LNCURRPM IS TABLE OF D_LN_LNCURRPM INDEX BY PLS_INTEGER;
    D_V_LN_LNCURRPM         D_T_LN_LNCURRPM;
    V_PROD_SEGMENT_CURR_KEY VARCHAR2(13);
  BEGIN
    SELECT LPAD(LNCUR_PROD_CODE, 4, 0) ||
           DECODE(LNCUR_SCHEME_CODE,
                  ' ',
                  '000000',
                  LPAD(TRIM(LNCUR_SCHEME_CODE), 6, '0')) || LNCUR_CURR_CODE,
           LNCUR_INT_CALCN_BASIS,
           LNCUR_INT_RNDOFF_PARAM,
           LNCUR_INT_RNDOFF_PRECISION,
           LNCUR_MIN_INT_AMT BULK COLLECT
      INTO D_V_LN_LNCURRPM
      FROM LNCURPM;
    IF D_V_LN_LNCURRPM.COUNT > 0 THEN
      FOR IDX IN 1 .. D_V_LN_LNCURRPM.COUNT LOOP
        IF D_V_LN_LNCURRPM(IDX).LNCUR_INT_CALCN_BASIS = '1' THEN
          V_LN_LNCURRPM(D_V_LN_LNCURRPM(IDX).LNCUR_PROD_SCHEME_CURR).LNCUR_INT_CALCN_BASIS := 365;
        ELSIF D_V_LN_LNCURRPM(IDX).LNCUR_INT_CALCN_BASIS = '2' THEN
          V_LN_LNCURRPM(D_V_LN_LNCURRPM(IDX).LNCUR_PROD_SCHEME_CURR).LNCUR_INT_CALCN_BASIS := 360;
        ELSIF D_V_LN_LNCURRPM(IDX).LNCUR_INT_CALCN_BASIS = '3' THEN
          V_LN_LNCURRPM(D_V_LN_LNCURRPM(IDX).LNCUR_PROD_SCHEME_CURR).LNCUR_INT_CALCN_BASIS := 366;
        ELSE
          V_LN_LNCURRPM(D_V_LN_LNCURRPM(IDX).LNCUR_PROD_SCHEME_CURR).LNCUR_INT_CALCN_BASIS := 365;
        END IF;
        V_LN_LNCURRPM(D_V_LN_LNCURRPM(IDX).LNCUR_PROD_SCHEME_CURR).LNCUR_INT_RNDOFF_PARAM := D_V_LN_LNCURRPM(IDX)
                                                                                            .LNCUR_INT_RNDOFF_PARAM;
        V_LN_LNCURRPM(D_V_LN_LNCURRPM(IDX).LNCUR_PROD_SCHEME_CURR).LNCUR_INT_RNDOFF_PRECISION := D_V_LN_LNCURRPM(IDX)
                                                                                                .LNCUR_INT_RNDOFF_PRECISION;
        V_LN_LNCURRPM(D_V_LN_LNCURRPM(IDX).LNCUR_PROD_SCHEME_CURR).LNCUR_MIN_INT_AMT := D_V_LN_LNCURRPM(IDX)
                                                                                       .LNCUR_MIN_INT_AMT;
      END LOOP;
    END IF;
    D_V_LN_LNCURRPM.DELETE;
  END GET_CURR_SPECIFIC_PARAM;
  PROCEDURE GET_LNPRODPM_PARAM IS
    TYPE T_LN_LNPRODPM IS RECORD(
      LNPRD_PROD_CODE           NUMBER(4),
      LNPRD_SIMPLE_COMP_INT     CHAR(1),
      LNPRD_INT_PROD_BASIS      CHAR(1),
      LNPRD_INT_RECOVERY_OPTION CHAR(1),
      LNPRD_INT_APPL_FREQ       CHAR(1),
      LNPRD_INT_ACCR_FREQ       CHAR(1),
      PRODUCT_EXEMPT_FROM_NPA   CHAR(1),
      LNPRD_SCHEME_REQD         CHAR(1),
      LNPRD_TERM_LOAN           CHAR(1),
      PRODUCT_FOR_RUN_ACS       CHAR(1),
      LNPRD_EDUCATIONAL_LOAN    CHAR(1),
      --26-06-2009-added
      LNPRD_INT_RECOV_GRACE_DAYS   NUMBER(2),
      LNPRD_PENAL_INT_APPLICABLE   CHAR(1), -- Add Guna 04/06/2010
      LNPRD_PENALTY_GRACE_DAYS     NUMBER(2), -- Add Guna 04/06/2010
      LNPRD_PENAL_INT_APPL_FROM    CHAR(1), -- 09-08-2010-add
      LNPRD_UNREAL_INT_INCOME_REQD CHAR(1) -- NEELS-MDS-08-NOV-2010 ADD
      );
    TYPE T_LNPRODPM IS TABLE OF T_LN_LNPRODPM INDEX BY PLS_INTEGER;
    TT_LN_LNPRODPM T_LNPRODPM;
  BEGIN
    SELECT LNPRD_PROD_CODE,
           LNPRD_SIMPLE_COMP_INT,
           LNPRD_INT_PROD_BASIS,
           LNPRD_INT_RECOVERY_OPTION,
           LNPRD_INT_APPL_FREQ,
           LNPRD_INT_ACCR_FREQ,
           PRODUCT_EXEMPT_FROM_NPA,
           LNPRD_SCHEME_REQD,
           LNPRD_TERM_LOAN,
           PRODUCT_FOR_RUN_ACS,
           LNPRD_EDUCATIONAL_LOAN,
           LNPRD_INT_RECOV_GRACE_DAYS,
           LNPRD_PENAL_INT_APPLICABLE, -- Add Guna 04/06/2010
           LNPRD_PENALTY_GRACE_DAYS, -- Add Guna 04/06/2010
           LNPRD_PENAL_INT_APPL_FROM --09-08-2010-added
          ,
           LNPRD_UNREAL_INT_INCOME_REQD -- NEELS-MDS-08-NOV-2010 ADD
    BULK COLLECT
      INTO TT_LN_LNPRODPM
      FROM LNPRODPM L, PRODUCTS P
     WHERE P.PRODUCT_CODE = L.LNPRD_PROD_CODE;
    IF TT_LN_LNPRODPM.COUNT > 0 THEN
      FOR IDX IN 1 .. TT_LN_LNPRODPM.COUNT LOOP
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_SIMPLE_COMP_INT := TT_LN_LNPRODPM(IDX)
                                                                                   .LNPRD_SIMPLE_COMP_INT;
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_INT_PROD_BASIS := TT_LN_LNPRODPM(IDX)
                                                                                  .LNPRD_INT_PROD_BASIS;
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_INT_RECOVERY_OPTION := TT_LN_LNPRODPM(IDX)
                                                                                       .LNPRD_INT_RECOVERY_OPTION;
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_INT_APPL_FREQ := TT_LN_LNPRODPM(IDX)
                                                                                 .LNPRD_INT_APPL_FREQ;
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_INT_ACCR_FREQ := TT_LN_LNPRODPM(IDX)
                                                                                 .LNPRD_INT_ACCR_FREQ;
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).PRODUCT_EXEMPT_FROM_NPA := TT_LN_LNPRODPM(IDX)
                                                                                     .PRODUCT_EXEMPT_FROM_NPA;
        --05-12-2007-added
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_SCHEME_REQD := TT_LN_LNPRODPM(IDX)
                                                                               .LNPRD_SCHEME_REQD;
        --27-02-2008-added
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_TERM_LOAN := TT_LN_LNPRODPM(IDX)
                                                                             .LNPRD_TERM_LOAN;
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).PRODUCT_FOR_RUN_ACS := TT_LN_LNPRODPM(IDX)
                                                                                 .PRODUCT_FOR_RUN_ACS;
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_EDUCATIONAL_LOAN := TT_LN_LNPRODPM(IDX)
                                                                                    .LNPRD_EDUCATIONAL_LOAN;

        --26-06-2009-beg
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_INT_RECOV_GRACE_DAYS := TT_LN_LNPRODPM(IDX)
                                                                                        .LNPRD_INT_RECOV_GRACE_DAYS;
        --26-06-2009-end
        --Add Guna 04/06/2010 start
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_PENAL_INT_APPLICABLE := TT_LN_LNPRODPM(IDX)
                                                                                        .LNPRD_PENAL_INT_APPLICABLE;
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_PENALTY_GRACE_DAYS := TT_LN_LNPRODPM(IDX)
                                                                                      .LNPRD_PENALTY_GRACE_DAYS;

        --Add Guna 04/06/2010 end
        --09-08-2010-beg
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_PENAL_INT_APPL_FROM := NVL(TT_LN_LNPRODPM(IDX)
                                                                                            .LNPRD_PENAL_INT_APPL_FROM,
                                                                                            0);
        --09-08-2010-end
        --NEELS-MDS-30-NOV-2010 NVL Changed to 0 from 1
        V_LN_LNPRODPM(TT_LN_LNPRODPM(IDX).LNPRD_PROD_CODE).LNPRD_UNREAL_INT_INCOME_REQD := NVL(TT_LN_LNPRODPM(IDX)
                                                                                               .LNPRD_UNREAL_INT_INCOME_REQD,
                                                                                               '0'); -- NEELS-MDS-08-NOV-2010 ADD
      END LOOP;
    END IF;
    TT_LN_LNPRODPM.DELETE;
  END GET_LNPRODPM_PARAM;
  PROCEDURE GET_BANK_LVL_OPER_PARAM IS
 BEGIN
   SELECT BANKCD_ACCR_DAILY_ASSET_CD
     INTO V_ACCR_DAILY_ASSET_CD
     FROM INSTALL INS, BANKCD B
    WHERE INS.INS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
      AND INS.INS_OUR_BANK_CODE = B.BANKCD_CODE;
 EXCEPTION
   WHEN NO_DATA_FOUND THEN
     W_ERR_MSG := SUBSTR(SQLERRM, 1, 900);
     RAISE E_USEREXCEP;
   WHEN OTHERS THEN
     W_ERR_MSG := SUBSTR(SQLERRM, 1, 900);
     RAISE E_USEREXCEP;
 END GET_BANK_LVL_OPER_PARAM;
  FUNCTION GET_MIN_VALUE_DATE_FROM_TRAN(P_SCAN_FROM_DATE IN DATE) RETURN DATE IS
    W_DUMMY_DATE DATE;
  BEGIN
    W_SQL := 'SELECT MIN(TRAN_VALUE_DATE) FROM  TRAN' ||
             SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE, P_SCAN_FROM_DATE) ||
             ' WHERE TRAN_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND  TRAN_DATE_OF_TRAN >= :1
                             AND TRAN_INTERNAL_ACNUM       = :2 AND TRAN_AUTH_ON IS NOT NULL';
    EXECUTE IMMEDIATE W_SQL
      INTO W_DUMMY_DATE
      USING W_SCAN_FROM_DATE, W_INTERNAL_ACNUM;
    RETURN W_DUMMY_DATE;
  END GET_MIN_VALUE_DATE_FROM_TRAN;
  FUNCTION GET_LOANACNTS_ACCR_DATE(W_ACNUM IN NUMBER) RETURN DATE IS
    W_DUMMY_DATE DATE;
  BEGIN
    <<READLOANACNT>>
    BEGIN
      SELECT L.LNACNT_INT_ACCR_UPTO
        INTO W_DUMMY_DATE
        FROM LOANACNTS L
       WHERE LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND L.LNACNT_INTERNAL_ACNUM = W_ACNUM;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_DUMMY_DATE := NULL;
    END READLOANACNT;
    RETURN W_DUMMY_DATE;
  END GET_LOANACNTS_ACCR_DATE;
  FUNCTION GET_MIN_VALUE_DATE(W_ACNUM IN NUMBER) RETURN DATE IS
    W_DUMMY_MIN_VAUE_DATE DATE;
  BEGIN
    W_SCAN_FROM_DATE := NULL;

    --  MID MONTH MIG
    IF W_IS_MIG_MONTH = 'Y' THEN
      V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE).LNPRD_INT_ACCR_FREQ := 'D';
    END IF;
    -- END



    IF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE).LNPRD_INT_ACCR_FREQ = 'D' THEN
      W_SCAN_FROM_DATE := W_ASON_DATE;
    ELSIF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
    .LNPRD_INT_ACCR_FREQ = 'M' THEN
      W_SCAN_FROM_DATE := PKG_PB_GLOBAL.SP_FORM_START_DATE(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                                           W_ASON_DATE,
                                                           'M');
    ELSIF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
    .LNPRD_INT_ACCR_FREQ = 'Q' THEN
      W_SCAN_FROM_DATE := PKG_PB_GLOBAL.SP_FORM_START_DATE(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                                           W_ASON_DATE,
                                                           'Q');
    ELSIF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
    .LNPRD_INT_ACCR_FREQ = 'H' THEN
      W_SCAN_FROM_DATE := PKG_PB_GLOBAL.SP_FORM_START_DATE(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                                           W_ASON_DATE,
                                                           'H');
    ELSIF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
    .LNPRD_INT_ACCR_FREQ = 'Y' THEN
      W_SCAN_FROM_DATE := PKG_PB_GLOBAL.SP_FORM_START_DATE(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                                           W_ASON_DATE,
                                                           'Y');
    END IF;
    W_DUMMY_MIN_VAUE_DATE := GET_MIN_VALUE_DATE_FROM_TRAN(W_SCAN_FROM_DATE);
    RETURN W_DUMMY_MIN_VAUE_DATE;
  END GET_MIN_VALUE_DATE;

  PROCEDURE READ_ACNTS_ROW IS
    TYPE D_LN_ACNTROW IS RECORD(
      ACNTS_INTERNAL_ACNUM NUMBER(14),
      ACNTS_PROD_CODE      NUMBER(4),
      ACNTS_CURR_CODE      VARCHAR2(3),
      ACNTS_INT_ACCR_UPTO  DATE,
      ACNTS_OPENING_DATE   DATE,
      ACNTS_CLIENTS_CODE   NUMBER,
      ACNTS_SCHEME_CODE    VARCHAR2(6),
      ACNTS_INT_CALC_UPTO  DATE);
    TYPE D_T_LN_ACNTROW IS TABLE OF D_LN_ACNTROW INDEX BY PLS_INTEGER;
    D_V_LN_ACNTROW D_T_LN_ACNTROW;
  BEGIN
    --10-01-2010-beg
    W_NPA_OD_INT_REQD := '0';
    --10-01-2010-end

    SELECT A.ACNTS_INTERNAL_ACNUM,
           A.ACNTS_PROD_CODE,
           A.ACNTS_CURR_CODE,
           A.ACNTS_INT_ACCR_UPTO,
           A.ACNTS_OPENING_DATE,
           A.ACNTS_CLIENT_NUM,
           A.ACNTS_SCHEME_CODE,
           A.ACNTS_INT_CALC_UPTO BULK COLLECT
      INTO D_V_LN_ACNTROW
      FROM ACNTS A
     WHERE ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
       AND A.ACNTS_INTERNAL_ACNUM = W_INTERNAL_ACNUM;

    -- R.Senthil Kumar - 11-June-2010 - Removed - Begin
    /*    -- CHN Guna 04/06/2010 start Add LNACINTCTL
    AND A.ACNTS_INTERNAL_ACNUM NOT IN (
      SELECT LNACINTCTL_INTERNAL_ACNUM
        FROM LNACINTCTL
       WHERE LNACINTCTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND LNACINTCTL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
         AND LNACINTCTL_INT_ACCRUAL_REQD <> '1');
    -- CHN Guna 04/06/2010 end*/
    -- R.Senthil Kumar - 11-June-2010 - Removed - End

    IF D_V_LN_ACNTROW.COUNT > 0 THEN
      FOR IDX IN 1 .. D_V_LN_ACNTROW.COUNT LOOP
        V_LN_ACNTROW(IDX).ACNTS_PROD_CODE := D_V_LN_ACNTROW(IDX)
                                            .ACNTS_PROD_CODE;
        V_LN_ACNTROW(IDX).ACNTS_CURR_CODE := D_V_LN_ACNTROW(IDX)
                                            .ACNTS_CURR_CODE;
        V_LN_ACNTROW(IDX).ACNTS_INT_ACCR_UPTO := D_V_LN_ACNTROW(IDX)
                                                .ACNTS_INT_ACCR_UPTO;
        V_LN_ACNTROW(IDX).ACNTS_OPENING_DATE := D_V_LN_ACNTROW(IDX)
                                               .ACNTS_OPENING_DATE;
        V_LN_ACNTROW(IDX).ACNTS_CLIENTS_CODE := D_V_LN_ACNTROW(IDX)
                                               .ACNTS_CLIENTS_CODE;
        V_LN_ACNTROW(IDX).ACNTS_SCHEME_CODE := D_V_LN_ACNTROW(IDX)
                                              .ACNTS_SCHEME_CODE;
        V_LN_ACNTROW(IDX).ACNTS_INT_CALC_UPTO := D_V_LN_ACNTROW(IDX)
                                                .ACNTS_INT_CALC_UPTO;
      END LOOP;
    END IF;
    D_V_LN_ACNTROW.DELETE;
  END READ_ACNTS_ROW;

  PROCEDURE CHECK_PREV_YR_VALUE_DATE IS
    RC_ACNTBBAL                   RC;
    V_ACNTBBAL_AC_OPNG_CLG_CR_SUM NUMBER(18, 3);
    V_ACNTBBAL_AC_OPNG_CLG_DB_SUM NUMBER(18, 3);
  BEGIN
    SELECT ACNTBBAL_AC_OPNG_CLG_CR_SUM, ACNTBBAL_AC_OPNG_CLG_DB_SUM
      INTO V_ACNTBBAL_AC_OPNG_CLG_CR_SUM, V_ACNTBBAL_AC_OPNG_CLG_DB_SUM
      FROM ACNTBBAL
     WHERE ACNTBBAL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
       AND ACNTBBAL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
       AND ACNTBBAL_CURR_CODE = W_ACNTS_CURR_CODE
       AND ACNTBBAL_YEAR =
           SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE, W_PROCESS_DATE)
       AND ACNTBBAL_MONTH = 1;
    OPEN RC_ACNTBBAL FOR W_SQL;
    FETCH RC_ACNTBBAL
      INTO V_ACNTBBAL_AC_OPNG_CLG_CR_SUM, V_ACNTBBAL_AC_OPNG_CLG_DB_SUM;
    IF RC_ACNTBBAL%FOUND THEN
      IF V_ACNTBBAL_AC_OPNG_CLG_CR_SUM > 0 OR
         V_ACNTBBAL_AC_OPNG_CLG_DB_SUM > 0 THEN
        W_PREV_YR_VALUE_DATE := TRUE;
      END IF;
    END IF;
  END CHECK_PREV_YR_VALUE_DATE;
  FUNCTION GET_MONTH_OPENING_BALANCE(P_PROCESS_DATE IN DATE) RETURN NUMBER IS
    W_OPENING_BAL NUMBER(18, 3);
    --30-06-2009-beg
    WW_FINYEAR NUMBER(4);
    WW_MONTH   NUMBER(2);
    --30-06-2009-end
  BEGIN
    --30-06-2009-beg
    WW_FINYEAR := 0;
    WW_MONTH   := 0;
    WW_FINYEAR := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                P_PROCESS_DATE);
    WW_MONTH   := TO_CHAR(P_PROCESS_DATE, 'MM');
    --30-06-2009-end
    W_OPENING_BAL        := 0;
    W_PREV_YR_VALUE_DATE := FALSE;
    <<READACNTVDBBAL>>
    BEGIN
      /*30-06-2009               SELECT NVL(AVD.ACNTVBBAL_AC_OPNG_CR_SUM,
                                0) - NVL(AVD.ACNTVBBAL_AC_OPNG_DB_SUM,
                                         0)
                     INTO   W_OPENING_BAL
                     FROM   ACNTVDBBAL AVD
                     WHERE  AVD.ACNTVBBAL_INTERNAL_ACNUM = W_INTERNAL_ACNUM AND
                            AVD.ACNTVBBAL_CURR_CODE = V_LN_ACNTROW(W_MAIN_INDEX)
                      .ACNTS_CURR_CODE AND
                            AVD.ACNTVBBAL_YEAR = SP_GETFINYEAR(P_PROCESS_DATE) AND
                            AVD.ACNTVBBAL_MONTH =
                            (EXTRACT(MONTH FROM P_PROCESS_DATE));
      */

      SELECT NVL(AVD.ACNTVBBAL_AC_OPNG_CR_SUM, 0) -
             NVL(AVD.ACNTVBBAL_AC_OPNG_DB_SUM, 0)
        INTO W_OPENING_BAL
        FROM ACNTVDBBAL AVD
       WHERE ACNTVBBAL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND AVD.ACNTVBBAL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
         AND AVD.ACNTVBBAL_CURR_CODE = V_LN_ACNTROW(W_MAIN_INDEX)
      .ACNTS_CURR_CODE
         AND AVD.ACNTVBBAL_YEAR = WW_FINYEAR
         AND AVD.ACNTVBBAL_MONTH = WW_MONTH;
      -- FIN YEAR AND MONTH CONDITION ADDED
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_OPENING_BAL := 0;
    END READACNTVDBBAL;
    RETURN NVL(W_OPENING_BAL, 0);
  END GET_MONTH_OPENING_BALANCE;
  FUNCTION GET_MONTH_INT_OPENING_BALANCE(P_PROCESS_DATE IN DATE)
    RETURN NUMBER IS
    W_OPENING_INT_BAL NUMBER(18, 3);
    --30-06-2009-beg
    WW_FINYEAR NUMBER(4);
    WW_MONTH   NUMBER(2);
    --30-06-2009-end
  BEGIN
    W_OPENING_INT_BAL := 0;
    --30-06-2009-beg
    WW_FINYEAR := 0;
    WW_MONTH   := 0;
    WW_FINYEAR := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                P_PROCESS_DATE);
    WW_MONTH   := TO_CHAR(P_PROCESS_DATE, 'MM');
    --30-06-2009-end
    <<READADVBBAL>>
    BEGIN
      --             SELECT NVL(ABS(NVL(ADVVDBBAL_INTRD_AC_OPBAL,
      /*30-06-2009               SELECT NVL((NVL(ADVVDBBAL_INTRD_AC_OPBAL,
                                        0)),
                                0)
                     INTO   W_OPENING_INT_BAL
                     FROM   ADVVDBBAL AVD
                     WHERE  AVD.ADVVDBBAL_INTERNAL_ACNUM = W_INTERNAL_ACNUM AND
                            AVD.ADVVDBBAL_CURR_CODE = V_LN_ACNTROW(W_MAIN_INDEX)
                      .ACNTS_CURR_CODE AND
                            AVD.ADVVDBBAL_YEAR = SP_GETFINYEAR(P_PROCESS_DATE) AND
                            AVD.ADVVDBBAL_MONTH =
                            (EXTRACT(MONTH FROM P_PROCESS_DATE));
      */

      SELECT NVL((NVL(ADVVDBBAL_INTRD_AC_OPBAL, 0)), 0)
        INTO W_OPENING_INT_BAL
        FROM ADVVDBBAL AVD
       WHERE ADVVDBBAL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND AVD.ADVVDBBAL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
         AND AVD.ADVVDBBAL_CURR_CODE = V_LN_ACNTROW(W_MAIN_INDEX)
      .ACNTS_CURR_CODE
         AND AVD.ADVVDBBAL_YEAR = WW_FINYEAR
         AND AVD.ADVVDBBAL_MONTH = WW_MONTH;
      -- FIN YEAR AND MONTH CONDITION ADDED
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_OPENING_INT_BAL := 0;
    END READADVBBAL;
    RETURN NVL(W_OPENING_INT_BAL, 0);
  END GET_MONTH_INT_OPENING_BALANCE;

  FUNCTION GET_MONTH_CHG_OPENING_BALANCE(P_PROCESS_DATE IN DATE)
    RETURN NUMBER IS
    W_OPENING_CHG_BAL NUMBER(18, 3);
    --30-06-2009-beg
    WW_FINYEAR NUMBER(4);
    WW_MONTH   NUMBER(2);
    --30-06-2009-end
  BEGIN
    W_OPENING_CHG_BAL := 0;
    --30-06-2009-beg
    WW_FINYEAR := 0;
    WW_MONTH   := 0;
    WW_FINYEAR := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                P_PROCESS_DATE);
    WW_MONTH   := TO_CHAR(P_PROCESS_DATE, 'MM');
    --30-06-2009-end
    <<READADVBBAL>>
    BEGIN

      SELECT NVL((NVL(ADVVDBBAL_CHARGE_AC_OPBAL, 0)), 0)
        INTO W_OPENING_CHG_BAL
        FROM ADVVDBBAL AVD
       WHERE ADVVDBBAL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND AVD.ADVVDBBAL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
         AND AVD.ADVVDBBAL_CURR_CODE = V_LN_ACNTROW(W_MAIN_INDEX)
      .ACNTS_CURR_CODE
         AND AVD.ADVVDBBAL_YEAR = WW_FINYEAR
         AND AVD.ADVVDBBAL_MONTH = WW_MONTH;
      -- FIN YEAR AND MONTH CONDITION ADDED
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_OPENING_CHG_BAL := 0;
    END READADVBBAL;
    RETURN NVL(W_OPENING_CHG_BAL, 0);
  END GET_MONTH_CHG_OPENING_BALANCE;

  PROCEDURE GET_TRAN_BALANCE(W_YEAR IN NUMBER) IS
    W_FROM_DATE DATE;
  BEGIN
    W_TRAN_BAL     := 0;
    W_TRAN_INT_BAL := 0;
    W_TRAN_CHG_BAL := 0;
    W_FROM_DATE    := W_PROCESS_DATE -
                      TO_NUMBER(TO_CHAR(W_PROCESS_DATE, 'DD')) + 1;
    W_SQL          := 'select NVL(SUM(DECODE(TRAN_DB_CR_FLG,' || CHR(39) || 'C' ||
                      CHR(39) ||
                      ',TRAN_AMOUNT,0))- SUM(DECODE(TRAN_DB_CR_FLG,' ||
                      CHR(39) || 'D' || CHR(39) ||
                      ',TRAN_AMOUNT,0)),0)
                 tranbalance, NVL(SUM(DECODE(TRAN_DB_CR_FLG,' ||
                      CHR(39) || 'C' || CHR(39) ||
                      ',TRANADV_INTRD_AC_AMT,0))- SUM(DECODE(TRAN_DB_CR_FLG,' ||
                      CHR(39) || 'D' || CHR(39) ||
                      ',TRANADV_INTRD_AC_AMT,0)),0)
                 tranintbalance,NVL(SUM(DECODE(TRAN_DB_CR_FLG,' ||
                      CHR(39) || 'C' || CHR(39) ||
                      ',TRANADV_CHARGE_AC_AMT,0))- SUM(DECODE(TRAN_DB_CR_FLG,' ||
                      CHR(39) || 'D' || CHR(39) ||
                      ',TRANADV_CHARGE_AC_AMT,0)),0)
                 tranchgbalance from TRANADV' ||
                      W_YEAR || ', TRAN' || W_YEAR ||
                      ' where Tran_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND TRANADV_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE aND  TRAN_VAlue_date >=:3 and Tran_value_date <=:4 and TRAN_INTERNAL_ACNUM = :5
                      and TRAN_DATE_OF_TRAN <=:6 and TRAN_AUTH_ON is not null AND
                       TRANADV_BRN_CODE     =  TRAN_BRN_CODE AND TRAN_DATE_OF_TRAN  = TRANADV_DATE_OF_TRAN AND
                       TRANADV_BATCH_NUMBER  = TRAN_BATCH_NUMBER AND TRANADV_BATCH_SL_NUM = TRAN_BATCH_SL_NUM';
    EXECUTE IMMEDIATE W_SQL
      INTO W_TRAN_BAL, W_TRAN_INT_BAL,W_TRAN_CHG_BAL
      USING W_FROM_DATE, W_PROCESS_DATE, W_INTERNAL_ACNUM, W_ASON_DATE;
  END GET_TRAN_BALANCE;

  PROCEDURE GET_INT_REDUCE_AMT_SIMPLE IS
  BEGIN
    --27-02-2008-REM          W_REDUCE_AMOUNT := ABS(W_TRAN_INT_BAL_SUM);
    W_REDUCE_AMOUNT := ABS(W_VALUE_INT_BALANCE) + ABS(W_VALUE_CHG_BALANCE);
  END GET_INT_REDUCE_AMT_SIMPLE;

  PROCEDURE GET_INT_REDUCE_AMT_COMP IS
  BEGIN
    W_REDUCE_AMOUNT := 0;
    -- NEELS-MDS-08-NOV-2010 BEG ;
    GET_PENDING_AMOUNT;
    -- W_Value Balance is Always in Negative (Loan Balance) and W Pending Amount is NEGATIVE
    W_VALUE_BALANCE := W_VALUE_BALANCE + W_PENDING_AMOUNT;
    -- NEELS-MDS-08-NOV-2010 END;

  END GET_INT_REDUCE_AMT_COMP;

  PROCEDURE GET_TRAN_ACC_BALANCE IS
  W_SQL_QUERY VARCHAR2(4000);
  W_FROM_DATE DATE;
  BEGIN
    W_TRAN_BAL     := 0;
    W_TRAN_INT_BAL := 0;
    W_FROM_DATE := TRUNC(W_PROCESS_DATE, 'MM');

    W_SQL_QUERY:='SELECT NVL(SUM(TRANBALANCE),0), NVL(SUM(TRANINTBALANCE),0),NVL(SUM(TRANCHGBALANCE),0)
                            FROM TEMP_LOAN_TRAN_BAL
                            WHERE TRAN_VALUE_DATE >= :1
                            AND TRAN_VALUE_DATE<= :2
                            AND TRAN_INTERNAL_ACNUM=:3';
    EXECUTE IMMEDIATE W_SQL_QUERY
      INTO W_TRAN_BAL, W_TRAN_INT_BAL, W_TRAN_CHG_BAL
      USING W_FROM_DATE, W_PROCESS_DATE, W_INTERNAL_ACNUM;

  END;

  PROCEDURE GET_VALUE_DATE_BALANCE(P_PROCESS_DATE IN DATE) IS
    W_OPENING_BALANCE     NUMBER(18, 3);
    W_OPENING_INT_BALANCE NUMBER(18, 3);
    W_OPENING_CHG_BALANCE NUMBER(18, 3);
   ---  W_YEAR                NUMBER(4); remove by rajib.pradhan as on 25-jan-2015
  BEGIN
    W_OPENING_BALANCE   := 0;
    W_TRAN_BALANCE_SUM  := 0;
    W_TRAN_INT_BAL_SUM  := 0;
    W_TRAN_CHG_BAL_SUM  := 0;
    W_VALUE_BALANCE     := 0;
    W_VALUE_INT_BALANCE := 0;
    W_VALUE_CHG_BALANCE := 0;
    W_ACT_AC_INT_AMT    := 0;
    W_ACT_BC_INT_AMT    := 0;
    -- AGK-26-FEB-2008-REM          W_YEAR              := SP_GETFINYEAR(P_PROCESS_DATE);
    ----W_YEAR                := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,W_ASON_DATE); remove by rajib.pradhan as on 25-jan-2015
    W_OPENING_BALANCE     := GET_MONTH_OPENING_BALANCE(P_PROCESS_DATE);
    W_OPENING_INT_BALANCE := GET_MONTH_INT_OPENING_BALANCE(P_PROCESS_DATE);
    W_OPENING_CHG_BALANCE := GET_MONTH_CHG_OPENING_BALANCE(P_PROCESS_DATE);

    ---- added by rajib.pradhan on 25-jan-2015
    IF PKG_LOAN_CLS_ACCR_PROCESS.W_CALL_FROM_LNINITCALL THEN
    GET_TRAN_ACC_BALANCE;
    W_TRAN_BALANCE_SUM := W_TRAN_BAL;
    W_TRAN_INT_BAL_SUM := W_TRAN_INT_BAL;
    W_TRAN_CHG_BAL_SUM := W_TRAN_CHG_BAL;
    ELSE
    GET_TRAN_BALANCE(W_YEAR);

    W_TRAN_BALANCE_SUM := W_TRAN_BAL;
    W_TRAN_INT_BAL_SUM := W_TRAN_INT_BAL;
    W_TRAN_CHG_BAL_SUM := W_TRAN_CHG_BAL;

    GET_TRAN_BALANCE(W_YEAR-1);

    W_TRAN_BALANCE_SUM := W_TRAN_BALANCE_SUM + W_TRAN_BAL;
    W_TRAN_INT_BAL_SUM := W_TRAN_INT_BAL_SUM + W_TRAN_INT_BAL;
    W_TRAN_CHG_BAL_SUM := W_TRAN_CHG_BAL_SUM + W_TRAN_CHG_BAL;

    END IF;

    -- AGK-26-FEB-2008-REM          IF W_PREV_YR_VALUE_DATE = TRUE THEN
    -- AGK-26-FEB-2008-REM          END IF;

    W_VALUE_BALANCE     := W_OPENING_BALANCE + W_TRAN_BALANCE_SUM;
    W_VALUE_INT_BALANCE := W_OPENING_INT_BALANCE + W_TRAN_INT_BAL_SUM;
    W_VALUE_CHG_BALANCE := W_OPENING_CHG_BALANCE + W_TRAN_CHG_BAL_SUM;

  END GET_VALUE_DATE_BALANCE;
  PROCEDURE GET_INT_DEB_UPTO_DATE IS
  BEGIN
    W_REDUCE_AMOUNT := 0;
    /*          IF V_LN_LNPRODPM(W_ACNTS_PROD_CODE) .LNPRD_SIMPLE_COMP_INT = 'S' THEN
                   W_INT_DEB_UPTO_DATE := W_ASON_DATE;
              ELSIF V_LN_LNPRODPM(W_ACNTS_PROD_CODE)
               .LNPRD_SIMPLE_COMP_INT = 'C' THEN
                   IF V_LN_LNPRODPM(W_ACNTS_PROD_CODE)
                    .LNPRD_INT_APPL_FREQ = 'M' THEN
                        W_INT_DEB_UPTO_DATE := LAST_DAY(ADD_MONTHS(W_ASON_DATE,
                                                                   -1));
                   ELSIF V_LN_LNPRODPM(W_ACNTS_PROD_CODE)
                    .LNPRD_INT_APPL_FREQ = 'Q' THEN
                        W_INT_DEB_UPTO_DATE := LAST_DAY(ADD_MONTHS(SP_FORM_END_DATE(W_ASON_DATE,
                                                                                    'Q'),
                                                                   -1));
                   ELSIF V_LN_LNPRODPM(W_ACNTS_PROD_CODE)
                    .LNPRD_INT_APPL_FREQ = 'H' THEN
                        W_INT_DEB_UPTO_DATE := LAST_DAY(ADD_MONTHS(SP_FORM_END_DATE(W_ASON_DATE,
                                                                                    'H'),
                                                                   -1));
                   ELSIF V_LN_LNPRODPM(W_ACNTS_PROD_CODE)
                    .LNPRD_INT_APPL_FREQ = 'Y' THEN
                        W_INT_DEB_UPTO_DATE := LAST_DAY(ADD_MONTHS(SP_FORM_END_DATE(W_ASON_DATE,
                                                                                    'Y'),
                                                                   -1));
                   END IF;
              END IF;
    */
    /*27-02-2008-rem          IF V_LN_LNPRODPM(W_ACNTS_PROD_CODE) .LNPRD_SIMPLE_COMP_INT = 'S' THEN
                   GET_INT_REDUCE_AMT_SIMPLE;
              ELSIF V_LN_LNPRODPM(W_ACNTS_PROD_CODE)
               .LNPRD_SIMPLE_COMP_INT = 'C' THEN
                   GET_INT_REDUCE_AMT_COMP;
              END IF;
    */
    IF W_SIMPLE_COMP_INT = 'S' THEN
      GET_INT_REDUCE_AMT_SIMPLE;
    ELSIF W_SIMPLE_COMP_INT = 'C' THEN
      GET_INT_REDUCE_AMT_COMP;
    END IF;
  END GET_INT_DEB_UPTO_DATE;
  PROCEDURE PROCESS_FOR_GETTING_OVERDUE IS
    W_IN_ERR_MSG  VARCHAR2(1000);
    W_DUMMY_AMT   NUMBER(18, 3);
    W_DUMMY_VAR   VARCHAR2(100);
    W_OD_DATE_VAR VARCHAR2(20);
  BEGIN
    <<GETODAMT>>
    BEGIN
      PKG_LNOVERDUE.SP_LNOVERDUE(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                 W_INTERNAL_ACNUM,
                                 TO_CHAR(W_PROCESS_DATE, 'DD-MM-YYYY'),
                                 TO_CHAR(W_ASON_DATE, 'DD-MM-YYYY'),
                                 W_IN_ERR_MSG,
                                 W_DUMMY_AMT,
                                 W_DUMMY_AMT,
                                 W_DP_AMT,
                                 W_SANC_LIMIT,
                                 W_OD_AMT,
                                 W_OD_DATE_VAR,
                                 W_DUMMY_AMT,
                                 W_DUMMY_VAR,
                                 W_DUMMY_AMT,
                                 W_DUMMY_VAR,
                                 W_DUMMY_AMT,
                                 W_DUMMY_VAR);
      --AGK-04-SEP-2008-BEG
      IF TRIM(W_IN_ERR_MSG) IS NOT NULL THEN
        RAISE E_USEREXCEP;
      END IF;
      --AGK-04-SEP-2008-END
      IF TRIM(W_OD_DATE_VAR) IS NOT NULL THEN
        W_OD_DATE := TO_DATE(W_OD_DATE_VAR, 'DD-MM-YYYY');
      END IF;
      W_OD_AMT := NVL(W_OD_AMT, 0);
      --05-08-2010-beg
      W_ACTUAL_OVERDUE_AMT := PKG_LNOVERDUE.P_ACTUAL_OD_AMT;
      --05-08-2010-end
      --Karthik-chn-19-Feb-2008-Add
      W_OD_AMT     := -1 * ABS(W_OD_AMT);
      W_DP_AMT     := NVL(W_DP_AMT, 0);
      W_SANC_LIMIT := NVL(W_SANC_LIMIT, 0);
    EXCEPTION
      WHEN OTHERS THEN
        W_ERR_MSG := 'Error in Overdue Amount Getting ' || W_IN_ERR_MSG;
        RAISE E_USEREXCEP;
    END GETODAMT;
  END PROCESS_FOR_GETTING_OVERDUE;

  PROCEDURE GET_OVERDUE_AMT IS
    W_LNOD_SANC_LIMIT NUMBER(18, 3);
    W_LNOD_DP_AMT     NUMBER(18, 3);
    W_LNOD_OD_AMT     NUMBER(18, 3);
    W_LNOD_OD_DATE    DATE;
    W_LNOD_EFF_DATE   DATE;

  BEGIN
    --05-08-2010-beg
    W_ACTUAL_OVERDUE_AMT := 0;
    W_PROCESS_ACT_AMT    := 0;
    --05-08-2010-end

    W_SANC_LIMIT := 0;
    W_DP_AMT     := 0;
    W_OD_AMT     := 0;
    W_OD_FOUND   := '0';
    W_OD_DATE    := NULL;

    W_LNOD_SANC_LIMIT := 0;
    W_LNOD_DP_AMT     := 0;
    W_LNOD_OD_AMT     := 0;
    W_LNOD_OD_DATE    := NULL;
    W_LNOD_EFF_DATE   := NULL;

    <<READLNODHIST>>
    BEGIN
      SELECT L.LNODHIST_SANC_LIMIT_AMT,
             L.LNODHIST_DP_AMT,
             L.LNODHIST_OD_AMT,
             L.LNODHIST_OD_DATE,
             L.LNODHIST_ACTUAL_DUE_AMT --12-08-2010-added
        INTO W_SANC_LIMIT,
             W_DP_AMT,
             W_OD_AMT,
             W_OD_DATE,
             W_ACTUAL_OVERDUE_AMT
        FROM LNODHIST L
       WHERE LNODHIST_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND L.LNODHIST_INTERNAL_ACNUM = W_INTERNAL_ACNUM
         AND L.LNODHIST_EFF_DATE =
             (SELECT MAX(LL.LNODHIST_EFF_DATE)
                FROM LNODHIST LL
               WHERE LNODHIST_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                 AND LL.LNODHIST_INTERNAL_ACNUM = W_INTERNAL_ACNUM
                 AND LL.LNODHIST_EFF_DATE <= W_PROCESS_DATE);
      --AGK-17-FEB-08 REMOVED (LL.LNODHIST_OD_DATE IS NOT NULL AND) ---AGK-17-FEB-08 REMOVED

      W_OD_AMT := -1 * ABS(W_OD_AMT);

      /* BELOW CONDITION COMMENTED, BECAUSE IT IS HANDLED IN OVERDUE UPDATION PROCEDURE (AGK-28-APR-2008-REM-BEG)
      --23-04-2008-added-beg
                    <<CHECKLONOD>>
                    BEGIN
                         SELECT L.LNOD_LATEST_EFF_DATE,  L.LNOD_SANC_LIMIT_AMT, L.LNOD_DP_AMT, L.LNOD_OD_AMT, L.LNOD_OD_DATE INTO
                         W_LNOD_EFF_DATE, W_LNOD_SANC_LIMIT, W_LNOD_DP_AMT, W_LNOD_OD_AMT, W_LNOD_OD_DATE FROM LNOD L WHERE L.LNOD_INTERNAL_ACNUM = W_INTERNAL_ACNUM;

                         W_OD_FOUND  := '1';

                         IF W_LNOD_OD_DATE IS NOT NULL THEN
                           IF W_LNOD_EFF_DATE = W_ASON_DATE THEN
                              IF W_LNOD_OD_DATE  <= W_PROCESS_DATE THEN
                                  W_SANC_LIMIT := W_LNOD_SANC_LIMIT;
                                  W_DP_AMT     := W_LNOD_DP_AMT;
                                  W_OD_AMT     := W_LNOD_OD_AMT;
                                  W_OD_DATE    := W_LNOD_OD_DATE;

                                  W_OD_AMT := -1 * ABS(W_OD_AMT);
                              END IF;
                           END IF;
                         END IF;
                    EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                              PROCESS_FOR_GETTING_OVERDUE;
                    END CHECKLONOD;       */
      --23-04-2008-added-end

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        PROCESS_FOR_GETTING_OVERDUE;
    END READLNODHIST;

    --24-04-2008-added
    IF W_OD_DATE IS NULL THEN
      W_OD_AMT := 0;
    END IF;

  END GET_OVERDUE_AMT;

  --22-10-2009-beg
  FUNCTION GET_OD_INTER_TYPE RETURN NUMBER IS
    P_SEGMENT_CODE          VARCHAR2(6);
    P_PROD_CODE             NUMBER(4);
    W_PENALIR_OD_INT_CHOICE NUMBER(1);

  BEGIN
    P_PROD_CODE             := V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE;
    W_PENALIR_OD_INT_CHOICE := 0;
    <<READ_PENALIRHIST>>
    BEGIN
      SELECT P.PENALIRH_OD_INT_CHOICE
        INTO W_PENALIR_OD_INT_CHOICE
        FROM PENALIRHIST P
       WHERE PENALIRH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND P.PENALIRH_PROD_CODE = P_PROD_CODE
         AND P.PENALIRH_CLIENT_SEG_CODE = P_SEGMENT_CODE
         AND P.PENALIRH_EFF_DATE =
             (SELECT MAX(PP.PENALIRH_EFF_DATE)
                FROM PENALIRHIST PP
               WHERE PENALIRH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                 AND PP.PENALIRH_PROD_CODE = P_PROD_CODE
                 AND PP.PENALIRH_CLIENT_SEG_CODE = P_SEGMENT_CODE
                 AND PP.PENALIRH_EFF_DATE <= W_PROCESS_DATE);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        <<READ_PENALIRHIST_SEGSPACE>>
        BEGIN
          SELECT P.PENALIRH_OD_INT_CHOICE
            INTO W_PENALIR_OD_INT_CHOICE
            FROM PENALIRHIST P
           WHERE PENALIRH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
             AND P.PENALIRH_PROD_CODE = P_PROD_CODE
             AND TRIM(P.PENALIRH_CLIENT_SEG_CODE) IS NULL
             AND P.PENALIRH_EFF_DATE =
                 (SELECT MAX(PP.PENALIRH_EFF_DATE)
                    FROM PENALIRHIST PP
                   WHERE PENALIRH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                     AND PP.PENALIRH_PROD_CODE = P_PROD_CODE
                     AND TRIM(PP.PENALIRH_CLIENT_SEG_CODE) IS NULL
                     AND PP.PENALIRH_EFF_DATE <= W_PROCESS_DATE);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN

            <<READ_PENALIRHIST_NEXT>>
            BEGIN
              SELECT P.PENALIRH_OD_INT_CHOICE
                INTO W_PENALIR_OD_INT_CHOICE
                FROM PENALIRHIST P
               WHERE PENALIRH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                 AND P.PENALIRH_PROD_CODE = 0
                 AND TRIM(P.PENALIRH_CLIENT_SEG_CODE) IS NULL
                 AND P.PENALIRH_EFF_DATE =
                     (SELECT MAX(PP.PENALIRH_EFF_DATE)
                        FROM PENALIRHIST PP
                       WHERE PENALIRH_ENTITY_NUM =
                             PKG_ENTITY.FN_GET_ENTITY_CODE
                         AND PP.PENALIRH_PROD_CODE = 0
                         AND TRIM(PP.PENALIRH_CLIENT_SEG_CODE) IS NULL
                         AND PP.PENALIRH_EFF_DATE <= W_PROCESS_DATE);
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                W_PENALIR_OD_INT_CHOICE := 0;
            END READ_PENALIRHIST_NEXT;
        END READ_PENALIRHIST_SEGSPACE;
    END READ_PENALIRHIST;
    RETURN W_PENALIR_OD_INT_CHOICE;
  END GET_OD_INTER_TYPE;
  --22-10-2009-end

  FUNCTION GET_CLIENTS_SEGMENTS(W_CLIENTS_CODE IN NUMBER) RETURN VARCHAR2 IS
    W_SEGMENT_CODE VARCHAR2(6);
  BEGIN
    <<READCLIENTS>>
    BEGIN
      SELECT C.CLIENTS_SEGMENT_CODE
        INTO W_SEGMENT_CODE
        FROM CLIENTS C
       WHERE C.CLIENTS_CODE = W_CLIENTS_CODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_SEGMENT_CODE := '';
    END READCLIENTS;
    RETURN W_SEGMENT_CODE;
  END GET_CLIENTS_SEGMENTS;
  --18-10-2007-added
  FUNCTION CEHCK_OVERDUE_REQ(P_PROCESS_DATE IN DATE) RETURN BOOLEAN IS
    V_OD_INT_CALC_REQ CHAR;
  BEGIN
    V_OD_INT_CALC_REQ := '1';
    <<READLNACIRS>>
    BEGIN
      IF P_PROCESS_DATE = W_ASON_DATE THEN
        SELECT NVL(L.LNACIRS_OVERDUE_INT_APPLICABLE, '1')
          INTO V_OD_INT_CALC_REQ
          FROM LNACIRS L
         WHERE LNACIRS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND L.LNACIRS_INTERNAL_ACNUM = W_INTERNAL_ACNUM;
      ELSE
        SELECT NVL(L.LNACIRSH_OD_INT_APPLICABLE, '1')
          INTO V_OD_INT_CALC_REQ
          FROM LNACIRSHIST L
         WHERE LNACIRSH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND L.LNACIRSH_INTERNAL_ACNUM = W_INTERNAL_ACNUM
           AND L.LNACIRSH_EFF_DATE =
               (SELECT MAX(L.LNACIRSH_EFF_DATE)
                  FROM LNACIRSHIST L
                 WHERE LNACIRSH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                   AND L.LNACIRSH_INTERNAL_ACNUM = W_INTERNAL_ACNUM
                   AND L.LNACIRSH_EFF_DATE <= W_PROCESS_DATE);
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_OD_INT_CALC_REQ := '1';
    END READLNACIRS;

    --10-01-2010-beg
    IF W_NPA_STATUS = '1' THEN
      IF NVL(W_NPA_OD_INT_REQD, '0') = '0' THEN
        RETURN FALSE;
      END IF;
    END IF;
    --10-01-2010-end

    IF V_OD_INT_CALC_REQ = '1' THEN
      RETURN TRUE;
    ELSE
      RETURN FALSE;
    END IF;
  END CEHCK_OVERDUE_REQ;
  PROCEDURE GET_OVERDUE_INT_RATE IS
    W_DUMMY_INT_RATE NUMBER(7, 5);
  BEGIN
    <<GETPENALRATE>>
    BEGIN
      W_DUMMY_INT_RATE               := 0;
      W_PENAL_FOR_OVERDUE            := 0;
      PKG_LOANINTRATEASON.PV_ERR_MSG := '';
      IF CEHCK_OVERDUE_REQ(W_PROCESS_DATE) = TRUE THEN
     -- Condition Added By Manoj 30-03-2012
     --   IF W_PENAL_INT_APPLICABLE <> '0' THEN
        SP_PENALINTRATE(PKG_ENTITY.FN_GET_ENTITY_CODE,
                        V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE,
                        GET_CLIENTS_SEGMENTS(V_LN_ACNTROW(W_MAIN_INDEX)
                                             .ACNTS_CLIENTS_CODE),
                        W_PROCESS_DATE,
                        W_PENAL_FOR_OVERDUE,
                        W_DUMMY_INT_RATE,
                        W_DUMMY_INT_RATE,
                        W_DUMMY_INT_RATE,
                        W_DUMMY_INT_RATE,
                        W_ERR_MSG,
                        W_INTERNAL_ACNUM); --ADDED BY MANOJ 28OCT2012
      --  END IF;

        IF TRIM(PKG_LOANINTRATEASON.PV_ERR_MSG) IS NOT NULL THEN
          PKG_PB_GLOBAL.DETAIL_ERRLOG(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                      'X',
                                      PKG_LOANINTRATEASON.PV_ERR_MSG || ' ' ||
                                      ' Process Date =' || W_PROCESS_DATE,
                                      ' ',
                                      W_INTERNAL_ACNUM);
          W_SKIP_FLAG := TRUE;
        END IF;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        W_ERR_MSG := 'Error in Penal Interest Rate Getting ' || ' ' ||
                     SUBSTR(SQLERRM, 1, 900);
        RAISE;
    END GETPENALRATE;
  END GET_OVERDUE_INT_RATE;
  PROCEDURE GETFACTOR IS
  BEGIN
    <<GETFACT>>
    BEGIN
      W_FACTOR := V_LN_LNCURRPM(W_PRODCODE_CURRCODE).LNCUR_INT_CALCN_BASIS;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_ERR_MSG := 'Denomination Factor Not Defined  - ' ||
                     ' Product Code - ' || W_ACNTS_PROD_CODE ||
                     ' scheme code - ' || SUBSTR(W_PRODCODE_CURRCODE, 5, 6) ||
                     ' Curr Code - ' || W_ACNTS_CURR_CODE;
        RAISE E_USEREXCEP;
    END GETFACT;
  END GETFACTOR;
  PROCEDURE CALC_SINGLE_INT_RATE IS
  BEGIN
    GETFACTOR;
    W_ACT_AC_INT_AMT := W_VALUE_BALANCE * 1 * W_SINGLE_INT_RATE /
                        (100 * W_FACTOR);
    UPDATE_RTMPLNIADTL(W_SINGLE_INT_RATE,
                       W_VALUE_BALANCE,
                       W_ACT_AC_INT_AMT);
  END CALC_SINGLE_INT_RATE;
  PROCEDURE CALC_SLAB_INT_RATE IS
    W_BREAK_BALANCE       NUMBER(18, 3);
    W_SLAB_CHOICE         NUMBER(1);
    W_BALANCE             NUMBER(18, 3);
    V_UPTOAMT             NUMBER(18, 3);
    V_SLAB_INT_RATE       NUMBER(7, 5);
    W_INTEREST_AMOUNT     NUMBER(18, 9);
    W_PREV_SLAB_AMOUNT    NUMBER(18, 3);
    W_IND_INTEREST_AMOUNT NUMBER(18, 9);
  BEGIN
    W_INTEREST_AMOUNT  := 0;
    W_BALANCE          := ABS(W_VALUE_BALANCE);
    W_BREAK_BALANCE    := W_BALANCE;
    W_FACTOR           := V_LN_LNCURRPM(W_PRODCODE_CURRCODE)
                         .LNCUR_INT_CALCN_BASIS;
    W_SLAB_CHOICE      := PKG_LOANINTRATEASON.V_LNACIR_SLAB_APPL_CHOICE;
    W_PREV_SLAB_AMOUNT := 0;
    <<BREAKLOOP>>
    FOR IDX IN 1 .. PKG_LOANINTRATEASON.V_SLAB_INIT_AMT_RATE.COUNT LOOP
      V_UPTOAMT := PKG_LOANINTRATEASON.V_SLAB_INIT_AMT_RATE(IDX)
                  .SLAB_AMOUNT;
      DBMS_OUTPUT.PUT_LINE(V_UPTOAMT);
      V_SLAB_INT_RATE := PKG_LOANINTRATEASON.V_SLAB_INIT_AMT_RATE(IDX)
                        .SLAB_INIT_RATE;
      IF W_SLAB_CHOICE = 1 THEN
        --natarajan.a-chn-08-07-2008-rem                    IF (V_UPTOAMT > W_BALANCE) THEN
        IF (V_UPTOAMT >= W_BALANCE) THEN
          W_INTEREST_AMOUNT := ((W_BALANCE * (V_SLAB_INT_RATE) * 1) /
                               (W_FACTOR * 100));
          UPDATE_RTMPLNIADTL(V_SLAB_INT_RATE, W_BALANCE, W_INTEREST_AMOUNT);
          EXIT BREAKLOOP;
        END IF;
      ELSE
        IF V_UPTOAMT >= W_BALANCE THEN
          W_IND_INTEREST_AMOUNT := ((W_BREAK_BALANCE * (V_SLAB_INT_RATE) * 1) /
                                   (W_FACTOR * 100));
          W_INTEREST_AMOUNT     := W_INTEREST_AMOUNT +
                                   W_IND_INTEREST_AMOUNT;
          UPDATE_RTMPLNIADTL(V_SLAB_INT_RATE,
                             W_BREAK_BALANCE,
                             W_IND_INTEREST_AMOUNT);
          EXIT BREAKLOOP;
        ELSE
          W_IND_INTEREST_AMOUNT := (((V_UPTOAMT - W_PREV_SLAB_AMOUNT) *
                                   (V_SLAB_INT_RATE) * 1) /
                                   (W_FACTOR * 100));
          W_INTEREST_AMOUNT     := W_INTEREST_AMOUNT +
                                   W_IND_INTEREST_AMOUNT;
          W_BREAK_BALANCE       := W_BALANCE - V_UPTOAMT;
          W_PREV_SLAB_AMOUNT    := V_UPTOAMT;
          UPDATE_RTMPLNIADTL(V_SLAB_INT_RATE,
                             V_UPTOAMT,
                             W_IND_INTEREST_AMOUNT);
        END IF;
      END IF;
    END LOOP;
    W_ACT_AC_INT_AMT := W_INTEREST_AMOUNT * -1;
  END CALC_SLAB_INT_RATE;
  PROCEDURE CALC_INTEREST_AMOUNT IS
  BEGIN
    W_SINGLE_INT_RATE := PKG_LOANINTRATEASON.V_SINGLE_INT_RATE;
    IF W_SINGLE_INT_RATE <> 0 THEN
      CALC_SINGLE_INT_RATE;
    ELSE
      CALC_SLAB_INT_RATE;
    END IF;
  END CALC_INTEREST_AMOUNT;
  PROCEDURE GET_INTEREST_RATE IS
  BEGIN
    <<GETINTERESTRATE>>
    BEGIN
      PKG_LOANINTRATEASON.PV_ERR_MSG                := '';
      PKG_LOANINTRATEASON.V_INTEREST_RATE_AVAILABLE := 0;
      PKG_LOANINTRATEASON.SP_LOANINTRATEASON(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                             W_INTERNAL_ACNUM,
                                             W_PROCESS_DATE,
                                             1);
      IF TRIM(PKG_LOANINTRATEASON.PV_ERR_MSG) IS NOT NULL THEN
        PKG_PB_GLOBAL.DETAIL_ERRLOG(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                    'X',
                                    PKG_LOANINTRATEASON.PV_ERR_MSG || ' ' ||
                                    ' Process Date =' || W_PROCESS_DATE,
                                    ' ',
                                    W_INTERNAL_ACNUM);
        W_SKIP_FLAG := TRUE;
      ELSE
        IF PKG_LOANINTRATEASON.V_INTEREST_RATE_AVAILABLE = 0 THEN
          RECORD_EXCEPTION(FACNO(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                 W_INTERNAL_ACNUM) ||
                           ' - Interest Rate Not Available');
          W_SKIP_FLAG := TRUE;
        END IF;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        W_ERR_MSG := 'Error in Loan Interest Ason Date Calculation' || ' ' ||
                     SUBSTR(SQLERRM, 1, 900);
        RAISE E_USEREXCEP;
    END GETINTERESTRATE;
  END GET_INTEREST_RATE;
  PROCEDURE CALC_OD_INT IS
  BEGIN
    W_OD_AC_INT_AMT := 0;
    W_OD_BC_INT_AMT := 0;
    W_FACTOR        := V_LN_LNCURRPM(W_PRODCODE_CURRCODE)
                      .LNCUR_INT_CALCN_BASIS;
    W_OD_AC_INT_AMT := (W_OD_AMT * 1 * W_PENAL_FOR_OVERDUE) /
                       (100 * W_FACTOR);
  END CALC_OD_INT;
  PROCEDURE INIT_LOANPKG_VALUES IS
  BEGIN
    PKG_LOANINTRATEASON.V_SINGLE_INT_RATE         := 0;
    PKG_LOANINTRATEASON.V_LNACIR_SLAB_APPL_CHOICE := 0;
    PKG_LOANINTRATEASON.V_INTEREST_RATE_AVAILABLE := 0;
    PKG_LOANINTRATEASON.V_SLAB_INIT_AMT_RATE.DELETE;
  END INIT_LOANPKG_VALUES;
  --07-08-201-0-beg
  PROCEDURE PROCESS_FOR_OD_REUPDATE IS
    W_DUMMY_ACTUAL_OD NUMBER(18, 3);
    W_FINAL_DUE_AMT   NUMBER(18, 3);
  BEGIN
    W_DUMMY_ACTUAL_OD := ABS(W_ACTUAL_OVERDUE_AMT);
    W_FINAL_DUE_AMT   := 0;

    FOR IDX IN (SELECT *
                  FROM RTMPLNNOTDUE C
                 ORDER BY C.RTMPLNND_GRACE_END_DATE DESC) LOOP
      IF IDX.RTMPLNND_NOT_DUE_AMT > W_DUMMY_ACTUAL_OD THEN
        W_FINAL_DUE_AMT   := W_DUMMY_ACTUAL_OD;
        W_DUMMY_ACTUAL_OD := 0;
      ELSE
        W_FINAL_DUE_AMT   := IDX.RTMPLNND_NOT_DUE_AMT;
        W_DUMMY_ACTUAL_OD := W_DUMMY_ACTUAL_OD -
                             ABS(IDX.RTMPLNND_NOT_DUE_AMT);
      END IF;

      UPDATE RTMPLNNOTDUE C
         SET C.RTMPLNND_FINAL_DUE_AMT = W_FINAL_DUE_AMT
       WHERE C.RTMPLNND_INTERNAL_ACNUM = IDX.RTMPLNND_INTERNAL_ACNUM
         AND C.RTMPLNND_GRACE_END_DATE = IDX.RTMPLNND_GRACE_END_DATE
         AND C.RTMPLNND_NOT_DUE_AMT = IDX.RTMPLNND_NOT_DUE_AMT
         AND C.RTMPLNND_ENTRY_TYPE = IDX.RTMPLNND_ENTRY_TYPE
         AND C.RTMPLNND_ACTUAL_DUE_DATE = IDX.RTMPLNND_ACTUAL_DUE_DATE;
    END LOOP;

  END PROCESS_FOR_OD_REUPDATE;

  PROCEDURE PROCESS_FOR_LOAIAPA IS
    W_ARR_NOD    NUMBER(3);
    W_ARR_INT    NUMBER(18, 3);
    W_ARR_OD_INT NUMBER(18, 3);
  BEGIN
    W_ARR_NOD            := 0;
    W_ARR_INT            := 0;
    W_ARR_OD_INT         := 0;
    W_OD_PENDING_PRODUCT := 0;
    <<READLOANIAPS>>
    BEGIN
      FOR IDX IN (SELECT *
                    FROM LOANIAPS L
                   WHERE L.LOANIAPS_ENTITY_NUM =
                         PKG_ENTITY.FN_GET_ENTITY_CODE
                     AND L.LOANIAPS_BRN_CODE = W_PROC_BRN_CODE
                     AND L.LOANIAPS_ACNT_NUM = W_INTERNAL_ACNUM
                     AND L.LOANIAPS_GRACE_END_DATE = W_PROCESS_DATE - 1
                     AND L.LOANIAPS_ACCRUAL_DATE =
                         (SELECT MAX(L.LOANIAPS_ACCRUAL_DATE)
                            FROM LOANIAPS L
                           WHERE L.LOANIAPS_ENTITY_NUM =
                                 PKG_ENTITY.FN_GET_ENTITY_CODE
                             AND L.LOANIAPS_BRN_CODE = W_PROC_BRN_CODE
                             AND L.LOANIAPS_ACNT_NUM = W_INTERNAL_ACNUM
                             AND L.LOANIAPS_GRACE_END_DATE =
                                 W_PROCESS_DATE - 1)) LOOP
        DELETE FROM LOANIAPSHIST C
         WHERE C.LOANIAPSH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND C.LOANIAPSH_BRN_CODE = W_PROC_BRN_CODE
           AND C.LOANIAPSH_ACNT_NUM = W_INTERNAL_ACNUM
           AND C.LOANIAPSH_GRACE_END_DATE = W_PROCESS_DATE - 1;

        INSERT INTO LOANIAPSHIST
          (LOANIAPSH_ENTITY_NUM,
           LOANIAPSH_BRN_CODE,
           LOANIAPSH_ACNT_NUM,
           LOANIAPSH_GRACE_END_DATE,
           LOANIAPSH_ACCRUAL_DATE,
           LOANIAPSH_PS_SERIAL,
           LOANIAPSH_NOT_DUE_AMT,
           LOANIAPSH_ENTRY_TYPE,
           LOANIAPSH_ACTUAL_DUE_DATE,
           LOANIAPSH_FINAL_DUE_AMT)
        VALUES
          (IDX.LOANIAPS_ENTITY_NUM,
           IDX.LOANIAPS_BRN_CODE,
           IDX.LOANIAPS_ACNT_NUM,
           IDX.LOANIAPS_GRACE_END_DATE,
           IDX.LOANIAPS_ACCRUAL_DATE,
           IDX.LOANIAPS_PS_SERIAL,
           IDX.LOANIAPS_NOT_DUE_AMT,
           IDX.LOANIAPS_ENTRY_TYPE,
           IDX.LOANIAPS_ACTUAL_DUE_DATE,
           IDX.LOANIAPS_FINAL_DUE_AMT);

        W_ARR_NOD            := IDX.LOANIAPS_GRACE_END_DATE -
                                IDX.LOANIAPS_ACTUAL_DUE_DATE;
        W_ARR_INT            := (IDX.LOANIAPS_FINAL_DUE_AMT * W_ARR_NOD);
        W_OD_PENDING_PRODUCT := W_OD_PENDING_PRODUCT + W_ARR_INT;
      END LOOP;
    END READLOANIAPS;
  END PROCESS_FOR_LOAIAPA;
  --07-08-201-0-end

  --07-08-2010-beg
  PROCEDURE PROCESS_LOANIAPS IS
  BEGIN
    DELETE FROM LOANIAPS C
     WHERE C.LOANIAPS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
       AND C.LOANIAPS_BRN_CODE = W_PROC_BRN_CODE
       AND C.LOANIAPS_ACNT_NUM = W_INTERNAL_ACNUM;

    INSERT INTO LOANIAPS
      (LOANIAPS_ENTITY_NUM,
       LOANIAPS_BRN_CODE,
       LOANIAPS_ACNT_NUM,
       LOANIAPS_GRACE_END_DATE,
       LOANIAPS_ACCRUAL_DATE,
       LOANIAPS_PS_SERIAL,
       LOANIAPS_NOT_DUE_AMT,
       LOANIAPS_ENTRY_TYPE,
       LOANIAPS_ACTUAL_DUE_DATE,
       LOANIAPS_FINAL_DUE_AMT)
      (SELECT PKG_ENTITY.FN_GET_ENTITY_CODE,
              W_PROC_BRN_CODE,
              C.RTMPLNND_INTERNAL_ACNUM,
              C.RTMPLNND_GRACE_END_DATE,
              W_PROCESS_DATE,
              ROWNUM,
              C.RTMPLNND_NOT_DUE_AMT,
              C.RTMPLNND_ENTRY_TYPE,
              C.RTMPLNND_ACTUAL_DUE_DATE,
              C.RTMPLNND_FINAL_DUE_AMT
         FROM RTMPLNNOTDUE C
        WHERE C.RTMPLNND_INTERNAL_ACNUM = W_INTERNAL_ACNUM);
  END PROCESS_LOANIAPS;
  --07-08-2010-end
  --30-03-2012 ADDED BY MANOJ PRABHAKAR

  PROCEDURE PROCESS_CHKPENALAPPLICABILITY IS
    BEGIN
      SELECT LNPRD_PENAL_INT_APPLICABLE
      INTO W_PENAL_INT_APPLICABLE
      FROM LNPRODPM
      WHERE LNPRD_PROD_CODE = W_ACNTS_PROD_CODE;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_PENAL_INT_APPLICABLE := '0';
   END PROCESS_CHKPENALAPPLICABILITY;

   -- 30-03-2012 ADDED BY MANOJ PRABHAKAR
  PROCEDURE CALC_INTEREST_AMT IS
  BEGIN
    INIT_LOANPKG_VALUES;
    --07-08-201-0-beg
    W_OD_PENDING_PRODUCT := 0;
    PROCESS_FOR_LOAIAPA;
    PROCESS_FOR_OD_REUPDATE;
    PROCESS_LOANIAPS;
    --07-08-201-0-end
    --30-03-2012 beg Added by Manoj Prabhkar
    PROCESS_CHKPENALAPPLICABILITY;
    --30-03-2012 end Added by Manoj Prabhakar

    IF W_VALUE_BALANCE <> 0 THEN
      GET_INTEREST_RATE;
    END IF;

    --07-08-2010-rem    IF W_OD_AMT <> 0 THEN
    IF W_OD_AMT <> 0 OR W_OD_PENDING_PRODUCT <> 0 THEN
  IF W_PENAL_INT_APPLICABLE <> '0' THEN
      GET_OVERDUE_INT_RATE;
    END IF;
    END IF;

    IF W_SKIP_FLAG = FALSE THEN
      IF W_VALUE_BALANCE <> 0 THEN
        CALC_INTEREST_AMOUNT;
      ELSE
        W_ACT_AC_INT_AMT  := 0;
        W_SINGLE_INT_RATE := 0;
      END IF;

      IF W_OD_AMT <> 0 THEN
        CALC_OD_INT;
      ELSE
        W_OD_AC_INT_AMT := 0;
        --07-08-2010-rem        W_PENAL_FOR_OVERDUE := 0;
      END IF;

      --07-08-2010-beg
      W_ARR_OD_INT_AMT := 0;
      IF W_OD_PENDING_PRODUCT <> 0 THEN
        IF NVL(V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
               .LNPRD_PENAL_INT_APPL_FROM,
               0) = '1' THEN
          W_ARR_OD_INT_AMT := 0;
          W_FACTOR         := V_LN_LNCURRPM(W_PRODCODE_CURRCODE)
                             .LNCUR_INT_CALCN_BASIS;
          W_ARR_OD_INT_AMT := (W_OD_PENDING_PRODUCT * 1 *
                              W_PENAL_FOR_OVERDUE) / (100 * W_FACTOR);
          W_OD_AC_INT_AMT  := W_OD_AC_INT_AMT +
                              (-1 * ABS(W_ARR_OD_INT_AMT));

        END IF;
      END IF;
      --07-08-2010-end
      IF W_SHORT_TERM_LOAN = '1' THEN
        W_CAL_INT_AMT := W_CAL_INT_AMT + ABS(W_ACT_AC_INT_AMT);
        IF (W_CAL_INT_AMT >= NVL(W_DISB_AMT, 0)) THEN
          W_SKIP_FLAG := TRUE;
          UPDATE ACNTS
             SET ACNTS_INT_CALC_UPTO = W_CBD
           WHERE ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
             AND ACNTS_INTERNAL_ACNUM = W_INTERNAL_ACNUM;
          RETURN;
        END IF;
      END IF;

      UPDATE_RTMPLNIA;
      --Prasanth NS-CHN-09-10-2008-added
      UPDATE ACNTS
         SET ACNTS_INT_CALC_UPTO = W_CBD
       WHERE ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND ACNTS_INTERNAL_ACNUM = W_INTERNAL_ACNUM;
    END IF;
  END CALC_INTEREST_AMT;
  PROCEDURE UPDATE_RTMPLNIA IS
  BEGIN
    <<INSERTRTMPLNIA>>
    BEGIN

   INSERT INTO RTMPLNIA
        (RTMPLNIA_RUN_NUMBER,
         RTMPLNIA_ACNT_NUM,
         RTMPLNIA_VALUE_DATE,
         RTMPLNIA_ACCRUAL_DATE,
         RTMPLNIA_ACNT_CURR,
         RTMPLNIA_ACNT_BAL,
         RTMPLNIA_INT_ON_AMT,
         RTMPLNIA_OD_PORTION,
         RTMPLNIA_INT_RATE,
         RTMPLNIA_SLAB_AMT,
         RTMPLNIA_OD_INT_RATE,
         RTMPLNIA_LIMIT,
         RTMPLNIA_DP,
         RTMPLNIA_INT_AMT,
         RTMPLNIA_INT_AMT_RND,
         RTMPLNIA_OD_INT_AMT,
         RTMPLNIA_OD_INT_AMT_RND,
         RTMPLNIA_NPA_STATUS,
         RTMPLNIA_NPA_AMT,
         RTMPLNIA_ARR_OD_INT_AMT,
         RTMPLNIA_INSERT_FROM,
         RTMPLNIA_BRN_CODE)
      VALUES
        (W_RUN_NUMBER,
         W_INTERNAL_ACNUM,
         W_PROCESS_DATE,
         W_ASON_DATE,
         W_ACNTS_CURR_CODE,
         W_VALUE_BALANCE + (-1)* W_REDUCE_AMOUNT,
         W_VALUE_BALANCE,
         W_OD_AMT,
         W_SINGLE_INT_RATE,
         0,
         W_PENAL_FOR_OVERDUE,
         W_SANC_LIMIT,
         W_DP_AMT,
         SP_GETFORMAT(1,W_ACNTS_CURR_CODE,W_ACT_AC_INT_AMT,1),
         SP_GETFORMAT(1,W_ACNTS_CURR_CODE,W_ACT_AC_INT_AMT,1),
         W_OD_AC_INT_AMT,
         W_OD_AC_INT_AMT,
         W_NPA_STATUS,
         W_NPA_AMT,
         W_ARR_OD_INT_AMT,
         'C',
         W_PROC_BRN_CODE);
    EXCEPTION
      WHEN OTHERS THEN
        W_ERR_MSG := FACNO(PKG_ENTITY.FN_GET_ENTITY_CODE, W_INTERNAL_ACNUM) ||
                     SUBSTR(SQLERRM, 1, 900);
        RAISE E_USEREXCEP;
    END INSERTRTMPLNIA;
    -- SLAB AMT
    -- ROUND OFF
  END UPDATE_RTMPLNIA;
  PROCEDURE UPDATE_RTMPLNIADTL(W_INTEREST_RATE IN NUMBER,
                               W_AMOUNT        IN NUMBER,
                               W_INT_AMOUNT    IN NUMBER) IS
  BEGIN
    <<INSERTRTMPLNIADTL>>
    BEGIN
      V_BREAK_SL := V_BREAK_SL + 1;
      INSERT INTO RTMPLNIADTL
        (RTMPLNIADTL_RUN_NUMBER,
         RTMPLNIADTL_ACNT_NUM,
         RTMPLNIADTL_VALUE_DATE,
         RTMPLNIADTL_ACCRUAL_DATE,
         RTMPLNIADTL_SL_NUM,
         RTMPLNIADTL_INT_RATE,
         RTMPLNIADTL_UPTO_AMT,
         RTMPLNIADTL_INT_AMT,
         RTMPLNIADTL_INT_AMT_RND)
      VALUES
        (W_RUN_NUMBER,
         W_INTERNAL_ACNUM,
         W_PROCESS_DATE,
         W_ASON_DATE,
         V_BREAK_SL,
         W_INTEREST_RATE,
         W_AMOUNT,
         W_INT_AMOUNT,
         W_INT_AMOUNT);
    EXCEPTION
      WHEN OTHERS THEN
        W_ERR_MSG := 'Error in rtmplniadtl Updatetion ' ||
                     FACNO(PKG_ENTITY.FN_GET_ENTITY_CODE, W_INTERNAL_ACNUM) ||
                     SUBSTR(SQLERRM, 1, 900);
        RAISE E_USEREXCEP;
    END INSERTRTMPLNIADTL;
  END UPDATE_RTMPLNIADTL;
  PROCEDURE GET_ASSET_STATUS IS
  BEGIN
    IF ((W_PROCESS_DATE = W_ASON_DATE) OR (V_ACCR_DAILY_ASSET_CD = '0')) THEN
      <<READASSET>>
      BEGIN
        --11-01-2010-rem          SELECT ASSETCD_ASSET_CLASS, ASSETCLS_ASSET_CODE, ASSETCLS_NPA_DATE
        --11-01-2010-added ASSETCD_OD_INT_REQD
        SELECT ASSETCD_ASSET_CLASS,
               ASSETCLS_ASSET_CODE,
               ASSETCLS_NPA_DATE,
               ASSETCD_OD_INT_REQD
          INTO W_ASSETCD_ASSET_CLASS,
               W_ASSETCLS_ASSET_CODE,
               W_ASSETCLS_NPA_DATE,
               W_NPA_OD_INT_REQD
          FROM ASSETCLS, ASSETCD
         WHERE ASSETCLS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND ASSETCLS_INTERNAL_ACNUM = W_INTERNAL_ACNUM
           AND ASSETCLS_ASSET_CODE = ASSETCD_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          W_ASSETCD_ASSET_CLASS := '';
          W_ASSETCLS_ASSET_CODE := '';
          W_ASSETCLS_NPA_DATE   := NULL;
      END READASSET;
    ELSE
      <<READASSETHIST>>
      BEGIN
        --11-01-2010-added ASSETCD_OD_INT_REQD
        SELECT CA.ASSETCD_ASSET_CLASS,
               A.ASSETCLSH_ASSET_CODE,
               A.ASSETCLSH_NPA_DATE,
               CA.ASSETCD_OD_INT_REQD
          INTO W_ASSETCD_ASSET_CLASS,
               W_ASSETCLS_ASSET_CODE,
               W_ASSETCLS_NPA_DATE,
               W_NPA_OD_INT_REQD
          FROM ASSETCLSHIST A, ASSETCD CA
         WHERE ASSETCLSH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND A.ASSETCLSH_INTERNAL_ACNUM = W_INTERNAL_ACNUM
           AND A.ASSETCLSH_ASSET_CODE = ASSETCD_CODE
           AND A.ASSETCLSH_EFF_DATE =
               (SELECT MAX(AA.ASSETCLSH_EFF_DATE)
                  FROM ASSETCLSHIST AA
                 WHERE ASSETCLSH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                   AND AA.ASSETCLSH_INTERNAL_ACNUM = W_INTERNAL_ACNUM
                   AND AA.ASSETCLSH_EFF_DATE <= W_PROCESS_DATE);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          W_ASSETCD_ASSET_CLASS := '';
          W_ASSETCLS_ASSET_CODE := '';
          W_ASSETCLS_NPA_DATE   := NULL;
      END READASSETHIST;
    END IF;
  END GET_ASSET_STATUS;
  PROCEDURE PROCESS_FOR_ASONSUSPBAL IS
    W_SUSP_ERR_MSG   VARCHAR2(100);
    W_DUMMY_BAL      NUMBER(18, 3);
    W_DUMMY_SUSP_BAL NUMBER(18, 3);
    W_DUMMY_DATE     VARCHAR2(10);
  BEGIN
    W_DUMMY_BAL      := 0;
    W_DUMMY_SUSP_BAL := 0;
    W_DUMMY_DATE     := TO_CHAR(W_PROCESS_DATE, 'DD-MM-YYYY');
    PKG_LNSUSPASON.SP_LNSUSPASON(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                 W_INTERNAL_ACNUM,
                                 W_ACNTS_CURR_CODE,
                                 W_DUMMY_DATE,
                                 W_SUSP_ERR_MSG,
                                 W_DUMMY_BAL,
                                 W_DUMMY_BAL,
                                 W_DUMMY_SUSP_BAL,
                                 W_DUMMY_BAL,
                                 W_DUMMY_BAL,
                                 W_DUMMY_BAL,
                                 W_DUMMY_BAL,
                                 W_DUMMY_BAL,
                                 W_DUMMY_BAL,
                                 W_DUMMY_BAL,
                                 W_DUMMY_BAL);
    IF TRIM(W_SUSP_ERR_MSG) IS NOT NULL THEN
      W_ERR_MSG := 'Error in Loan Suspense balance Calculation ' ||
                   FACNO(PKG_ENTITY.FN_GET_ENTITY_CODE, W_INTERNAL_ACNUM);
      RAISE E_USEREXCEP;
    END IF;
    W_SUSPENSE_BAL := NVL(W_DUMMY_SUSP_BAL, 0);
  END PROCESS_FOR_ASONSUSPBAL;
  --26-06-2009-beg
  PROCEDURE CHECK_GRACE_PERIOD(W_PROC_DATE IN DATE, W_GRACE_DAYS IN NUMBER) IS
    W_GRACE_OD_INT    NUMBER(18, 3);
    W_ERROR_MSG       VARCHAR2(100);
    W_GRACE_FROM_DATE DATE;
    P_TOT_PRIN_DB_AC  NUMBER(18, 3);
    P_TOT_PRIN_CR_AC  NUMBER(18, 3);
    P_TOT_PRIN_DB_BC  NUMBER(18, 3);
    P_TOT_PRIN_CR_BC  NUMBER(18, 3);
    P_TOT_INT_DB_AC   NUMBER(18, 3);
    P_TOT_INT_CR_AC   NUMBER(18, 3);
    P_TOT_INT_DB_BC   NUMBER(18, 3);
    P_TOT_INT_CR_BC   NUMBER(18, 3);
    P_TOT_CHG_DB_AC   NUMBER(18, 3);
    P_TOT_CHG_CR_AC   NUMBER(18, 3);
    P_TOT_CHG_DB_BC   NUMBER(18, 3);
    P_TOT_CHG_CR_BC   NUMBER(18, 3);
    --07-05-2010-beg
    W_SUSP_NON_OD_INT NUMBER(18, 3);
    --07-05-2010-end
  BEGIN
    P_TOT_PRIN_DB_AC := 0;
    P_TOT_PRIN_CR_AC := 0;
    P_TOT_PRIN_DB_BC := 0;
    P_TOT_PRIN_CR_BC := 0;
    P_TOT_INT_DB_AC  := 0;
    P_TOT_INT_CR_AC  := 0;
    P_TOT_INT_DB_BC  := 0;
    P_TOT_INT_CR_BC  := 0;
    P_TOT_CHG_DB_AC  := 0;
    P_TOT_CHG_CR_AC  := 0;
    P_TOT_CHG_DB_BC  := 0;
    P_TOT_CHG_CR_BC  := 0;

    W_GRACE_OD_INT    := 0;
    W_GRACE_FROM_DATE := NULL;
    --  W_GRACE_FROM_DATE := (W_PROCESS_DATE - W_GRACE_DAYS + 1); Rem Guna 08/06/2010
    W_GRACE_FROM_DATE := (W_PROCESS_DATE - W_GRACE_DAYS);

    <<CHECK_LNTRANSUM>>
    BEGIN
      SP_LNTRANSUM(PKG_ENTITY.FN_GET_ENTITY_CODE,
                   W_INTERNAL_ACNUM,
                   NULL,
                   W_ASON_DATE,
                   W_GRACE_FROM_DATE,
                   W_PROC_DATE,
                   W_ERROR_MSG,
                   P_TOT_PRIN_DB_AC,
                   P_TOT_PRIN_CR_AC,
                   P_TOT_PRIN_DB_BC,
                   P_TOT_PRIN_CR_BC,
                   P_TOT_INT_DB_AC,
                   P_TOT_INT_CR_AC,
                   P_TOT_INT_DB_BC,
                   P_TOT_INT_CR_BC,
                   P_TOT_CHG_DB_AC,
                   P_TOT_CHG_CR_AC,
                   P_TOT_CHG_DB_BC,
                   P_TOT_CHG_CR_BC);
    EXCEPTION
      WHEN OTHERS THEN
        P_TOT_PRIN_DB_AC := 0;
        P_TOT_PRIN_CR_AC := 0;
        P_TOT_PRIN_DB_BC := 0;
        P_TOT_PRIN_CR_BC := 0;
        P_TOT_INT_DB_AC  := 0;
        P_TOT_INT_CR_AC  := 0;
        P_TOT_INT_DB_BC  := 0;
        P_TOT_INT_CR_BC  := 0;
        P_TOT_CHG_DB_AC  := 0;
        P_TOT_CHG_CR_AC  := 0;
        P_TOT_CHG_DB_BC  := 0;
        P_TOT_CHG_CR_BC  := 0;
    END CHECK_LNTRANSUM;

    P_TOT_INT_DB_AC := -1 * ABS(P_TOT_INT_DB_AC);

    IF P_TOT_INT_DB_AC <> 0 THEN
      IF ABS(W_OD_AMT) > ABS(P_TOT_INT_DB_AC) THEN
        --07-05-2010-rem        W_OD_AMT := W_OD_AMT - ABS(P_TOT_INT_DB_AC);
        -- w_od_amt always in - sign
        W_OD_AMT := W_OD_AMT + ABS(P_TOT_INT_DB_AC);
      ELSE
        W_OD_AMT := 0;
      END IF;
    END IF;

    --07-05-2010-beg
    IF W_NPA_STATUS = '1' THEN
      <<CHECK_NPA_NON_OD_INT>>
      BEGIN
        W_SUSP_NON_OD_INT := 0;

        SELECT NVL(SUM(LNSUSP_INT_AMT), 0) -- R.Senthil Kumar - 02-July-2010 - Modified
          INTO W_SUSP_NON_OD_INT
          FROM LNSUSPLED
         WHERE LNSUSP_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND LNSUSP_ACNT_NUM = W_INTERNAL_ACNUM
           AND LNSUSP_VALUE_DATE >= W_GRACE_FROM_DATE
           AND LNSUSP_VALUE_DATE <= W_PROC_DATE
           AND LNSUSP_DB_CR_FLG = 'D';

        IF ABS(W_OD_AMT) >= ABS(W_SUSP_NON_OD_INT) THEN
          -- w_od_amt always in - sign
          W_OD_AMT := W_OD_AMT + ABS(W_SUSP_NON_OD_INT);
        ELSE
          W_OD_AMT := 0;
        END IF;
      END CHECK_NPA_NON_OD_INT;
    END IF;
    --07-05-2010-end
  END CHECK_GRACE_PERIOD;
  --26-06-2009-end

  --21-oct-2009-beg
  FUNCTION READ_LOAN_PRIN_OD_AMT RETURN NUMBER IS
  BEGIN
    W_PRIN_OD_AMT := 0;
    <<READLNODHIST>>
    BEGIN
      SELECT NVL(L.LNODHIST_PRIN_OD_AMT, 0)
        INTO W_PRIN_OD_AMT
        FROM LNODHIST L
       WHERE LNODHIST_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND L.LNODHIST_INTERNAL_ACNUM = W_INTERNAL_ACNUM
         AND L.LNODHIST_EFF_DATE =
             (SELECT MAX(LL.LNODHIST_EFF_DATE)
                FROM LNODHIST LL
               WHERE LNODHIST_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                 AND LL.LNODHIST_INTERNAL_ACNUM = W_INTERNAL_ACNUM
                 AND LL.LNODHIST_EFF_DATE <= W_PROCESS_DATE);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_PRIN_OD_AMT := 0;
    END READLNODHIST;
    RETURN W_PRIN_OD_AMT;
  END READ_LOAN_PRIN_OD_AMT;
  --21-oct-2009-end

  PROCEDURE GET_NPA_BAL IS
  BEGIN
    IF W_PROCESS_DATE = W_ASON_DATE THEN
      <<READSUSPBAL>>
      BEGIN
        SELECT LNSUSPBAL_SUSP_BAL
          INTO W_SUSPENSE_BAL
          FROM LNSUSPBAL L
         WHERE LNSUSPBAL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND L.LNSUSPBAL_ACNT_NUM = W_INTERNAL_ACNUM
           AND L.LNSUSPBAL_CURR_CODE = W_ACNTS_CURR_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          W_SUSPENSE_BAL := 0;
      END READSUSPBAL;
    ELSE
      PROCESS_FOR_ASONSUSPBAL;
    END IF;
  END GET_NPA_BAL;
  PROCEDURE GET_NPA_AMOUNT IS
  BEGIN
    W_NPA_STATUS := 0;
    IF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
    .PRODUCT_EXEMPT_FROM_NPA <> '1' THEN
      GET_ASSET_STATUS;
      IF W_ASSETCD_ASSET_CLASS = 'N' THEN
        W_NPA_STATUS := 1;
      END IF;
    END IF;
    IF W_NPA_STATUS = 1 THEN
      GET_NPA_BAL;
    END IF;
  END GET_NPA_AMOUNT;

  -- Add Guna 04/06/2010 start
  PROCEDURE GET_INSTALL_NOT_DUE_AMT(V_ENTITY_NUM          IN NUMBER,
                                    W_INSTALL_GRACE_DATE  IN DATE,
                                    W_INSTALL_NOT_OVERDUE IN OUT NUMBER) AS
    W_INST_PROC_DATE DATE;
    W_CHK_NOI        NUMBER(5);
  BEGIN
    SELECT LNACRSDTL_REPAY_FROM_DATE,
           LNACRSDTL_NUM_OF_INSTALLMENT,
           LNACRSDTL_REPAY_AMT,
           LNACRSDTL_REPAY_FREQ BULK COLLECT
      INTO V_LN_LNACRSDTL
      FROM LNACRSDTL
     WHERE LNACRSDTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
       AND LNACRSDTL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
     ORDER BY LNACRSDTL_SL_NUM;

    IF V_LN_LNACRSDTL.FIRST IS NOT NULL THEN
      FOR IDX IN V_LN_LNACRSDTL.FIRST .. V_LN_LNACRSDTL.LAST LOOP
        W_INST_PROC_DATE := V_LN_LNACRSDTL(IDX).V_REPAY_FROM_DATE;
        W_CHK_NOI        := 1;

        WHILE (W_INST_PROC_DATE <= W_PROCESS_DATE) LOOP
          --12-08-2010-rem          IF (W_INST_PROC_DATE > W_INSTALL_GRACE_DATE) THEN
          IF (W_INST_PROC_DATE >= W_INSTALL_GRACE_DATE) THEN
            W_INSTALL_NOT_OVERDUE := W_INSTALL_NOT_OVERDUE +
                                     V_LN_LNACRSDTL(IDX).V_REPAY_AMT;
            --07-08-2010-beg
            W_GRACE_DAYS := NVL(V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                              .ACNTS_PROD_CODE)
                                .LNPRD_PENALTY_GRACE_DAYS,
                                0);
            INSERT_RTMPLNNOTDUE(W_INTERNAL_ACNUM,
                                W_INST_PROC_DATE + W_GRACE_DAYS,
                                V_LN_LNACRSDTL(IDX).V_REPAY_AMT,
                                W_INST_PROC_DATE,
                                2);
            --07-08-2010-end
          END IF;

          W_CHK_NOI := W_CHK_NOI + 1;

          IF (W_CHK_NOI > V_LN_LNACRSDTL(IDX).V_NUM_OF_INSTALLMENT) THEN
            EXIT;
          END IF;

          IF (V_LN_LNACRSDTL(IDX).V_REPAY_FREQ = 'X') THEN
            EXIT;
          END IF;

          IF (V_LN_LNACRSDTL(IDX).V_REPAY_FREQ = 'M') THEN
            W_INST_PROC_DATE := ADD_MONTHS(W_INST_PROC_DATE, 1);
          ELSIF (V_LN_LNACRSDTL(IDX).V_REPAY_FREQ = 'Q') THEN
            W_INST_PROC_DATE := ADD_MONTHS(W_INST_PROC_DATE, 3);
          ELSIF (V_LN_LNACRSDTL(IDX).V_REPAY_FREQ = 'H') THEN
            W_INST_PROC_DATE := ADD_MONTHS(W_INST_PROC_DATE, 6);
          ELSIF (V_LN_LNACRSDTL(IDX).V_REPAY_FREQ = 'Y') THEN
            W_INST_PROC_DATE := ADD_MONTHS(W_INST_PROC_DATE, 12);
          END IF;
        END LOOP;

      END LOOP;
    END IF;

  END GET_INSTALL_NOT_DUE_AMT;

  PROCEDURE CHECK_INSTALLMENT_GRACE_PERIOD(V_ENTITY_NUM               IN NUMBER,
                                           V_LNPRD_PENALTY_GRACE_DAYS NUMBER) AS
    W_INSTALL_GRACE_DATE  DATE := NULL;
    W_INSTALL_NOT_OVERDUE NUMBER(18, 3) := 0;
  BEGIN
    W_INSTALL_GRACE_DATE  := W_PROCESS_DATE - V_LNPRD_PENALTY_GRACE_DAYS;
    W_INSTALL_NOT_OVERDUE := 0;

    GET_INSTALL_NOT_DUE_AMT(PKG_ENTITY.FN_GET_ENTITY_CODE,
                            W_INSTALL_GRACE_DATE,
                            W_INSTALL_NOT_OVERDUE);
    IF (ABS(W_OD_AMT) > W_INSTALL_NOT_OVERDUE) THEN
      W_OD_AMT := (ABS(W_OD_AMT) - W_INSTALL_NOT_OVERDUE) * (-1);
    ELSE
      W_OD_AMT := 0;
    END IF;

  EXCEPTION
    WHEN OTHERS THEN

      W_ERR_MSG := 'Error in CHECK_INSTALLMENT_GRACE_PERIOD ' ||
                   FACNO(PKG_ENTITY.FN_GET_ENTITY_CODE, W_INTERNAL_ACNUM) ||
                   SUBSTR(SQLERRM, 1, 900);
      RAISE E_USEREXCEP;

  END CHECK_INSTALLMENT_GRACE_PERIOD;

  --05-08-2010-beg
  PROCEDURE INSERT_RTMPLNNOTDUE(ACNUM           IN NUMBER,
                                GRACE_DUE_DATE  IN DATE,
                                AMOUNT          IN NUMBER,
                                ACTUAL_DUE_DATE DATE,
                                ENTRY_TYPE      VARCHAR2) IS
  BEGIN
    INSERT INTO RTMPLNNOTDUE
      (RTMPLNND_INTERNAL_ACNUM,
       RTMPLNND_GRACE_END_DATE,
       RTMPLNND_NOT_DUE_AMT,
       RTMPLNND_ENTRY_TYPE,
       RTMPLNND_ACTUAL_DUE_DATE,
       RTMPLNND_FINAL_DUE_AMT)
    VALUES
      (ACNUM, GRACE_DUE_DATE, AMOUNT, ENTRY_TYPE, ACTUAL_DUE_DATE, 0);
  END INSERT_RTMPLNNOTDUE;

  PROCEDURE TRANADV_PROC IS
    J               NUMBER(6);
    W_SQL_IND       VARCHAR2(4000);
    W_INTRD_BC_AMT  NUMBER(18, 3);
    W_CHARGE_BC_AMT NUMBER(18, 3);
    W_INT_IGN       VARCHAR2(1);
    W_DB_CR_FLG     VARCHAR2(1);
    W_DATE_OF_TRAN  DATE;
  BEGIN

    <<READLNINTAPPL>>
    BEGIN
      W_SQL_IND := 'SELECT TRANADV_INTRD_BC_AMT, TRANADV_CHARGE_BC_AMT,TRAN_DB_CR_FLG,TRAN_DATE_OF_TRAN FROM TRANADV' ||
                   W_PROC_YEAR || ', TRAN' || W_PROC_YEAR ||
                   ' WHERE TRAN_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND TRANADV_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND
                 TRAN_DATE_OF_TRAN <= ' || CHR(39) ||
                   W_PROCESS_DATE || CHR(39) ||
                   ' AND TRAN_DATE_OF_TRAN >= ' || CHR(39) ||
                   W_MIN_PROC_DATE || CHR(39) ||
                   ' AND TRAN_INTERNAL_ACNUM = ' || W_INTERNAL_ACNUM ||
                   ' AND TRAN_AUTH_ON IS NOT NULL AND
                 TRANADV_BRN_CODE = TRAN_BRN_CODE AND TRANADV_DATE_OF_TRAN = TRAN_DATE_OF_TRAN AND TRAN_DB_CR_FLG =''D'' AND TRANADV_INTRD_AC_AMT <> 0 AND
                 TRANADV_BATCH_NUMBER = TRAN_BATCH_NUMBER AND TRANADV_BATCH_SL_NUM = TRAN_BATCH_SL_NUM ORDER BY TRAN_DATE_OF_TRAN DESC,TRAN_AUTH_ON DESC';

      EXECUTE IMMEDIATE W_SQL_IND BULK COLLECT
        INTO TRAN_REC;
      J := 0;
      IF TRAN_REC.FIRST IS NOT NULL THEN
        FOR J IN TRAN_REC.FIRST .. TRAN_REC.LAST LOOP
          W_GRACE_DAYS := NVL(V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                            .ACNTS_PROD_CODE)
                              .LNPRD_INT_RECOV_GRACE_DAYS,
                              0);
          INSERT_RTMPLNNOTDUE(W_INTERNAL_ACNUM,
                              TRAN_REC(J).V_DATE_OF_TRAN + W_GRACE_DAYS,
                              TRAN_REC(J).V_INTRD_BC_AMT,
                              TRAN_REC(J).V_DATE_OF_TRAN,
                              '1');
        END LOOP;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END READLNINTAPPL;
  END TRANADV_PROC;

  -- NEELS-MDS-08-NOV-2010 BEG
  PROCEDURE GET_PENDING_AMOUNT IS
  BEGIN
    W_PENDING_AMOUNT := 0;
    SELECT NVL(SUM(LP.LNINTP_TOBE_REC), 0)
      INTO W_PENDING_AMOUNT
      FROM LNINTPEND LP
     WHERE LP.LNINTP_ENTITY_NUMBER = PKG_ENTITY.FN_GET_ENTITY_CODE
       AND LP.LNINTP_INTERNAL_ACNUM = W_INTERNAL_ACNUM;
  END GET_PENDING_AMOUNT;
  -- NEELS-MDS-08-NOV-2010 END

  PROCEDURE PROCESS_FOR_GRACE_EXECUTION IS
    IND NUMBER(6);
  BEGIN

    DELETE FROM RTMPLNNOTDUE; -- GLOBAL TEMP TABLE
    W_GRACE_DAYS    := 0;
    W_GRACE_DAYS    := NVL(V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                         .ACNTS_PROD_CODE)
                           .LNPRD_INT_RECOV_GRACE_DAYS,
                           0);
    W_MIN_PROC_DATE := W_PROCESS_DATE - NVL(V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                                          .ACNTS_PROD_CODE)
                                            .LNPRD_INT_RECOV_GRACE_DAYS,
                                            0);
    IND             := 0;
    W_PROC_YEAR     := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                     W_MIN_PROC_DATE);
    W_UPTO_YEAR     := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                     W_PROCESS_DATE);
    WHILE (W_PROC_YEAR <= W_UPTO_YEAR) LOOP

      IF SP_TABLEAVAIL(PKG_ENTITY.FN_GET_ENTITY_CODE,
                       'TRANADV' || W_PROC_YEAR) = 1 THEN
        TRANADV_PROC;
      END IF;
      W_PROC_YEAR := W_PROC_YEAR + 1;
    END LOOP;

    <<READSUSPLED>>
    BEGIN
      FOR IDX IN (SELECT *
                    FROM LNSUSPLED C
                   WHERE C.LNSUSP_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                     AND C.LNSUSP_ACNT_NUM = W_INTERNAL_ACNUM
                     AND C.LNSUSP_VALUE_DATE >= W_MIN_PROC_DATE
                     AND C.LNSUSP_VALUE_DATE <= W_PROCESS_DATE
                     AND C.LNSUSP_DB_CR_FLG = 'D'
                     AND C.LNSUSP_AUTO_MANUAL = 'A'
                     AND C.LNSUSP_ENTRY_TYPE = '2') LOOP
        INSERT_RTMPLNNOTDUE(W_INTERNAL_ACNUM,
                            IDX.LNSUSP_VALUE_DATE + W_GRACE_DAYS,
                            IDX.LNSUSP_INT_AMT,
                            IDX.LNSUSP_VALUE_DATE,
                            '1');
      END LOOP;
    END READSUSPLED;

  END PROCESS_FOR_GRACE_EXECUTION;
  --05-08-2010-end

  ----- added by rajib.pradhan on 25-jan-2015 for collect transaction records

PROCEDURE PROCESS_TRANSACTION_DATA(P_ACCOUNT_NUMBER NUMBER, P_FROM_DATE DATE, P_TO_DATE DATE,P_YEAR NUMBER) IS
W_SQL_QUERY VARCHAR2(4000);
  TYPE TRAN_RECORD IS RECORD(
    TRAN_VALUE_DATE     DATE,
    TRANBALANCE  NUMBER(18,3),
    TRANINTBALANCE  NUMBER(18,3),
    TRANCHGBALANCE  NUMBER(18,3));

  TYPE TT_TRAN_RECORD IS TABLE OF TRAN_RECORD INDEX BY PLS_INTEGER;
  T_TRAN_RECORD TT_TRAN_RECORD;
  W_ENTITY_NUMBER NUMBER;

BEGIN
W_ENTITY_NUMBER:=PKG_ENTITY.FN_GET_ENTITY_CODE;

W_SQL_QUERY:='SELECT TRAN_VALUE_DATE, NVL (
          SUM (DECODE (TRAN_DB_CR_FLG, ''C'', TRAN_AMOUNT, 0))
          - SUM (DECODE (TRAN_DB_CR_FLG, ''D'', TRAN_AMOUNT, 0)),
          0)
          TRANBALANCE,
       NVL (
          SUM (DECODE (TRAN_DB_CR_FLG, ''C'', TRANADV_INTRD_AC_AMT, 0))
          - SUM (DECODE (TRAN_DB_CR_FLG, ''D'', TRANADV_INTRD_AC_AMT, 0)),
          0)
          TRANINTBALANCE,
          NVL (
          SUM (DECODE (TRAN_DB_CR_FLG, ''C'', TRANADV_CHARGE_BC_AMT, 0))
          - SUM (DECODE (TRAN_DB_CR_FLG, ''D'', TRANADV_CHARGE_BC_AMT, 0)),
          0)
          TRANCHGBALANCE
  FROM TRANADV'||P_YEAR||', TRAN'||P_YEAR||'
 WHERE     TRAN_ENTITY_NUM =:ENTITY_NUMBER
       AND TRANADV_ENTITY_NUM =:ENTITY_NUMBER
       AND TRAN_VALUE_DATE >=:F_DATE
       AND TRAN_INTERNAL_ACNUM = :ACCOUNT_NUMBER
       AND TRAN_DATE_OF_TRAN <= :T_DATE
       AND TRAN_AUTH_ON IS NOT NULL
       AND TRANADV_BRN_CODE = TRAN_BRN_CODE
       AND TRAN_DATE_OF_TRAN = TRANADV_DATE_OF_TRAN
       AND TRANADV_BATCH_NUMBER = TRAN_BATCH_NUMBER
       AND TRANADV_BATCH_SL_NUM = TRAN_BATCH_SL_NUM
GROUP BY TRAN_VALUE_DATE';

EXECUTE IMMEDIATE W_SQL_QUERY BULK COLLECT INTO T_TRAN_RECORD
USING W_ENTITY_NUMBER, W_ENTITY_NUMBER,  TRUNC(P_FROM_DATE, 'MM') , P_ACCOUNT_NUMBER,P_TO_DATE;

BEGIN
    FORALL IND IN T_TRAN_RECORD.FIRST .. T_TRAN_RECORD.LAST
      INSERT INTO TEMP_LOAN_TRAN_BAL
        (VALUE_YEAR,
         TRAN_INTERNAL_ACNUM,
         TRAN_VALUE_DATE,
         TRANBALANCE,
         TRANINTBALANCE,
         TRANCHGBALANCE)
      VALUES
        (TO_NUMBER(TO_CHAR(T_TRAN_RECORD(IND).TRAN_VALUE_DATE,'YYYY')),
         P_ACCOUNT_NUMBER,
         T_TRAN_RECORD(IND).TRAN_VALUE_DATE,
         T_TRAN_RECORD(IND).TRANBALANCE,
         T_TRAN_RECORD(IND).TRANINTBALANCE,
         T_TRAN_RECORD(IND).TRANCHGBALANCE);

    T_TRAN_RECORD.DELETE;

END;

    EXCEPTION
            WHEN OTHERS THEN
            W_ERR_MSG:=SQLERRM;
END;
----- added by rajib.pradhan on 25-jan-2015  for collect transaction records

  -- Add Guna 04/06/2010 end

  PROCEDURE PROCESS_FOR_TRANSACTION IS
    V_LNACNT_ENTD_ON DATE;
  BEGIN
    -- 03/01/2008-rem          W_INT_ACCR_UPTO_DATE := V_LN_ACNTROW(W_MAIN_INDEX)
    --                                  .ACNTS_INT_ACCR_UPTO;

    W_YEAR                := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,W_ASON_DATE);   ---- added by rajib.pradhan as on 25-jan-2015

    W_INT_ON_RECOVERY := FALSE;
    IF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
    .LNPRD_INT_APPL_FREQ = 'I' THEN
      W_INT_ON_RECOVERY := TRUE;
    END IF;

    IF W_INT_ACCR_UPTO_DATE IS NULL THEN
      W_PROCESS_DATE := V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_OPENING_DATE;
    ELSE
      W_PROCESS_DATE := W_INT_ACCR_UPTO_DATE + 1;
    END IF;
    -- AGK-CHN-04-SEP-2008-BEG
    <<FETCH_LOANACNTS>>
    BEGIN
      V_LNACNT_ENTD_ON := NULL;
      SELECT TRUNC(LNACNT_ENTD_ON)
        INTO V_LNACNT_ENTD_ON
        FROM LOANACNTS
       WHERE LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND LNACNT_INTERNAL_ACNUM = W_INTERNAL_ACNUM;
    EXCEPTION
      WHEN OTHERS THEN
        V_LNACNT_ENTD_ON := NULL;
    END FETCH_LOANACNTS;
    IF V_LNACNT_ENTD_ON IS NOT NULL THEN
      IF V_LNACNT_ENTD_ON > W_PROCESS_DATE THEN
        W_PROCESS_DATE := V_LNACNT_ENTD_ON;
      END IF;
    END IF;
    -- AGK-CHN-04-SEP-2008-END
    IF (W_MIN_VAUE_DATE IS NOT NULL) AND W_MIN_VAUE_DATE < W_PROCESS_DATE THEN
      W_PROCESS_DATE := W_MIN_VAUE_DATE;
    END IF;

     IF PKG_LOAN_CLS_ACCR_PROCESS.W_CALL_FROM_LNINITCALL THEN
           PROCESS_TRANSACTION_DATA(W_INTERNAL_ACNUM,W_PROCESS_DATE, W_ASON_DATE,W_YEAR);   --- added by rajib on 25-jan-2014 for improve performance .......
           PROCESS_TRANSACTION_DATA(W_INTERNAL_ACNUM,W_PROCESS_DATE, W_ASON_DATE,W_YEAR-1);   --- added by rajib on 25-jan-2014 for improve performance .......
     END IF;

    IF W_SHORT_TERM_LOAN = '1' THEN
      W_CAL_INT_AMT := 0;
      W_TOT_INT_DB  := 0;
      W_PROC_YEAR := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                   W_ACNTS_OPENING_DATE);
      W_UPTO_YEAR := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                   W_PROCESS_DATE);
      <<GET_DISB_INT_AMTS>>
      BEGIN
        SELECT *
          INTO W_DISB_AMT, W_MIG_INT_AMT, W_APP_INT_AMT, W_LNIA_INT_AMT
          FROM (SELECT sum(LNACDISB_DISB_AMT)
                  FROM LNACDISB
                 WHERE LNACDISB_INTERNAL_ACNUM = W_INTERNAL_ACNUM),
               (SELECT SUM(LMG.LNTOTINTDB_TOT_INT_DB_AMT)
                  FROM LNTOTINTDBMIG LMG
                 WHERE LMG.LNTOTINTDB_INTERNAL_ACNUM = W_INTERNAL_ACNUM),
               (SELECT SUM(LAP.LNINTAPPL_ACT_INT_AMT)
                  FROM LNINTAPPL LAP
                 WHERE LAP.LNINTAPPL_ACNT_NUM = W_INTERNAL_ACNUM),
               (SELECT SUM(L.LOANIA_INT_AMT_RND)
                  FROM LOANIA L
                 WHERE L.LOANIA_VALUE_DATE >
                       NVL(W_INT_APP_UPTO_DATE, W_ACNTS_OPENING_DATE - 1)
                   AND L.LOANIA_ACNT_NUM = W_INTERNAL_ACNUM);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          W_DISB_AMT     := 0;
          W_MIG_INT_AMT  := 0;
          W_APP_INT_AMT  := 0;
          W_LNIA_INT_AMT := 0;
      END GET_DISB_INT_AMTS;
      W_CAL_INT_AMT := ABS(NVL(W_MIG_INT_AMT, 0)) +
                       ABS(NVL(W_APP_INT_AMT, 0)) +
                       ABS(NVL(W_LNIA_INT_AMT, 0)
                       );
      IF (W_CAL_INT_AMT >= W_DISB_AMT) THEN
		W_ERR_MSG := 'Applied Interest Greater Than disbursed / Outstanding Amount - Short Term :- ';
        RAISE E_USEREXCEP;
	  /*
        UPDATE ACNTS
           SET ACNTS_INT_CALC_UPTO = W_CBD
         WHERE ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND ACNTS_INTERNAL_ACNUM = W_INTERNAL_ACNUM;
		   */
        RETURN;
      END IF;
    END IF;
    <<WLOOP>>
    WHILE W_PROCESS_DATE <= W_ASON_DATE LOOP
      W_VALUE_BALANCE := 0;
      V_BREAK_SL      := 0;
      W_REDUCE_AMOUNT := 0;
      W_NPA_AMT       := 0;
      W_NPA_STATUS    := 0;
      W_SUSPENSE_BAL  := 0;
      W_OD_FOUND      := '0';
      --27-02-2008-beg
      W_SIMPLE_COMP_INT := V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                         .ACNTS_PROD_CODE)
                          .LNPRD_SIMPLE_COMP_INT;
      IF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
      .LNPRD_TERM_LOAN = '1' AND
         V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
      .LNPRD_EDUCATIONAL_LOAN = '1' THEN
        CHECK_HOLIDAY_PERIOD;
      END IF;
      IF W_SIMPLE_COMP_INT = 'S' THEN
        CHECK_EXPIRY;
      END IF;
      --27-02-2008-end
      GET_VALUE_DATE_BALANCE(W_PROCESS_DATE);
      GET_INT_DEB_UPTO_DATE;

      W_INT_ON_AMT    := W_VALUE_BALANCE + ABS(W_REDUCE_AMOUNT);
      W_VALUE_BALANCE := W_INT_ON_AMT;
      GET_NPA_AMOUNT;
      IF W_NPA_STATUS = 1 THEN
        /*27-02-2008-rem                    IF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                             .ACNTS_PROD_CODE)
                             .LNPRD_SIMPLE_COMP_INT = 'C' THEN
                                 W_VALUE_BALANCE := W_VALUE_BALANCE +
                                                    (W_SUSPENSE_BAL);
                                 W_NPA_AMT       := W_SUSPENSE_BAL;
                            END IF;
        */

        IF W_SIMPLE_COMP_INT = 'C' THEN
          --W_VALUE_BALANCE := W_VALUE_BALANCE + (W_SUSPENSE_BAL); -- Avinash-SONALI-22AUG2012 Suspense balance is already part of account balance
          W_VALUE_BALANCE := W_VALUE_BALANCE;   -- Added by Avinash-SONALI-22AUG2012
          W_NPA_AMT       := W_SUSPENSE_BAL;
        END IF;
      END IF;

      --21-oct-2009-beg
      W_PRIN_OD_AMT := 0;
      IF W_INT_ON_RECOVERY = TRUE THEN
        IF GET_OD_INTER_TYPE = 2 THEN
          W_PRIN_OD_AMT   := READ_LOAN_PRIN_OD_AMT;
          W_VALUE_BALANCE := W_VALUE_BALANCE + ABS(W_PRIN_OD_AMT);
        END IF;
      END IF;
      --21-oct-2009-end

      IF W_INT_ON_RECOVERY = FALSE THEN
        GET_OVERDUE_AMT;
      ELSE
        W_SANC_LIMIT := 0;
        W_DP_AMT     := 0;
        W_OD_AMT     := 0;
        W_OD_FOUND   := '0';
        W_OD_DATE    := NULL;
      END IF;

      --13-10-2010-beg
      DELETE FROM RTMPLNNOTDUE; -- GLOBAL TEMP TABLE
      --13-10-2010-end

      --26-06-2009-beg
      DBMS_OUTPUT.PUT_LINE('TOTAL ' ||
                           V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                         .ACNTS_PROD_CODE)
                           .LNPRD_INT_RECOV_GRACE_DAYS);

      IF NVL(W_OD_AMT, 0) <> 0 THEN
        IF NVL(V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
               .LNPRD_INT_RECOV_GRACE_DAYS,
               0) > 0 AND
           V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
        .LNPRD_INT_RECOVERY_OPTION = '1' AND
           V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
        .PRODUCT_FOR_RUN_ACS = '1' THEN
          CHECK_GRACE_PERIOD(W_PROCESS_DATE,
                             NVL(V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                               .ACNTS_PROD_CODE)
                                 .LNPRD_INT_RECOV_GRACE_DAYS,
                                 0));

        END IF;
        --05-08-2010-beg
        PROCESS_FOR_GRACE_EXECUTION;
        --05-08-2010-end
      END IF;
      --26-06-2009-end

      -- Add Guna 04/06/2010 start
      IF (V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
         .PRODUCT_FOR_RUN_ACS <> '1' AND
          V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
         .LNPRD_PENAL_INT_APPLICABLE = '1' AND
          NVL(V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
              .LNPRD_PENALTY_GRACE_DAYS,
              0) > 0) THEN
        CHECK_INSTALLMENT_GRACE_PERIOD(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                       V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX)
                                                      .ACNTS_PROD_CODE)
                                       .LNPRD_PENALTY_GRACE_DAYS);
      END IF;
      -- Add Guna 04/06/2010 end
      IF W_VALUE_BALANCE > 0 THEN
        W_VALUE_BALANCE := 0;
      END IF;
      CALC_INTEREST_AMT;
      W_PROCESS_DATE := W_PROCESS_DATE + 1;
      IF W_SKIP_FLAG = TRUE THEN
        EXIT WLOOP;
      END IF;
    END LOOP;
  END PROCESS_FOR_TRANSACTION;
  --22-02-2008-beg
  PROCEDURE CHECK_HOLIDAY_PERIOD IS
  BEGIN
    W_REPAY_START_DATE := NULL;
    <<READLNACRSDTL>>
    BEGIN
      SELECT LL.LNACRSHDTL_REPAY_FROM_DATE
        INTO W_REPAY_START_DATE
        FROM LNACRSHDTL LL
       WHERE LNACRSHDTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND LL.LNACRSHDTL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
         AND LL.LNACRSHDTL_EFF_DATE =
             (SELECT MAX(LM.LNACRSHDTL_EFF_DATE)
                FROM LNACRSHDTL LM
               WHERE LNACRSHDTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                 AND LM.LNACRSHDTL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
                 AND LM.LNACRSHDTL_EFF_DATE <= W_PROCESS_DATE
                 AND LM.LNACRSHDTL_SL_NUM = 1)
         AND LL.LNACRSHDTL_SL_NUM = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_REPAY_START_DATE := NULL;
    END READLNACRSDTL;
    IF (W_REPAY_START_DATE >= W_PROCESS_DATE) AND
       W_REPAY_START_DATE IS NOT NULL THEN
      W_SIMPLE_COMP_INT := 'S';
    END IF;
  END CHECK_HOLIDAY_PERIOD;

  PROCEDURE CHECK_EXPIRY IS
  BEGIN
    W_LIMIT_EXPIRY_DATE := NULL;
    W_FINAL_DUE_DATE    := NULL;
    GET_LIMIT_EXPIRY;
    IF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
    .PRODUCT_FOR_RUN_ACS <> '1' THEN
      FETCH_REPAY_END_DATE;
    END IF;

    /*         IF ((W_LIMIT_EXPIRY_DATE IS NOT NULL AND (W_LIMIT_EXPIRY_DATE < W_PROCESS_DATE))
                OR (W_FINAL_DUE_DATE IS NOT NULL AND (W_FINAL_DUE_DATE < W_PROCESS_DATE ))) THEN
                W_SIMPLE_COMP_INT  := 'C';
             END IF;
    */
    IF W_FINAL_DUE_DATE IS NULL THEN
      IF ((W_LIMIT_EXPIRY_DATE IS NOT NULL) AND
         (W_LIMIT_EXPIRY_DATE < W_PROCESS_DATE)) THEN
        W_SIMPLE_COMP_INT := 'C';
      END IF;
    END IF;

    IF W_FINAL_DUE_DATE IS NOT NULL THEN
      IF ((W_FINAL_DUE_DATE < W_PROCESS_DATE) AND
         (W_LIMIT_EXPIRY_DATE < W_PROCESS_DATE)) THEN
        W_SIMPLE_COMP_INT := 'C';
      END IF;
    END IF;

  END CHECK_EXPIRY;
  PROCEDURE GET_LIMIT_EXPIRY IS
  BEGIN
    W_LIMIT_EXPIRY_DATE := NULL;
    <<GETLIMITLINE>>
    BEGIN
      SELECT L.LMTLINE_LIMIT_EXPIRY_DATE
        INTO W_LIMIT_EXPIRY_DATE
        FROM ACASLLDTL A, LIMITLINE L
       WHERE LMTLINE_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND ACASLLDTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND L.LMTLINE_CLIENT_CODE = A.ACASLLDTL_CLIENT_NUM
         AND L.LMTLINE_NUM = A.ACASLLDTL_LIMIT_LINE_NUM
         AND A.ACASLLDTL_INTERNAL_ACNUM = W_INTERNAL_ACNUM;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_LIMIT_EXPIRY_DATE := NULL;
    END GETLIMITLINE;
  END GET_LIMIT_EXPIRY;
  PROCEDURE FETCH_REPAY_END_DATE IS
    W_LAT_EFF_DATE    DATE;
    W_NOOF_INSTALLEMT NUMBER(4);
    W_REPAY_DATE      DATE;
    W_MULTI_FREQ      NUMBER(2);
  BEGIN
    W_LAT_EFF_DATE    := NULL;
    W_NOOF_INSTALLEMT := 0;
    W_REPAY_DATE      := NULL;
    W_MULTI_FREQ      := 0;
    SELECT MAX(LNACRSH_EFF_DATE)
      INTO W_LAT_EFF_DATE
      FROM LNACRSHIST L
     WHERE LNACRSH_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
       AND L.LNACRSH_INTERNAL_ACNUM = W_INTERNAL_ACNUM
       AND L.LNACRSH_EFF_DATE <= W_PROCESS_DATE;
    IF W_LAT_EFF_DATE IS NOT NULL THEN
      FOR IDX IN (SELECT *
                    FROM LNACRSHDTL LL
                   WHERE LNACRSHDTL_ENTITY_NUM =
                         PKG_ENTITY.FN_GET_ENTITY_CODE
                     AND LL.LNACRSHDTL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
                     AND LL.LNACRSHDTL_EFF_DATE = W_LAT_EFF_DATE
                   ORDER BY LL.LNACRSHDTL_SL_NUM) LOOP
        IF IDX.LNACRSHDTL_REPAY_FREQ = 'M' THEN
          W_MULTI_FREQ := 1;
        ELSIF IDX.LNACRSHDTL_REPAY_FREQ = 'Q' THEN
          W_MULTI_FREQ := 3;
        ELSIF IDX.LNACRSHDTL_REPAY_FREQ = 'H' THEN
          W_MULTI_FREQ := 6;
        ELSIF IDX.LNACRSHDTL_REPAY_FREQ = 'Y' THEN
          W_MULTI_FREQ := 12;
        ELSIF IDX.LNACRSHDTL_REPAY_FREQ = 'X' THEN
          W_MULTI_FREQ := 0;
        END IF;
        W_REPAY_DATE     := IDX.LNACRSHDTL_REPAY_FROM_DATE;
        W_FINAL_DUE_DATE := ADD_MONTHS(W_REPAY_DATE,
                                       (IDX.LNACRSHDTL_NUM_OF_INSTALLMENT - 1) *
                                       W_MULTI_FREQ);
      END LOOP;
    END IF;
  END FETCH_REPAY_END_DATE;
  --22-02-2008-end
  PROCEDURE PROCESS_ACCOUNT IS
  BEGIN
    <<PROCESSINTEREST>>
    BEGIN
      READ_ACNTS_ROW;
      -- R.Senthil Kumar - 11-June-2010 - Begin
      W_IGNORE := '0';
      W_COUNT  := 0;
      <<CHECK_INT_DISABLED>>
      BEGIN
        SELECT COUNT(0)
          INTO W_COUNT
          FROM LNACINTCTL
         WHERE LNACINTCTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND LNACINTCTL_INTERNAL_ACNUM = W_INTERNAL_ACNUM
           AND LNACINTCTL_INT_ACCRUAL_REQD <> '1';
        IF W_COUNT > 0 THEN
          W_IGNORE := '1';
        END IF;
      END CHECK_INT_DISABLED;

      IF W_IGNORE = '0' THEN
        -- R.Senthil Kumar - 11-June-2010 - End
        W_MAIN_INDEX := 1;

        IF V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_INT_CALC_UPTO = W_CBD THEN
          INSERT INTO RTMPLNIA
            (SELECT W_RUN_NUMBER,
                    RTMPLNIA_ACNT_NUM,
                    RTMPLNIA_VALUE_DATE,
                    RTMPLNIA_ACCRUAL_DATE,
                    RTMPLNIA_ACNT_CURR,
                    RTMPLNIA_ACNT_BAL,
                    RTMPLNIA_INT_ON_AMT,
                    RTMPLNIA_OD_PORTION,
                    RTMPLNIA_INT_RATE,
                    RTMPLNIA_SLAB_AMT,
                    RTMPLNIA_OD_INT_RATE,
                    RTMPLNIA_LIMIT,
                    RTMPLNIA_DP,
                    RTMPLNIA_INT_AMT,
                    RTMPLNIA_INT_AMT_RND,
                    RTMPLNIA_OD_INT_AMT,
                    RTMPLNIA_OD_INT_AMT_RND,
                    RTMPLNIA_NPA_STATUS,
                    RTMPLNIA_NPA_AMT,
                    RTMPLNIA_ARR_OD_INT_AMT,
                    RTMPLNIA_MAX_ACCRUAL_DATE,
                    RTMPLNIA_INSERT_FROM,
                    RTMPLNIA_BRN_CODE
               FROM RTMPLNIA
              WHERE RTMPLNIA_RUN_NUMBER = W_LAP_RUN_NUMBER
                AND RTMPLNIA_ACNT_NUM = W_INTERNAL_ACNUM);

          INSERT INTO RTMPLNIADTL
            (SELECT W_RUN_NUMBER,
                    RTMPLNIADTL_ACNT_NUM,
                    RTMPLNIADTL_VALUE_DATE,
                    RTMPLNIADTL_ACCRUAL_DATE,
                    RTMPLNIADTL_SL_NUM,
                    RTMPLNIADTL_INT_RATE,
                    RTMPLNIADTL_UPTO_AMT,
                    RTMPLNIADTL_INT_AMT,
                    RTMPLNIADTL_INT_AMT_RND
               FROM RTMPLNIADTL
              WHERE RTMPLNIADTL_RUN_NUMBER = W_LAP_RUN_NUMBER
                AND RTMPLNIADTL_ACNT_NUM = W_INTERNAL_ACNUM);
        ELSE
          W_ACNTS_CURR_CODE := V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_CURR_CODE;
          W_ACNTS_PROD_CODE := V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE;
          IF TRIM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_SCHEME_CODE) IS NULL THEN
            W_SCHEME_CODE := '000000';
          ELSE
            --05-12-2007-added
            IF V_LN_LNPRODPM(V_LN_ACNTROW(W_MAIN_INDEX).ACNTS_PROD_CODE)
            .LNPRD_SCHEME_REQD = '1' THEN
              W_SCHEME_CODE := LPAD(TRIM(V_LN_ACNTROW(W_MAIN_INDEX)
                                         .ACNTS_SCHEME_CODE),
                                    6,
                                    0);
            ELSE
              W_SCHEME_CODE := '000000';
            END IF;
          END IF;
          W_PRODCODE_CURRCODE  := LPAD(W_ACNTS_PROD_CODE, 4, 0) ||
                                  W_SCHEME_CODE || W_ACNTS_CURR_CODE;
          W_INT_ACCR_UPTO_DATE := GET_LOANACNTS_ACCR_DATE(W_INTERNAL_ACNUM);
          W_MIN_VAUE_DATE      := GET_MIN_VALUE_DATE(W_INTERNAL_ACNUM);
          W_SKIP_FLAG          := FALSE;
          PROCESS_FOR_TRANSACTION;
        END IF;
      END IF; -- R.Senthil Kumar - 11-June-2010 - Added
    EXCEPTION
      WHEN OTHERS THEN
        IF TRIM(W_ERR_MSG) IS NULL THEN
          W_ERR_MSG := SUBSTR(SQLERRM, 1, 900);
        END IF;

        IF NVL(W_INTERNAL_ACNUM, 0) <> 0 THEN
          W_ERR_MSG := W_ERR_MSG || ' ' || ' Account Number - ' ||
                       FACNO(PKG_ENTITY.FN_GET_ENTITY_CODE,
                             W_INTERNAL_ACNUM);
        END IF;

        PKG_EODSOD_FLAGS.PV_ERROR_MSG := W_ERR_MSG;
        PKG_PB_GLOBAL.DETAIL_ERRLOG(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                    'E',
                                    W_ERR_MSG,
                                    ' ',
                                    0);
        RAISE;
    END PROCESSINTEREST;

  END PROCESS_ACCOUNT;
  --15-10-2008-beg
  PROCEDURE DELETE_TEMP_TABLE IS
  BEGIN
    DELETE FROM RTMPLNIA L WHERE L.RTMPLNIA_RUN_NUMBER = W_RUN_NUMBER;
    DELETE FROM RTMPLNIADTL LL
     WHERE LL.RTMPLNIADTL_RUN_NUMBER = W_RUN_NUMBER;
    DELETE FROM LOANCALCCTL LLL
     WHERE LOANCTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
       AND LLL.LOANCTL_RUN_NUMBER = W_RUN_NUMBER;
  END DELETE_TEMP_TABLE;
  --15-10-2008-end

  PROCEDURE GET_RUN_NUMBER IS
  BEGIN
    <<READNUM>>
    BEGIN
      SELECT GENRUNNUM.NEXTVAL INTO W_RUN_NUMBER FROM DUAL;
    END READNUM;

    --15-10-2008-beg
    <<DELETETEMPREC>>
    BEGIN
      DELETE_TEMP_TABLE;
    END DELETETEMPREC;
    --15-10-2008-end

    INSERT INTO LOANCALCCTL L
      (LOANCTL_ENTITY_NUM,
       LOANCTL_RUN_NUMBER,
       LOANCTL_PROD_CODE,
       LOANCTL_INTERNAL_ACNUM,
       LOANCTL_RUN_DATE,
       LOANCTL_ACCRUAL_UPTO_DATE,
       LOANCTL_RUN_BY,
       LOANCTL_RUN_ON,
       LOANCTL_POSTED_BY,
       LOANCTL_POSTED_ON,
       LOANCTL_POSTED_TO_BATCH_NUM,
       LOANCTL_POSTED_TO_BRANCH)
    VALUES
      (PKG_ENTITY.FN_GET_ENTITY_CODE,
       W_RUN_NUMBER,
       0,
       W_INTERNAL_ACNUM,
       W_ASON_DATE,
       W_ASON_DATE,
       PKG_EODSOD_FLAGS.PV_USER_ID,
       SYSDATE,
       ' ',
       NULL,
       0,
       0);
  END GET_RUN_NUMBER;

  --Prasanth NS-CHN-07-10-2008-beg
  FUNCTION FN_READ_SODEODPROCRUN(L_PROCESS_NAME IN VARCHAR2,
                                 L_PROCESS_DATE IN DATE) RETURN NUMBER IS
    L_RUN_NUMBER NUMBER DEFAULT 0;
  BEGIN
    <<FETCH_SODEODPROCRUN>>
    BEGIN
      SELECT SODEODPROCRUN_RUN_NUMBER
        INTO L_RUN_NUMBER
        FROM SODEODPROCRUN
       WHERE SODEODPROCRUN_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
         AND SODEODPROCRUN_PACKAGE_NAME = L_PROCESS_NAME
         AND SODEODPROCRUN_DATE = L_PROCESS_DATE;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        GET_RUN_NUMBER;
        L_RUN_NUMBER := W_RUN_NUMBER;
        INSERT INTO SODEODPROCRUN
          (SODEODPROCRUN_ENTITY_NUM,
           SODEODPROCRUN_PACKAGE_NAME,
           SODEODPROCRUN_DATE,
           SODEODPROCRUN_RUN_NUMBER)
        VALUES
          (PKG_ENTITY.FN_GET_ENTITY_CODE,
           L_PROCESS_NAME,
           L_PROCESS_DATE,
           L_RUN_NUMBER);
    END FETCH_SODEODPROCRUN;
    W_LAP_RUN_NUMBER := L_RUN_NUMBER;
    RETURN L_RUN_NUMBER;
  END FN_READ_SODEODPROCRUN;
  --Prasanth NS-CHN-07-10-2008-end

  PROCEDURE PROC_INT_CALC_FOR_CLS(V_ENTITY_NUM     IN NUMBER,
                          V_BRN_CODE       IN NUMBER,
                          V_ACCOUNT_NUMBER IN NUMBER,
                          V_BATCH_NUM OUT NUMBER) IS
    W_MIG_M_Y VARCHAR2(20) := '';  --=====MIG

  BEGIN
    --07-08-2010-beg
    W_PROC_BRN_CODE := V_BRN_CODE;
    --07-08-2010-end
    --ENTITY CODE COMMONLY ADDED - 06-11-2009  - BEG

    PKG_ENTITY.SP_SET_ENTITY_CODE(V_ENTITY_NUM);
    GET_BANK_LVL_OPER_PARAM;
    W_FIN_START_MONTH := PKG_PB_GLOBAL.FN_GET_FIN_YEAR_MONTH(PKG_ENTITY.FN_GET_ENTITY_CODE);
    <<READLOANACNTS>>
    W_ASON_DATE := PKG_EODSOD_FLAGS.PV_CURRENT_DATE;
    --sithik 10-jan-2011 add beg
    W_CBD := W_ASON_DATE;
    --sithik 10-jan-2011 add end

    W_INT_ON_RECOVERY := FALSE;

       -- MID MONTH MIG
          W_MIG_M_Y := '';
          W_IS_MIG_MONTH := '';
          SELECT TO_CHAR(MIG_END_DATE,'MON-YYYY') INTO W_MIG_M_Y FROM MIG_DETAIL WHERE BRANCH_CODE = W_PROC_BRN_CODE;
          IF W_MIG_M_Y = TO_CHAR(W_CBD,'MON-YYYY') THEN
             W_IS_MIG_MONTH :='Y';
           ELSE
             W_IS_MIG_MONTH :='N';
          END IF;
       --=====

    IF (W_LAP_PROCESS = TRUE) THEN
      W_RUN_NUMBER := FN_READ_SODEODPROCRUN(PKG_EODSOD_FLAGS.PV_PROCESS_NAME,
                                            PKG_EODSOD_FLAGS.PV_CURRENT_DATE);
    ELSE
      GET_RUN_NUMBER;

      --Prasanth NS-CHN-09-10-2008-Beg
      <<FETCH_SODEODPROCRUN>>
      BEGIN
        SELECT SODEODPROCRUN_RUN_NUMBER
          INTO W_LAP_RUN_NUMBER
          FROM SODEODPROCRUN
         WHERE SODEODPROCRUN_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
           AND SODEODPROCRUN_PACKAGE_NAME =
               PKG_SYSMONITOR.FN_GET_PROCESS_NAME(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                                  PKG_EODSOD_FLAGS.PV_PROCESS_NAME)
           AND SODEODPROCRUN_DATE = PKG_EODSOD_FLAGS.PV_CURRENT_DATE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          W_LAP_RUN_NUMBER := 0;
      END SODEODPROCRUN;
      --Prasanth NS-CHN-09-10-2008-end
    END IF;
    --AGK-CHN-04-SEP-2008-REM          GET_LNPRODPM_PARAM;
    --AGK-CHN-04-SEP-2008-REM          GET_CURR_SPECIFIC_PARAM;
    W_DAY_END_STR       := ' LL.LNPRD_INT_ACCR_FREQ = ''D'' ';
    W_MONTH_END_STR     := W_DAY_END_STR || ' OR ' ||
                           ' LL.LNPRD_INT_ACCR_FREQ = ''M'' ';
    W_QUARTER_END_STR   := W_MONTH_END_STR || ' OR ' ||
                           ' LL.LNPRD_INT_ACCR_FREQ = ''Q'' ';
    W_HALF_YEAR_END_STR := W_QUARTER_END_STR || ' OR ' ||
                           ' LL.LNPRD_INT_ACCR_FREQ = ''H'' ';
    W_YEAR_END_STR      := W_HALF_YEAR_END_STR || ' OR ' ||
                           ' LL.LNPRD_INT_ACCR_FREQ = ''Y'' ';
    W_DMQHY             := 'D';
    W_FINAL_WHERE_STR   := W_DAY_END_STR;
    IF GET_MQHY_MON(PKG_ENTITY.FN_GET_ENTITY_CODE, W_ASON_DATE, 'M') = 1 THEN
      W_DMQHY           := 'M';
      W_FINAL_WHERE_STR := W_MONTH_END_STR;
      IF GET_MQHY_MON(PKG_ENTITY.FN_GET_ENTITY_CODE, W_ASON_DATE, 'Q') = 1 THEN
        W_DMQHY           := 'Q';
        W_FINAL_WHERE_STR := W_QUARTER_END_STR;
        IF GET_MQHY_MON(PKG_ENTITY.FN_GET_ENTITY_CODE, W_ASON_DATE, 'H') = 1 THEN
          W_DMQHY           := 'H';
          W_FINAL_WHERE_STR := W_HALF_YEAR_END_STR;
        END IF;
        IF GET_MQHY_MON(PKG_ENTITY.FN_GET_ENTITY_CODE, W_ASON_DATE, 'Y') = 1 THEN
          W_DMQHY           := 'Y';
          W_FINAL_WHERE_STR := W_YEAR_END_STR;
        END IF;
      END IF;
    END IF;
    BEGIN
      --AGK-CHN-30-08-2008-CHANGES
      IF V_ACCOUNT_NUMBER <> 0 THEN
        DELETE FROM PROCACNUM
         WHERE PROCACNUM_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE;
        INSERT INTO PROCACNUM
          (PROCACNUM_ENTITY_NUM, PROC_INTERNAL_ACNUM)
        VALUES
          (PKG_ENTITY.FN_GET_ENTITY_CODE, V_ACCOUNT_NUMBER);
        GET_LNPRODPM_PARAM;
        GET_CURR_SPECIFIC_PARAM;
      END IF;

      --AGK-CHN-30-08-2008-CHANGES
      /* AGK-CHN-04-SEP-2008-REM-BEG
      W_SQL := 'SELECT ACNTS_INTERNAL_ACNUM  FROM ACNTS A , LOANACNTS L, LNPRODPM LL WHERE LL.LNPRD_INT_PROD_BASIS = ''D'' AND
            A.ACNTS_PROD_CODE = LL.LNPRD_PROD_CODE AND NVL(LL.LNPRD_INT_FREE_LOANS,0) <> ''1'' AND
            A.ACNTS_INTERNAL_aCNUM = L.LNACNT_INTERNAL_ACNUM AND
            A.ACNTS_AUTH_ON IS NOT NULL AND A.ACNTS_CLOSURE_DATE IS NULL AND
            L.LNACNT_AUTH_ON IS NOT NULL AND ( L.LNACNT_INT_ACCR_UPTO IS  NULL OR L.LNACNT_INT_ACCR_UPTO < :1) '; */

      -- 30-08-2008- PROCACNUM ADDED IN THE FROM TABLE AND WHERE CONDITION
/* Commented by Avinash K 16-AUG-2012 Bgn
      W_SQL := 'SELECT ACNTS_INTERNAL_ACNUM  FROM PROCACNUM P, ACNTS A , LOANACNTS L, LNPRODPM LL WHERE LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND PROCACNUM_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND  LL.LNPRD_INT_PROD_BASIS = ''D'' AND
                       A.ACNTS_PROD_CODE = LL.LNPRD_PROD_CODE AND NVL(LL.LNPRD_INT_FREE_LOANS,0) <> ''1'' AND
                       A.ACNTS_INTERNAL_aCNUM = L.LNACNT_INTERNAL_ACNUM AND P.PROC_INTERNAL_ACNUM = A.ACNTS_INTERNAL_aCNUM AND
                       A.ACNTS_AUTH_ON IS NOT NULL AND A.ACNTS_CLOSURE_DATE IS NULL AND
                       L.LNACNT_AUTH_ON IS NOT NULL AND ( L.LNACNT_INT_ACCR_UPTO IS  NULL OR L.LNACNT_INT_ACCR_UPTO < :1) ';
Commented by Avinash K 16-AUG-2012 End*/
      -- Modified by Avinash K 16-AUG-2012 Bgn
      W_SQL := 'SELECT ACNTS_INTERNAL_ACNUM,LL.LNPRD_SHORT_TERM_LOAN,L.LNACNT_INT_APPLIED_UPTO_DATE,A.ACNTS_OPENING_DATE  FROM PROCACNUM P, ACNTS A , LOANACNTS L, LNPRODPM LL, ASSETCLS ACLS, ASSETCD ACD WHERE L.LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND A.ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND P.PROCACNUM_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND  LL.LNPRD_INT_PROD_BASIS = ''D'' AND
                       A.ACNTS_PROD_CODE = LL.LNPRD_PROD_CODE AND NVL(LL.LNPRD_INT_FREE_LOANS,0) <> ''1'' AND
                       A.ACNTS_INTERNAL_aCNUM = L.LNACNT_INTERNAL_ACNUM AND P.PROC_INTERNAL_ACNUM = A.ACNTS_INTERNAL_aCNUM AND
                       A.ACNTS_AUTH_ON IS NOT NULL AND A.ACNTS_CLOSURE_DATE IS NULL AND ACLS.ASSETCLS_INTERNAL_ACNUM = L.LNACNT_INTERNAL_ACNUM
                       AND ACLS.ASSETCLS_ASSET_CODE = ACD.ASSETCD_CODE AND
                       L.LNACNT_AUTH_ON IS NOT NULL AND ( L.LNACNT_INT_ACCR_UPTO IS  NULL OR L.LNACNT_INT_ACCR_UPTO < :1) ';
      -- Modified by Avinash K 16-AUG-2012 End
      IF V_BRN_CODE <> 0 THEN
        W_SQL := W_SQL || ' AND A.ACNTS_BRN_CODE = ' || V_BRN_CODE;
      END IF;
      IF V_ACCOUNT_NUMBER <> 0 THEN
        W_SQL := W_SQL || ' AND A.ACNTS_INTERNAL_aCNUM = ' ||
                 V_ACCOUNT_NUMBER;
      END IF;
      IF V_ACCOUNT_NUMBER = 0 THEN
        W_SQL := W_SQL || ' AND ( ' || W_FINAL_WHERE_STR ||
                 ' ) AND LL.LNPRD_INT_ACCR_REQD = ''1''';
      END IF;
      EXECUTE IMMEDIATE W_SQL BULK COLLECT
        INTO T_ACNTS
        USING W_ASON_DATE;
      FOR IDX IN 1 .. T_ACNTS.COUNT LOOP

        W_INTERNAL_ACNUM := T_ACNTS(IDX).ACNTS_INTERNAL_ACNUM;
        W_SHORT_TERM_LOAN    := T_ACNTS(IDX).LNPRD_SHORT_TERM_LOAN;
        W_INT_APP_UPTO_DATE  := T_ACNTS(IDX).LNACNT_INT_APPLIED_UPTO_DATE;
        W_ACNTS_OPENING_DATE := T_ACNTS(IDX).ACNTS_OPENING_DATE;
        --Prasanth NS-CHN-09-10-2008-beg
        IF W_LAP_PROCESS = TRUE THEN
          DELETE FROM RTMPLNIA
           WHERE RTMPLNIA_RUN_NUMBER = W_LAP_RUN_NUMBER
             AND RTMPLNIA_ACNT_NUM = W_INTERNAL_ACNUM;
          DELETE FROM RTMPLNIADTL
           WHERE RTMPLNIADTL_RUN_NUMBER = W_LAP_RUN_NUMBER
             AND RTMPLNIADTL_ACNT_NUM = W_INTERNAL_ACNUM;
        END IF;
        --Prasanth NS-CHN-09-10-2008-end
        PROCESS_ACCOUNT;
      END LOOP;
      --Prasanth NS-CHN-07-10-2008-added
      IF (W_LAP_PROCESS = FALSE) THEN
        IF TRIM(PKG_EODSOD_FLAGS.GET_ERROR_MSG(PKG_ENTITY.FN_GET_ENTITY_CODE)) IS NULL THEN
          PKG_EODSOD_FLAGS.PV_RUN_NUMBER := W_RUN_NUMBER;
          PKG_LOANDAILYACCRPOST_FOR_CLS.SP_LOANACCRPOST_FOR_CLS(PKG_ENTITY.FN_GET_ENTITY_CODE,V_ACCOUNT_NUMBER, W_BATCH_NUM);
          V_BATCH_NUM := W_BATCH_NUM;
        END IF;
      END IF;
      -- AGK-CHN-24-SEP-2008-ADD
      IF V_ACCOUNT_NUMBER <> 0 THEN
        DESTROY_ARRAYS;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        DESTROY_ARRAYS;
        IF TRIM(W_ERR_MSG) IS NULL THEN
          W_ERR_MSG := SUBSTR(SQLERRM, 1, 900);
        END IF;
        PKG_EODSOD_FLAGS.PV_ERROR_MSG := W_ERR_MSG;
        PKG_PB_GLOBAL.DETAIL_ERRLOG(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                    'E',
                                    W_ERR_MSG,
                                    ' ',
                                    0);
    END READLOANACNTS;
  END PROC_INT_CALC_FOR_CLS;

  /*--29-07-2008-added
  -- THIS BELOW FUNCTION GLOBALLY MOVED TO PKG_PROCESS_CHECK MODULE
       FUNCTION CHECK_ALREADY_PROCESSED(BRN_CODE NUMBER) RETURN BOOLEAN IS
        W_NUMBER NUMBER(1);
       BEGIN
            W_NUMBER  := 0;
            <<CHECKPROC>>
            BEGIN
                SELECT 1 INTO W_NUMBER FROM EODSODPROCBRN E WHERE E.PROC_TYPE =  PKG_EODSOD_FLAGS.PV_EODSODFLAG AND E.PROC_NAME = PKG_EODSOD_FLAGS.PV_PROCESS_NAME
                AND E.PROC_DATE = PKG_EODSOD_FLAGS.PV_CURRENT_DATE AND E.PROC_BRN_CODE = BRN_CODE;
            EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                     W_NUMBER := 0;
            END CHECKPROC;

            IF NVL(W_NUMBER,0) = 1 THEN
              RETURN TRUE;
            ELSE
              RETURN FALSE;
            END IF;
       END CHECK_ALREADY_PROCESSED;

       PROCEDURE INSERT_ROW_INTO_EODSODPROCBRN(BRN_CODE IN NUMBER) IS
       BEGIN
            <<INSERTROW>>
            BEGIN
                INSERT INTO EODSODPROCBRN ( PROC_TYPE, PROC_NAME,
                PROC_DATE, PROC_BRN_CODE,PROC_PROD_CODE)
                VALUES (PKG_EODSOD_FLAGS.PV_EODSODFLAG,
                PKG_EODSOD_FLAGS.PV_PROCESS_NAME,
                PKG_EODSOD_FLAGS.PV_CURRENT_DATE,
                BRN_CODE,
                0);
            END INSERTROW;

       END INSERT_ROW_INTO_EODSODPROCBRN;
  */

  PROCEDURE DESTROY_BRN_WISE_ARRAYS IS
  BEGIN
    V_INTERNAL_ACNUM.DELETE;
    T_ACNTS.DELETE;
  END DESTROY_BRN_WISE_ARRAYS;

  PROCEDURE PROC_BRN_WISE(V_ENTITY_NUM IN NUMBER,
                          V_BRN_CODE   IN NUMBER DEFAULT 0) IS
    W_BRN_CODE NUMBER(6);
    --AGK-CHN-04-SEP-2008-BEG
    W_ACCOUNT_COUNT NUMBER(10);
    --AGK-CHN-04-SEP-2008-END
      W_MIG_M_Y VARCHAR2(20) := '';    --=====MIG
  BEGIN
    --ENTITY CODE COMMONLY ADDED - 06-11-2009  - BEG
    PKG_ENTITY.SP_SET_ENTITY_CODE(V_ENTITY_NUM);
    --ENTITY CODE COMMONLY ADDED - 06-11-2009  - END
    W_FIN_START_MONTH := PKG_PB_GLOBAL.FN_GET_FIN_YEAR_MONTH(PKG_ENTITY.FN_GET_ENTITY_CODE);
    <<PROCESSBRNWISE>>
    BEGIN
      W_BRN_CODE := 0;
      W_CBD      := PKG_EODSOD_FLAGS.PV_CURRENT_DATE; --Prasanth NS-CHN-07-10-2008-added
      --AGK-CHN-04-SEP-2008-BEG
      GET_LNPRODPM_PARAM;
      GET_CURR_SPECIFIC_PARAM;

      PKG_PROCESS_CHECK.INIT_PROC_BRN_WISE(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                           V_BRN_CODE); -- SPECIFIC

      V_DUMMY_INTERNAL_ACNUM.DELETE;
      --AGK-CHN-04-SEP-2008-END

      /*      IF V_BRN_CODE <> 0 THEN
                   SELECT DISTINCT A.ACNTS_BRN_CODE BULK COLLECT INTO V_LN_ACNTBRN
                      FROM ACNTS A WHERE ACNTS_BRN_CODE = V_BRN_CODE ORDER BY A.ACNTS_BRN_CODE;
            ELSE
                   SELECT DISTINCT A.ACNTS_BRN_CODE BULK COLLECT INTO V_LN_ACNTBRN
                      FROM ACNTS A ORDER BY A.ACNTS_BRN_CODE;
            END IF;
      */
      FOR IDX IN 1 .. PKG_PROCESS_CHECK.V_ACNTBRN.COUNT LOOP
        W_BRN_CODE := PKG_PROCESS_CHECK.V_ACNTBRN(IDX).LN_BRN_CODE;
        IF PKG_PROCESS_CHECK.CHK_BRN_ALREADY_PROCESSED(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                                       W_BRN_CODE) = FALSE THEN
          --31-08-2008-CHANGES
          W_ACCOUNT_COUNT := 0;
          --Prasanth NS-CHN-07-10-2008-removed
          /*SELECT B.ACNTS_INTERNAL_ACNUM BULK COLLECT
           INTO V_DUMMY_INTERNAL_ACNUM
           FROM ACNTS B,LOANACNTS
          WHERE B.ACNTS_INTERNAL_ACNUM = LNACNT_INTERNAL_ACNUM
            AND B.ACNTS_BRN_CODE = W_BRN_CODE;*/

          --Prasanth NS-CHN-07-10-2008-BEG

          /* Commented by Avinash K 16-AUG-2012
          IF W_LAP_PROCESS = TRUE THEN
            SELECT ACNTS_INTERNAL_ACNUM BULK COLLECT
              INTO V_DUMMY_INTERNAL_ACNUM
              FROM ACNTS, LOANACNTS
             WHERE LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
               AND ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
               AND ACNTS_INTERNAL_ACNUM = LNACNT_INTERNAL_ACNUM
               AND ACNTS_BRN_CODE = W_BRN_CODE
               AND (ACNTS_INT_CALC_UPTO IS NULL OR
                   ACNTS_INT_CALC_UPTO < W_CBD);
          ELSE
            SELECT ACNTS_INTERNAL_ACNUM BULK COLLECT
              INTO V_DUMMY_INTERNAL_ACNUM
              FROM ACNTS, LOANACNTS
             WHERE LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
               AND ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
               AND ACNTS_INTERNAL_ACNUM = LNACNT_INTERNAL_ACNUM
               AND ACNTS_BRN_CODE = W_BRN_CODE
               AND (ACNTS_INT_CALC_UPTO IS NULL OR
                   ACNTS_INT_CALC_UPTO <= W_CBD);
          END IF;
          */

          -- MID MONTH MIG
          W_MIG_M_Y := '';
          W_IS_MIG_MONTH := '';
          SELECT TO_CHAR(MIG_END_DATE,'MON-YYYY') INTO W_MIG_M_Y FROM MIG_DETAIL WHERE BRANCH_CODE = W_BRN_CODE;
          IF W_MIG_M_Y = TO_CHAR(W_CBD,'MON-YYYY') THEN
             W_IS_MIG_MONTH :='Y';
           ELSE
             W_IS_MIG_MONTH :='N';
          END IF;
         --=====


        -- Modified by Avinash K 16-AUG-2012 Bgn
          IF W_LAP_PROCESS = TRUE THEN
            SELECT A.ACNTS_INTERNAL_ACNUM BULK COLLECT
              INTO V_DUMMY_INTERNAL_ACNUM
              FROM ACNTS A, LOANACNTS L, ASSETCLS ACLS, ASSETCD ACD
             WHERE L.LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
               AND A.ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
               AND A.ACNTS_INTERNAL_ACNUM = L.LNACNT_INTERNAL_ACNUM
               AND ACLS.ASSETCLS_INTERNAL_ACNUM = L.LNACNT_INTERNAL_ACNUM
               AND ACLS.ASSETCLS_ASSET_CODE = ACD.ASSETCD_CODE
               AND NVL(ACD.ASSETCD_NONPERF_CAT,0) <> '3'
               AND A.ACNTS_BRN_CODE = W_BRN_CODE
               AND (A.ACNTS_INT_CALC_UPTO IS NULL OR
                   A.ACNTS_INT_CALC_UPTO < W_CBD);
          ELSE
            SELECT A.ACNTS_INTERNAL_ACNUM BULK COLLECT
              INTO V_DUMMY_INTERNAL_ACNUM
              FROM ACNTS A, LOANACNTS L, ASSETCLS ACLS, ASSETCD ACD
             WHERE L.LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
               AND A.ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
               AND A.ACNTS_INTERNAL_ACNUM = L.LNACNT_INTERNAL_ACNUM
               AND ACLS.ASSETCLS_INTERNAL_ACNUM = L.LNACNT_INTERNAL_ACNUM
               AND ACLS.ASSETCLS_ASSET_CODE = ACD.ASSETCD_CODE
               AND NVL(ACD.ASSETCD_NONPERF_CAT,0) <> '3'
               AND A.ACNTS_BRN_CODE = W_BRN_CODE
               AND (A.ACNTS_INT_CALC_UPTO IS NULL OR
                   A.ACNTS_INT_CALC_UPTO <= W_CBD);
          END IF;
        -- Modified by Avinash K 16-AUG-2012 End

          IF (W_LAP_PROCESS = TRUE) THEN
            PKG_PROCESS_CHECK.W_ACCOUNT_LIMIT := PKG_EODSOD_FLAGS.PV_INTERVAL_COUNT;
          END IF;
          --Prasanth NS-CHN-07-10-2008-END

          FOR DACNTS IN 1 .. V_DUMMY_INTERNAL_ACNUM.COUNT LOOP
            W_ACCOUNT_COUNT := W_ACCOUNT_COUNT + 1;

            PKG_PROCESS_CHECK.CHK_IGNORE_ACNUM(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                               V_DUMMY_INTERNAL_ACNUM(DACNTS));

            IF W_ACCOUNT_COUNT MOD PKG_PROCESS_CHECK.W_ACCOUNT_LIMIT = 0 THEN
              PROC_INT_CALC_FOR_CLS(PKG_ENTITY.FN_GET_ENTITY_CODE, W_BRN_CODE,0,W_BATCH_NUM);
              IF TRIM(W_ERR_MSG) IS NOT NULL THEN
                PKG_EODSOD_FLAGS.PV_ERROR_MSG := W_ERR_MSG;
              END IF;

              PKG_PROCESS_CHECK.CHECK_COMMIT_ROLLBACK_STATUS(PKG_ENTITY.FN_GET_ENTITY_CODE);

            END IF;
          END LOOP;
          DESTROY_BRN_WISE_ARRAYS;
          V_DUMMY_INTERNAL_ACNUM.DELETE;
          --31-08-2008-CHANGES
          -- THIS IS FOR HANDLING REAMAINING LAST RECORED IN THE ABOVE LOOP;
          PROC_INT_CALC_FOR_CLS(PKG_ENTITY.FN_GET_ENTITY_CODE, W_BRN_CODE,0,W_BATCH_NUM);
          IF TRIM(W_ERR_MSG) IS NOT NULL THEN
            PKG_EODSOD_FLAGS.PV_ERROR_MSG := W_ERR_MSG;
          END IF;

          DBMS_OUTPUT.PUT_LINE(PKG_EODSOD_FLAGS.PV_ERROR_MSG);
          IF TRIM(PKG_EODSOD_FLAGS.PV_ERROR_MSG) IS NULL THEN
            PKG_PROCESS_CHECK.INSERT_ROW_INTO_EODSODPROCBRN(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                                            W_BRN_CODE);
          END IF;

          PKG_PROCESS_CHECK.CHECK_COMMIT_ROLLBACK_STATUS(PKG_ENTITY.FN_GET_ENTITY_CODE);
          DESTROY_BRN_WISE_ARRAYS;

        END IF;
      END LOOP;
      DESTROY_ARRAYS;
      PKG_PROCESS_CHECK.DESTROY_BRN_WISE(PKG_ENTITY.FN_GET_ENTITY_CODE);
    EXCEPTION
      WHEN PKG_PROCESS_CHECK.LAP_SLEEP_EXCEPTION THEN
        RAISE PKG_PROCESS_CHECK.LAP_SLEEP_EXCEPTION;
      WHEN PKG_PROCESS_CHECK.LAP_EXIT_EXCEPTION THEN
        RAISE PKG_PROCESS_CHECK.LAP_EXIT_EXCEPTION;
      WHEN OTHERS THEN
        PKG_PROCESS_CHECK.DESTROY_BRN_WISE(PKG_ENTITY.FN_GET_ENTITY_CODE);
        DESTROY_ARRAYS;
        IF TRIM(W_ERR_MSG) IS NULL THEN
          W_ERR_MSG := SUBSTR(SQLERRM, 1, 900);
        END IF;
        PKG_EODSOD_FLAGS.PV_ERROR_MSG := W_ERR_MSG;
        PKG_PB_GLOBAL.DETAIL_ERRLOG(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                    'E',
                                    W_ERR_MSG,
                                    ' ',
                                    0);
    END PROCESSBRNWISE;
  END PROC_BRN_WISE;
  --29-07-2008-added

  --Prasanth NS-CHN-07-10-2008-Beg
  PROCEDURE LAP(V_ENTITY_NUM     IN NUMBER,
                V_BRN_CODE       IN NUMBER DEFAULT 0,
                V_PROCESS_STATUS OUT NUMBER) IS
    W_PROCESS_STS NUMBER;
  BEGIN
    --ENTITY CODE COMMONLY ADDED - 06-11-2009  - BEG
    PKG_ENTITY.SP_SET_ENTITY_CODE(V_ENTITY_NUM);
    --ENTITY CODE COMMONLY ADDED - 06-11-2009  - END
    W_FIN_START_MONTH := PKG_PB_GLOBAL.FN_GET_FIN_YEAR_MONTH(PKG_ENTITY.FN_GET_ENTITY_CODE);
    <<START_PROC>>
    BEGIN
      W_PROCESS_STS := 0;
      W_LAP_PROCESS := TRUE;
      W_IS_MIG_MONTH := '';
      PKG_LOAN_INT_CALC_PROCESS.PROC_BRN_WISE(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                              V_BRN_CODE);
      --Prasanth NS-CHN-10-10-2008-beg
      PKG_SYSPROCLIST.SYSPROCLIST_ENDTIME(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                          'L',
                                          PKG_EODSOD_FLAGS.PV_PROCESS_NAME,
                                          W_ERR_MSG);
      IF TRIM(W_ERR_MSG) IS NOT NULL THEN
        RAISE E_USEREXCEP;
      END IF;
      W_PROCESS_STS := 3;
      --Prasanth NS-CHN-10-10-2008-end
    EXCEPTION
      WHEN PKG_PROCESS_CHECK.LAP_SLEEP_EXCEPTION THEN
        W_PROCESS_STS := 0;
      WHEN PKG_PROCESS_CHECK.LAP_EXIT_EXCEPTION THEN
        W_PROCESS_STS := 2;
      WHEN OTHERS THEN
        PKG_PROCESS_CHECK.DESTROY_BRN_WISE(PKG_ENTITY.FN_GET_ENTITY_CODE);
        DESTROY_ARRAYS;
        IF TRIM(W_ERR_MSG) IS NULL THEN
          W_ERR_MSG := SUBSTR('Error in PROC_BRN_WISE_LAP ' || SQLERRM,
                              1,
                              900);
        END IF;
        PKG_EODSOD_FLAGS.PV_ERROR_MSG := W_ERR_MSG;
        PKG_PB_GLOBAL.DETAIL_ERRLOG(PKG_ENTITY.FN_GET_ENTITY_CODE,
                                    'E',
                                    W_ERR_MSG,
                                    ' ',
                                    0);
    END START_PROC;
    V_PROCESS_STATUS := W_PROCESS_STS;
  END LAP;
  --Prasanth NS-CHN-07-10-2008-End

--Prasanth NS-CHN-22-03-2010-Removed
/*BEGIN
    W_FIN_START_MONTH := PKG_PB_GLOBAL.FN_GET_FIN_YEAR_MONTH(PKG_ENTITY.FN_GET_ENTITY_CODE);*/
END PKG_LOAN_CLS_ACCR_PROCESS;
/
