CREATE OR REPLACE PACKAGE PKG_LNIARNDOFFPOST IS

    PROCEDURE SP_LNIARNDOFFPOST(V_ENTITY_NUM IN NUMBER,P_BRN_CODE       IN NUMBER DEFAULT 0,
                                P_PRODUCT_CODE   IN NUMBER DEFAULT 0,
                                P_INTERNAL_ACNUM IN NUMBER DEFAULT 0);

    PROCEDURE START_BRNWISE(V_ENTITY_NUM IN NUMBER,P_BRN_CODE IN NUMBER DEFAULT 0);
    PROCEDURE TRUNCATE_LOANIADLY;

  END PKG_LNIARNDOFFPOST;
/
CREATE OR REPLACE PACKAGE BODY PKG_LNIARNDOFFPOST
IS
   V_BRN_CODE                NUMBER (6);
   V_PROD_CODE               NUMBER (4);
   V_INPUT_INTERNAL_ACNUM    NUMBER (14);
   V_PROC_ACNUM              NUMBER (14);
   V_PROC_PROD_CODE          NUMBER (4);
   V_PREV_PROD_CODE          NUMBER (4);
   V_PREV_BRN_CODE           NUMBER (6);
   V_INT_FOUND               NUMBER (2);
   W_BATCH_NUM               NUMBER (7);
   V_TEMP_SER                NUMBER (6) DEFAULT 0;
   W_POST_ARRAY_INDEX        NUMBER (6) DEFAULT 0;

   V_ACT_INT_AMT             NUMBER (18, 3);
   V_RNDOFF_DIFF             NUMBER (18, 3);
   V_TOT_INT_AMT             NUMBER (18, 3);
   V_TOT_OD_INT_AMT          NUMBER (18, 3);
   V_TOT_INT_AMT_RND         NUMBER (18, 3);
   V_TOT_OD_INT_AMT_RND      NUMBER (18, 3);
   V_NPA_INT_AMT_POSTED      NUMBER (18, 3);
   V_SUM_TOT_INT_AMT         NUMBER (18, 3);
   V_SUM_TOT_INT_AMT_RND     NUMBER (18, 3);
   V_AMT                     NUMBER (18, 3);
   W_ACT_INT_AMT             NUMBER (18, 3);
   V_AMT_RND                 NUMBER (18, 3);
   V_TOT_ACCRD_RNDOFF_DIFF   NUMBER (18, 3);
   V_TOT_RNDOFF_DIFF_AMT     NUMBER (18, 3);

   V_INT_FROM_DATE           DATE;
   V_INT_UPTO_DATE           DATE;
   V_STORE_PROC_DATE         DATE;
   V_CBD                     DATE;
   V_PROC_DATE               DATE;
   V_LNPROCCTL_PROC_DATE     DATE;

   V_SQL                     VARCHAR2 (1300);
   V_INCOME_GLACC_CODE       VARCHAR2 (15);
   V_INT_ACCR_GLACC_CODE     VARCHAR2 (15);
   V_PREV_CURR_CODE          VARCHAR2 (3);
   V_ACNTS_SCHEME_CODE       VARCHAR2 (6);
   V_PROC_CURR_CODE          VARCHAR2 (3);
   V_USER_ID                 VARCHAR2 (8);
   V_ERR_MSG                 VARCHAR2 (800);
   W_ERROR_CODE              VARCHAR2 (10);
   W_ERROR                   VARCHAR2 (500);

   V_LNPRD_SCHEME_REQD       CHAR (1);

   E_USER_EXCEP              EXCEPTION;

   TYPE ACNT_RECORD IS RECORD
   (
      ACNTS_INTERNAL_ACNUM       NUMBER (14),
      ACNTS_PROD_CODE            NUMBER (4),
      ACNTS_CURR_CODE            VARCHAR2 (3),
      ACNTS_SCHEME_CODE          VARCHAR2 (6),
      LNPRD_SCHEME_REQD          CHAR (1),
      LNREPAYAPR_INT_PERD_FROM   DATE,
      LNREPAYAPR_INT_PERD_UPTO   DATE
   );

   TYPE ACNT_REC IS TABLE OF ACNT_RECORD
      INDEX BY PLS_INTEGER;

   ACNTS_COLL                ACNT_REC;

   PROCEDURE SP_UPDATE_LNPROCCTL;

   PROCEDURE SP_UPDATE_TEMP;

   PROCEDURE SP_PROC_TEMP;

   PROCEDURE SP_PROC_FOR_EOD;

   PROCEDURE SP_PROC_FOR_INT_APPL;

   PROCEDURE SP_POST_PARA;

   PROCEDURE SET_ROUNDOFF_DIFF_VOUCHER;

   PROCEDURE POST_CR_ACCR_RNDOFF;

   PROCEDURE POST_DB_INCOME_RNDOFF;

   PROCEDURE POST_CR_INCOME_RNDOFF;

   PROCEDURE POST_DB_ACCR_RNDOFF;

   PROCEDURE SET_TRAN_KEY_VALUES;

   PROCEDURE SET_TRANBAT_VALUES;

   PROCEDURE SP_GET_LOAN_ACNTNG_PARAM;

   PROCEDURE SP_POST_TRANSACTION;

   PROCEDURE TRUNCATE_LOANIADLY
   IS
   BEGIN
      DELETE FROM OBJECT_EVENT_ALLOWED
            WHERE OBJECT_NAME = 'LOANIADLY';

      INSERT INTO OBJECT_EVENT_ALLOWED (OBJECT_NAME,
                                        DROP_ALLOWED,
                                        TRUNCATE_ALLOWED,
                                        DELETE_ALLOWED)
           VALUES ('LOANIADLY',
                   'N',
                   'Y',
                   'Y');
      COMMIT;
      EXECUTE IMMEDIATE 'TRUNCATE TABLE LOANIADLY';

      DELETE FROM OBJECT_EVENT_ALLOWED
            WHERE OBJECT_NAME = 'LOANIADLY';
            
            
      DELETE FROM LOANIADTL
      WHERE     LOANIADTL_ENTITY_NUM = 1
            AND LOANIADTL_ACCRUAL_DATE = V_CBD
            AND LOANIADTL_UPTO_AMT = 0
            AND LOANIADTL_INT_AMT = 0
            AND LOANIADTL_INT_AMT_RND = 0
            AND LOANIADTL_INT_RATE = 0;



      DELETE FROM LOANIAMRRDTL
      WHERE     LOANIAMRRDTL_ENTITY_NUM = 1
            AND LOANIAMRRDTL_ACCRUAL_DATE = V_CBD
            AND LOANIAMRRDTL_UPTO_AMT = 0
            AND LOANIAMRRDTL_INT_AMT = 0
            AND LOANIAMRRDTL_INT_AMT_RND = 0
            AND LOANIAMRRDTL_INT_RATE = 0;

      COMMIT;
   END TRUNCATE_LOANIADLY;

   PROCEDURE START_BRNWISE (V_ENTITY_NUM   IN NUMBER,
                            P_BRN_CODE     IN NUMBER DEFAULT 0)
   IS
      L_BRN_CODE   NUMBER (6);
   BEGIN
      --ENTITY CODE COMMONLY ADDED - 06-11-2009  - BEG
      PKG_ENTITY.SP_SET_ENTITY_CODE (V_ENTITY_NUM);
      V_CBD := PKG_PB_GLOBAL.FN_GET_CURR_BUS_DATE (V_ENTITY_NUM);

      

      --ENTITY CODE COMMONLY ADDED - 06-11-2009  - END
      PKG_PROCESS_CHECK.INIT_PROC_BRN_WISE (PKG_ENTITY.FN_GET_ENTITY_CODE,
                                            P_BRN_CODE);

      FOR IDX IN 1 .. PKG_PROCESS_CHECK.V_ACNTBRN.COUNT
      LOOP
         L_BRN_CODE := PKG_PROCESS_CHECK.V_ACNTBRN (IDX).LN_BRN_CODE;

         IF PKG_PROCESS_CHECK.CHK_BRN_ALREADY_PROCESSED (
               PKG_ENTITY.FN_GET_ENTITY_CODE,
               L_BRN_CODE) = FALSE
         THEN
			IF LAST_DAY (V_CBD) = V_CBD AND L_BRN_CODE = 26 
				THEN
					TRUNCATE_LOANIADLY;
			END IF;
            SP_LNIARNDOFFPOST (PKG_ENTITY.FN_GET_ENTITY_CODE, L_BRN_CODE);

            IF TRIM (PKG_EODSOD_FLAGS.PV_ERROR_MSG) IS NULL
            THEN
               PKG_PROCESS_CHECK.INSERT_ROW_INTO_EODSODPROCBRN (
                  PKG_ENTITY.FN_GET_ENTITY_CODE,
                  L_BRN_CODE);
            END IF;

            PKG_PROCESS_CHECK.CHECK_COMMIT_ROLLBACK_STATUS (
               PKG_ENTITY.FN_GET_ENTITY_CODE);
         END IF;
      END LOOP;
   END START_BRNWISE;

   

   PROCEDURE INIT_PARA
   IS
   BEGIN
      V_PROC_DATE := NULL;
      V_STORE_PROC_DATE := NULL;

      V_BRN_CODE := 0;
      V_PROD_CODE := 0;
      V_INPUT_INTERNAL_ACNUM := 0;
      V_PROC_ACNUM := 0;
      V_PROC_PROD_CODE := 0;
      V_PREV_PROD_CODE := 0;
      V_PREV_BRN_CODE := 0;
      V_INT_FOUND := 0;
      W_BATCH_NUM := 0;
      V_TEMP_SER := 0;
      W_POST_ARRAY_INDEX := 0;

      V_ACT_INT_AMT := 0;
      V_RNDOFF_DIFF := 0;
      V_TOT_INT_AMT := 0;
      V_TOT_OD_INT_AMT := 0;
      V_TOT_INT_AMT_RND := 0;
      V_TOT_OD_INT_AMT_RND := 0;
      V_NPA_INT_AMT_POSTED := 0;
      V_SUM_TOT_INT_AMT := 0;
      V_SUM_TOT_INT_AMT_RND := 0;
      V_AMT := 0;
      W_ACT_INT_AMT := 0;
      V_AMT_RND := 0;
      V_TOT_ACCRD_RNDOFF_DIFF := 0;
      V_TOT_RNDOFF_DIFF_AMT := 0;

      V_INT_FROM_DATE := NULL;
      V_INT_UPTO_DATE := NULL;
      V_STORE_PROC_DATE := NULL;
      V_CBD := NULL;
      V_PROC_DATE := NULL;
      V_LNPROCCTL_PROC_DATE := NULL;

      V_SQL := NULL;
      V_INCOME_GLACC_CODE := NULL;
      V_INT_ACCR_GLACC_CODE := NULL;
      V_PREV_CURR_CODE := NULL;
      V_ACNTS_SCHEME_CODE := NULL;
      V_PROC_CURR_CODE := NULL;
      V_USER_ID := NULL;
      V_ERR_MSG := NULL;
      W_ERROR_CODE := NULL;
      W_ERROR := NULL;
      V_LNPRD_SCHEME_REQD := NULL;

      V_CBD := PKG_EODSOD_FLAGS.PV_CURRENT_DATE;
      V_USER_ID := PKG_EODSOD_FLAGS.PV_USER_ID;
   END INIT_PARA;

   PROCEDURE SP_GET_LOANIA
   IS
   BEGIN
      SELECT SUM (LOANIA_INT_AMT),
             SUM (LOANIA_OD_INT_AMT),
             SUM (LOANIA_INT_AMT_RND),
             SUM (LOANIA_OD_INT_AMT_RND),
             SUM (LOANIA_NPA_INT_POSTED_AMT)
        INTO V_TOT_INT_AMT,
             V_TOT_OD_INT_AMT,
             V_TOT_INT_AMT_RND,
             V_TOT_OD_INT_AMT_RND,
             V_NPA_INT_AMT_POSTED
        FROM LOANIA L
       WHERE     LOANIA_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
             AND LOANIA_BRN_CODE = V_BRN_CODE
             AND LOANIA_ACNT_NUM = V_PROC_ACNUM
             AND LOANIA_VALUE_DATE BETWEEN V_INT_FROM_DATE
                                       AND V_INT_UPTO_DATE
             AND L.LOANIA_ACCRUAL_DATE <= V_CBD
             AND LOANIA_NPA_STATUS <> '1';

      V_SUM_TOT_INT_AMT :=
         V_TOT_INT_AMT + V_TOT_OD_INT_AMT + V_NPA_INT_AMT_POSTED;
      V_SUM_TOT_INT_AMT_RND :=
         V_TOT_INT_AMT_RND + V_TOT_OD_INT_AMT_RND + V_NPA_INT_AMT_POSTED;

      V_AMT := ABS (V_SUM_TOT_INT_AMT);

      IF TRIM (V_LNPRD_SCHEME_REQD) <> '1'
      THEN
         V_ACNTS_SCHEME_CODE := ' ';
      END IF;

      V_AMT_RND :=
         FN_LN_INT_ROUNDOFF (PKG_ENTITY.FN_GET_ENTITY_CODE,
                             V_AMT,
                             V_PROC_PROD_CODE,
                             V_ACNTS_SCHEME_CODE,
                             V_PROC_CURR_CODE);
      V_ACT_INT_AMT := V_AMT_RND;

      IF V_SUM_TOT_INT_AMT < 0
      THEN
         W_ACT_INT_AMT := V_ACT_INT_AMT * -1;
      END IF;

      V_RNDOFF_DIFF := (ABS (V_SUM_TOT_INT_AMT_RND) - ABS (V_ACT_INT_AMT));
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG := 'ERROR IN SP_GET_LOANIA ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SP_GET_LOANIA;

   PROCEDURE SP_UPDATE_LNPROCCTL
   IS
   BEGIN
      UPDATE LNPROCCTL
         SET LNPROCCTL_PROC_DATE = V_CBD
       WHERE     LNPROCCTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
             AND LNPROCCTL_KEY = '4';

      IF SQL%NOTFOUND
      THEN
         INSERT INTO LNPROCCTL (LNPROCCTL_ENTITY_NUM,
                                LNPROCCTL_KEY,
                                LNPROCCTL_PROC_DATE,
                                LNPROCCTL_PROC_BY)
              VALUES (PKG_ENTITY.FN_GET_ENTITY_CODE,
                      '4',
                      V_CBD,
                      V_USER_ID);
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN SP_UPDATE_LNPROCCTL ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SP_UPDATE_LNPROCCTL;

   PROCEDURE SP_UPDATE_TEMP
   IS
   BEGIN
      SELECT GENAPPORSL.NEXTVAL INTO V_TEMP_SER FROM DUAL;

      INSERT INTO RTMPIARNDOFF (RTMPIARND_TMP_SER,
                                RTMPIARND_BRN_CODE,
                                RTMPIARND_PROD_CODE,
                                RTMPIARND_INTERNAL_ACNUM,
                                RTMPIARND_CURR_CODE,
                                RTMPIARND_ACCR_INT_AMT,
                                RTMPIARND_ACT_INT_AMT,
                                RTMPIARND_RNDOFF_DIFF_AMT,
                                RTMPIARND_INT_FROM_DATE,
                                RTMPIARND_INT_UPTO_DATE)
           VALUES (V_TEMP_SER,
                   V_BRN_CODE,
                   V_PROC_PROD_CODE,
                   V_PROC_ACNUM,
                   V_PROC_CURR_CODE,
                   V_SUM_TOT_INT_AMT_RND,
                   V_ACT_INT_AMT,
                   V_RNDOFF_DIFF,
                   V_INT_FROM_DATE,
                   V_INT_UPTO_DATE);
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN SP_UPDATE_TEMP ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SP_UPDATE_TEMP;

   PROCEDURE SP_PROC_TEMP
   IS
   BEGIN
      V_PREV_PROD_CODE := 0;
      V_PREV_BRN_CODE := 0;
      V_PREV_CURR_CODE := '';
      V_TOT_ACCRD_RNDOFF_DIFF := 0;
      V_TOT_RNDOFF_DIFF_AMT := 0;

      FOR IDX
         IN (SELECT *
               FROM RTMPIARNDOFF
              WHERE     RTMPIARND_TMP_SER = V_TEMP_SER
                    AND RTMPIARND_RNDOFF_DIFF_AMT <> 0)
      LOOP
         IF (   (    V_PREV_BRN_CODE <> IDX.RTMPIARND_BRN_CODE
                 AND V_PREV_BRN_CODE > 0)
             OR (    V_PREV_PROD_CODE <> IDX.RTMPIARND_PROD_CODE
                 AND V_PREV_PROD_CODE > 0)
             OR (    V_PREV_CURR_CODE <> IDX.RTMPIARND_CURR_CODE
                 AND V_PREV_CURR_CODE <> ''))
         THEN
            SP_POST_PARA;
            V_INT_FOUND := 1;
         END IF;

         IF IDX.RTMPIARND_RNDOFF_DIFF_AMT <> 0
         THEN
            V_TOT_RNDOFF_DIFF_AMT :=
               V_TOT_RNDOFF_DIFF_AMT + IDX.RTMPIARND_RNDOFF_DIFF_AMT;
            V_INT_FOUND := 1;
         END IF;

        <<UPDATE_LNIARNDOFFPOST>>
         BEGIN
            INSERT INTO LNIARNDOFFPOST (LNIARNDOFF_ENTITY_NUM,
                                        LNIARNDOFF_BRN_CODE,
                                        LNIARNDOFF_INTERNAL_ACNUM,
                                        LNIARNDOFF_PROC_DATE,
                                        LNIARNDOFF_INSTALLMENT_DATE,
                                        LNIARNDOFF_CURR_CODE,
                                        LNIARNDOFF_ACCR_INT_AMT,
                                        LNIARNDOFF_ACT_INT_AMT,
                                        LNIARNDOFF_RNDOFF_DIFF_AMT,
                                        LNIARNDOFF_INT_FROM_DATE,
                                        LNIARNDOFF_INT_UPTO_DATE,
                                        POST_TRAN_BRN,
                                        POST_TRAN_DATE,
                                        POST_TRAN_BATCH_NUM,
                                        LNIARNDOFF_PROC_BY,
                                        LNIARNDOFF_PROC_ON)
                 VALUES (PKG_ENTITY.FN_GET_ENTITY_CODE,
                         IDX.RTMPIARND_BRN_CODE,
                         IDX.RTMPIARND_INTERNAL_ACNUM,
                         V_CBD,
                         (V_PROC_DATE + 1),
                         IDX.RTMPIARND_CURR_CODE,
                         IDX.RTMPIARND_ACCR_INT_AMT,
                         IDX.RTMPIARND_ACT_INT_AMT,
                         IDX.RTMPIARND_RNDOFF_DIFF_AMT,
                         IDX.RTMPIARND_INT_FROM_DATE,
                         IDX.RTMPIARND_INT_UPTO_DATE,
                         0,
                         NULL,
                         0,
                         V_USER_ID,
                         V_CBD);
         END UPDATE_LNIARNDOFFPOST;

         V_PREV_PROD_CODE := IDX.RTMPIARND_PROD_CODE;
         V_PREV_CURR_CODE := IDX.RTMPIARND_CURR_CODE;
         V_PREV_BRN_CODE := IDX.RTMPIARND_BRN_CODE;
      END LOOP;

      IF V_PREV_PROD_CODE > 0 AND V_INT_FOUND = 1
      THEN
         SP_POST_PARA;
      END IF;

      DELETE FROM RTMPIARNDOFF R
            WHERE R.RTMPIARND_TMP_SER = V_TEMP_SER;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG := 'ERROR IN SP_PROC_TEMP ' || SUBSTR (SQLERRM, 1, 100);
         END IF;
   END SP_PROC_TEMP;

   PROCEDURE SP_CHECK_ACNTS
   IS
   BEGIN
      V_SQL :=
            ' SELECT A.ACNTS_INTERNAL_ACNUM,ACNTS_PROD_CODE,A.ACNTS_CURR_CODE, A.ACNTS_SCHEME_CODE,LNPRD_SCHEME_REQD,NULL,NULL'
         || ' FROM ACNTS A,LOANACNTS, LNPRODPM'
         || ' WHERE LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND  ACNTS_INTERNAL_ACNUM = LNACNT_INTERNAL_ACNUM AND ACNTS_CLOSURE_DATE IS NULL AND LNPRD_INT_APPL_FREQ = ''I'' AND ACNTS_PROD_CODE = LNPRD_PROD_CODE ';

      IF TRIM (V_BRN_CODE) IS NOT NULL AND V_BRN_CODE > 0
      THEN
         V_SQL := V_SQL || ' AND ACNTS_BRN_CODE=' || V_BRN_CODE;
      END IF;

      IF     TRIM (V_INPUT_INTERNAL_ACNUM) IS NOT NULL
         AND V_INPUT_INTERNAL_ACNUM > 0
      THEN
         V_SQL :=
            V_SQL || ' AND ACNTS_INTERNAL_ACNUM=' || V_INPUT_INTERNAL_ACNUM;
      END IF;

      IF TRIM (V_PROD_CODE) IS NOT NULL AND V_PROD_CODE > 0
      THEN
         V_SQL := V_SQL || ' AND ACNTS_PROD_CODE=' || V_PROD_CODE;
      END IF;

      V_SQL :=
            V_SQL
         || ' AND ACNTS_INTERNAL_ACNUM IN (SELECT LNREPAYAPR_LN_AC_NUM FROM LNREPAYAPPOR WHERE LNREPAYAPR_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND  LNREPAYAPR_LN_AC_NUM = A.ACNTS_INTERNAL_ACNUM '
         || ' AND LNREPAYAPR_SCH_REPAY_DATE = '
         || CHR (39)
         || (V_PROC_DATE + 1)
         || CHR (39)
         || ' AND ACNTS_INTERNAL_ACNUM NOT IN '
         || ' (SELECT LNIARNDOFF_INTERNAL_ACNUM FROM LNIARNDOFFPOST WHERE LNIARNDOFF_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND  LNIARNDOFF_BRN_CODE = A.ACNTS_BRN_CODE AND  LNIARNDOFF_INTERNAL_ACNUM =A.ACNTS_INTERNAL_ACNUM'
         || ' AND LNIARNDOFF_PROC_DATE ='
         || CHR (39)
         || V_CBD
         || CHR (39)
         || '))';

      /*FOR IDX IN (SELECT A.ACNTS_INTERNAL_ACNUM,
            ACNTS_PROD_CODE,
            A.ACNTS_CURR_CODE,
            A.ACNTS_SCHEME_CODE,
            LNPRD_SCHEME_REQD
       FROM ACNTS A, PRODUCTS, LOANACNTS, LNPRODPM
      WHERE ACNTS_INTERNAL_ACNUM = LNACNT_INTERNAL_ACNUM
        AND ACNTS_PROD_CODE = V_PROD_CODE
        AND ACNTS_CLOSURE_DATE IS NULL
        AND ACNTS_BRN_CODE = V_BRN_CODE
        AND ACNTS_PROD_CODE = LNPRD_PROD_CODE
        AND LNPRD_INT_APPL_FREQ = 'I'
        AND ACNTS_INTERNAL_ACNUM IN
            (SELECT LNREPAYAPR_LN_AC_NUM
               FROM LNREPAYAPPOR
              WHERE LNREPAYAPR_LN_AC_NUM = A.ACNTS_INTERNAL_ACNUM
                AND LNREPAYAPR_SCH_REPAY_DATE = (V_PROC_DATE + 1)
                AND ACNTS_INTERNAL_ACNUM NOT IN
                    (SELECT LNIARNDOFF_INTERNAL_ACNUM
                       FROM LNIARNDOFFPOST
                      WHERE LNIARNDOFF_BRN_CODE = A.ACNTS_BRN_CODE
                        AND LNIARNDOFF_INTERNAL_ACNUM =
                            A.ACNTS_INTERNAL_ACNUM
                        AND LNIARNDOFF_PROC_DATE = V_CBD))) LOOP*/

      EXECUTE IMMEDIATE V_SQL BULK COLLECT INTO ACNTS_COLL;

      FOR IDX IN 1 .. ACNTS_COLL.COUNT
      LOOP
         V_PROC_ACNUM := ACNTS_COLL (IDX).ACNTS_INTERNAL_ACNUM;
         V_PROC_PROD_CODE := ACNTS_COLL (IDX).ACNTS_PROD_CODE;
         V_PROC_CURR_CODE := ACNTS_COLL (IDX).ACNTS_CURR_CODE;
         V_ACNTS_SCHEME_CODE := ACNTS_COLL (IDX).ACNTS_SCHEME_CODE;
         V_LNPRD_SCHEME_REQD := ACNTS_COLL (IDX).LNPRD_SCHEME_REQD;
         V_SUM_TOT_INT_AMT_RND := 0;
         V_ACT_INT_AMT := 0;
         V_RNDOFF_DIFF := 0;

         SELECT LNREPAYAPR_INT_PERD_FROM, LNREPAYAPR_INT_PERD_UPTO
           INTO V_INT_FROM_DATE, V_INT_UPTO_DATE
           FROM LNREPAYAPPOR
          WHERE     LNREPAYAPR_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                AND LNREPAYAPR_LN_AC_NUM = V_PROC_ACNUM
                AND LNREPAYAPR_SCH_REPAY_DATE = V_PROC_DATE + 1;

         SP_GET_LOANIA;

         SP_UPDATE_TEMP;
      END LOOP;

      SP_PROC_TEMP;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN SP_CHECK_ACNTS ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SP_CHECK_ACNTS;

   PROCEDURE SP_PROC_FOR_EOD
   IS
   BEGIN
     <<BLOCK_1>>
      BEGIN
         SELECT LNPROCCTL_PROC_DATE
           INTO V_LNPROCCTL_PROC_DATE
           FROM LNPROCCTL
          WHERE     LNPROCCTL_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
                AND LNPROCCTL_KEY = '4';

         V_PROC_DATE := V_LNPROCCTL_PROC_DATE + 1;
         V_STORE_PROC_DATE := V_LNPROCCTL_PROC_DATE + 1;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            V_PROC_DATE := V_CBD;
            V_STORE_PROC_DATE := V_CBD;
      END BLOCK_1;

      WHILE (V_PROC_DATE <= V_CBD)
      LOOP
         SP_CHECK_ACNTS;

         V_PROC_DATE := V_PROC_DATE + 1;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN SP_PROC_FOR_EOD ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SP_PROC_FOR_EOD;

   PROCEDURE SP_GET_LOAN_ACNTNG_PARAM
   IS
   BEGIN
      SELECT LNPRDAC_INT_INCOME_GL, LNPRDAC_INT_ACCR_GL
        INTO V_INCOME_GLACC_CODE, V_INT_ACCR_GLACC_CODE
        FROM LNPRODACPM
       WHERE     LNPRDAC_PROD_CODE = V_PREV_PROD_CODE
             AND LNPRDAC_CURR_CODE = V_PREV_CURR_CODE;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
                  'ERROR IN SP_GET_LOAN_ACNTNG_PARAM '
               || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SP_GET_LOAN_ACNTNG_PARAM;

   PROCEDURE SET_ROUNDOFF_DIFF_VOUCHER
   IS
   BEGIN
      IF V_TOT_RNDOFF_DIFF_AMT > 0
      THEN
         POST_CR_ACCR_RNDOFF;
         POST_DB_INCOME_RNDOFF;
      ELSIF V_TOT_RNDOFF_DIFF_AMT < 0
      THEN
         POST_CR_INCOME_RNDOFF;
         POST_DB_ACCR_RNDOFF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
                  'ERROR IN SET_ROUNDOFF_DIFF_VOUCHER '
               || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SET_ROUNDOFF_DIFF_VOUCHER;

   PROCEDURE SP_POST_TRANSACTION
   IS
   BEGIN
      PKG_APOST_INTERFACE.SP_POST_SODEOD_BATCH (
         PKG_ENTITY.FN_GET_ENTITY_CODE,
         'A',
         W_POST_ARRAY_INDEX,
         0,
         W_ERROR_CODE,
         W_ERROR,
         W_BATCH_NUM);

      IF (W_ERROR_CODE <> '0000')
      THEN
         V_ERR_MSG := 'ERROR IN POST_TRANSACTION';
         RAISE E_USER_EXCEP;
      END IF;
   END SP_POST_TRANSACTION;

   PROCEDURE POST_CR_ACCR_RNDOFF
   IS
   BEGIN
      W_POST_ARRAY_INDEX := W_POST_ARRAY_INDEX + 1;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_DB_CR_FLG := 'C';
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_CURR_CODE :=
         V_PREV_CURR_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_ACING_BRN_CODE :=
         V_BRN_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_GLACC_CODE :=
         V_INT_ACCR_GLACC_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_AMOUNT :=
         ABS (V_TOT_RNDOFF_DIFF_AMT);
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN POST_CR_ACCR_RNDOFF ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END POST_CR_ACCR_RNDOFF;

   PROCEDURE POST_DB_INCOME_RNDOFF
   IS
   BEGIN
      W_POST_ARRAY_INDEX := W_POST_ARRAY_INDEX + 1;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_DB_CR_FLG := 'D';
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_CURR_CODE :=
         V_PREV_CURR_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_ACING_BRN_CODE :=
         V_BRN_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_GLACC_CODE :=
         V_INCOME_GLACC_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_AMOUNT :=
         ABS (V_TOT_RNDOFF_DIFF_AMT);
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN POST_DB_INCOME_RNDOFF ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END POST_DB_INCOME_RNDOFF;

   PROCEDURE POST_CR_INCOME_RNDOFF
   IS
   BEGIN
      W_POST_ARRAY_INDEX := W_POST_ARRAY_INDEX + 1;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_DB_CR_FLG := 'C';
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_CURR_CODE :=
         V_PREV_CURR_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_ACING_BRN_CODE :=
         V_BRN_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_GLACC_CODE :=
         V_INCOME_GLACC_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_AMOUNT :=
         ABS (V_TOT_RNDOFF_DIFF_AMT);
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN POST_CR_INCOME_RNDOFF ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END POST_CR_INCOME_RNDOFF;

   PROCEDURE POST_DB_ACCR_RNDOFF
   IS
   BEGIN
      W_POST_ARRAY_INDEX := W_POST_ARRAY_INDEX + 1;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_DB_CR_FLG := 'D';
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_CURR_CODE :=
         V_PREV_CURR_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_ACING_BRN_CODE :=
         V_BRN_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_GLACC_CODE :=
         V_INT_ACCR_GLACC_CODE;
      PKG_AUTOPOST.PV_TRAN_REC (W_POST_ARRAY_INDEX).TRAN_AMOUNT :=
         ABS (V_TOT_RNDOFF_DIFF_AMT);
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN POST_DB_ACCR_RNDOFF ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END POST_DB_ACCR_RNDOFF;

   PROCEDURE SET_TRAN_KEY_VALUES
   IS
   BEGIN
      PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BRN_CODE := V_BRN_CODE;
      PKG_AUTOPOST.PV_TRAN_KEY.TRAN_DATE_OF_TRAN :=
         PKG_PB_GLOBAL.FN_GET_CURR_BUS_DATE (PKG_ENTITY.FN_GET_ENTITY_CODE);
      PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BATCH_NUMBER := 0;
      PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BATCH_SL_NUM := 0;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN SET_TRAN_KEY_VALUES ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SET_TRAN_KEY_VALUES;

   PROCEDURE SET_TRANBAT_VALUES
   IS
   BEGIN
      PKG_AUTOPOST.PV_TRANBAT.TRANBAT_SOURCE_TABLE := 'LNIARNDOFFPOST';
      PKG_AUTOPOST.PV_TRANBAT.TRANBAT_SOURCE_KEY :=
         V_BRN_CODE || V_PREV_PROD_CODE || V_PREV_CURR_CODE;
      PKG_AUTOPOST.PV_TRANBAT.TRANBAT_NARR_DTL1 :=
         'INTEREST ACCRUAL ROUND-OFF ';
      PKG_AUTOPOST.PV_TRANBAT.TRANBAT_NARR_DTL1 :=
         'FOR INSTALLMENTS DUE ON ' || (V_PROC_DATE + 1);
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN SET_TRANBAT_VALUES ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SET_TRANBAT_VALUES;

   PROCEDURE SP_POST_PARA
   IS
   BEGIN
      SP_GET_LOAN_ACNTNG_PARAM;

      PKG_APOST_INTERFACE.SP_POSTING_BEGIN (PKG_ENTITY.FN_GET_ENTITY_CODE);
      SET_TRAN_KEY_VALUES;
      SET_TRANBAT_VALUES;
      SET_ROUNDOFF_DIFF_VOUCHER;
      SP_POST_TRANSACTION;
      PKG_APOST_INTERFACE.SP_POSTING_END (PKG_ENTITY.FN_GET_ENTITY_CODE);
      W_POST_ARRAY_INDEX := 0;

      UPDATE LNIARNDOFFPOST
         SET POST_TRAN_BRN = V_BRN_CODE,
             POST_TRAN_DATE =
                PKG_PB_GLOBAL.FN_GET_CURR_BUS_DATE (
                   PKG_ENTITY.FN_GET_ENTITY_CODE),
             POST_TRAN_BATCH_NUM = W_BATCH_NUM
       WHERE     LNIARNDOFF_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE
             AND POST_TRAN_DATE IS NULL
             AND LNIARNDOFF_BRN_CODE = V_PREV_BRN_CODE
             AND LNIARNDOFF_PROC_DATE = V_CBD;

      V_PREV_BRN_CODE := 0;
      V_PREV_PROD_CODE := 0;
      V_PREV_CURR_CODE := '';
      V_INT_FOUND := 0;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG := 'ERROR IN SP_POST_PARA ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SP_POST_PARA;

   PROCEDURE SP_PROC_FOR_INT_APPL
   IS
   BEGIN
      V_SQL :=
            'SELECT ACNTS_INTERNAL_ACNUM,ACNTS_PROD_CODE,ACNTS_CURR_CODE,ACNTS_SCHEME_CODE,LNPRD_SCHEME_REQD,LNREPAYAPR_INT_PERD_FROM,LNREPAYAPR_INT_PERD_UPTO'
         || ' FROM ACNTS A, LOANACNTS, LNPRODPM, LNREPAYAPPOR WHERE LNREPAYAPR_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND LNACNT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND ACNTS_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND  ACNTS_INTERNAL_ACNUM = LNACNT_INTERNAL_ACNUM'
         || ' AND ACNTS_CLOSURE_DATE IS NULL AND ACNTS_PROD_CODE = LNPRD_PROD_CODE AND LNPRD_INT_APPL_FREQ =''I'' AND ACNTS_INTERNAL_ACNUM = LNREPAYAPR_LN_AC_NUM '
         || ' AND LNREPAYAPR_SCH_SL =(SELECT LNREPAYAPR_SCH_SL FROM LNREPAYAPPOR WHERE LNREPAYAPR_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND  LNREPAYAPR_LN_AC_NUM = A.ACNTS_INTERNAL_ACNUM '
         || ' AND LNREPAYAPR_SCH_REPAY_DATE ='
         || CHR (39)
         || V_PROC_DATE
         || CHR (39)
         || ')';

      IF TRIM (V_BRN_CODE) IS NOT NULL AND V_BRN_CODE > 0
      THEN
         V_SQL := V_SQL || ' AND ACNTS_BRN_CODE=' || V_BRN_CODE;
      END IF;

      IF     TRIM (V_INPUT_INTERNAL_ACNUM) IS NOT NULL
         AND V_INPUT_INTERNAL_ACNUM > 0
      THEN
         V_SQL :=
            V_SQL || ' AND ACNTS_INTERNAL_ACNUM=' || V_INPUT_INTERNAL_ACNUM;
      END IF;

      IF TRIM (V_PROD_CODE) IS NOT NULL AND V_PROD_CODE > 0
      THEN
         V_SQL := V_SQL || ' AND ACNTS_PROD_CODE=' || V_PROD_CODE;
      END IF;

      EXECUTE IMMEDIATE V_SQL BULK COLLECT INTO ACNTS_COLL;

      /*SELECT ACNTS_INTERNAL_ACNUM,
            ACNTS_PROD_CODE,
            ACNTS_CURR_CODE,
            ACNTS_SCHEME_CODE,
            LNREPAYAPR_INT_PERD_FROM,
            LNREPAYAPR_INT_PERD_UPTO
       INTO V_PROC_ACNUM,
            V_PROC_PROD_CODE,
            V_PROC_CURR_CODE,
            V_ACNTS_SCHEME_CODE,
            V_INT_FROM_DATE,
            V_INT_UPTO_DATE
       FROM ACNTS A, PRODUCTS, LOANACNTS, LNPRODPM, LNREPAYAPPOR
      WHERE ACNTS_INTERNAL_ACNUM = V_INPUT_INTERNAL_ACNUM
        AND ACNTS_INTERNAL_ACNUM = LNACNT_INTERNAL_ACNUM
        AND ACNTS_CLOSURE_DATE IS NULL
        AND ACNTS_PROD_CODE = LNPRD_PROD_CODE
        AND PRODUCT_CODE = ACNTS_PROD_CODE
        AND LNPRD_INT_APPL_FREQ = 'I'
        AND ACNTS_INTERNAL_ACNUM = LNREPAYAPR_LN_AC_NUM
        AND LNREPAYAPR_SCH_SL =
            (SELECT LNREPAYAPR_SCH_SL
               FROM LNREPAYAPPOR
              WHERE LNREPAYAPR_LN_AC_NUM = A.ACNTS_INTERNAL_ACNUM
                AND LNREPAYAPR_SCH_REPAY_DATE = V_PROC_DATE);*/

      FOR IDX IN 1 .. ACNTS_COLL.COUNT
      LOOP
         V_PROC_ACNUM := ACNTS_COLL (IDX).ACNTS_INTERNAL_ACNUM;
         V_PROC_PROD_CODE := ACNTS_COLL (IDX).ACNTS_PROD_CODE;
         V_PROC_CURR_CODE := ACNTS_COLL (IDX).ACNTS_CURR_CODE;
         V_ACNTS_SCHEME_CODE := ACNTS_COLL (IDX).ACNTS_SCHEME_CODE;
         V_LNPRD_SCHEME_REQD := ACNTS_COLL (IDX).LNPRD_SCHEME_REQD;
         V_INT_FROM_DATE := ACNTS_COLL (IDX).LNREPAYAPR_INT_PERD_FROM;
         V_INT_UPTO_DATE := ACNTS_COLL (IDX).LNREPAYAPR_INT_PERD_UPTO;

         V_SUM_TOT_INT_AMT_RND := 0;
         V_ACT_INT_AMT := 0;
         V_RNDOFF_DIFF := 0;

         SP_GET_LOANIA;
         SP_UPDATE_TEMP;
         SP_PROC_TEMP;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               'ERROR IN SP_PROC_FOR_INT_APPL ' || SUBSTR (SQLERRM, 1, 100);
         END IF;

         RAISE E_USER_EXCEP;
   END SP_PROC_FOR_INT_APPL;

   PROCEDURE SP_LNIARNDOFFPOST (V_ENTITY_NUM       IN NUMBER,
                                P_BRN_CODE         IN NUMBER DEFAULT 0,
                                P_PRODUCT_CODE     IN NUMBER DEFAULT 0,
                                P_INTERNAL_ACNUM   IN NUMBER DEFAULT 0)
   IS
   BEGIN
      --ENTITY CODE COMMONLY ADDED - 06-11-2009  - BEG
      PKG_ENTITY.SP_SET_ENTITY_CODE (V_ENTITY_NUM);

     --ENTITY CODE COMMONLY ADDED - 06-11-2009  - END

     <<BLOCK_1>>
      BEGIN
         INIT_PARA;

         V_BRN_CODE := P_BRN_CODE;
         V_PROD_CODE := P_PRODUCT_CODE;
         V_INPUT_INTERNAL_ACNUM := P_INTERNAL_ACNUM;

         IF V_INPUT_INTERNAL_ACNUM > 0
         THEN
            --        V_PROC_DATE := V_CBD;
            V_PROC_DATE := V_CBD;
            SP_PROC_FOR_INT_APPL;
         ELSE
            V_PROC_DATE := V_CBD;
            SP_PROC_FOR_EOD;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            IF TRIM (V_ERR_MSG) IS NULL
            THEN
               V_ERR_MSG :=
                  'ERROR IN SP_LNIARNDOFFPOST ' || SUBSTR (SQLERRM, 1, 100);
            END IF;
      END BLOCK_1;

      IF ACNTS_COLL.COUNT > 0
      THEN
         ACNTS_COLL.DELETE;
      END IF;

      IF TRIM (V_ERR_MSG) IS NULL
      THEN
         IF V_INPUT_INTERNAL_ACNUM = 0
         THEN
            SP_UPDATE_LNPROCCTL;
         END IF;
      END IF;

      PKG_EODSOD_FLAGS.PV_ERROR_MSG := V_ERR_MSG;
   END SP_LNIARNDOFFPOST;
END PKG_LNIARNDOFFPOST;
/