CREATE OR REPLACE PACKAGE PKG_LOANDAILYACCRPOST IS
  PROCEDURE SP_LOANACCRPOST(V_ENTITY_NUM IN NUMBER, P_BRN_CODE NUMBER );

  TYPE AMOUNT_FORMAT IS RECORD
  (
   ROUND_DIGIT NUMBER(2)
  );

  TYPE TT_AMOUNT_FORMAT IS TABLE OF AMOUNT_FORMAT INDEX BY VARCHAR2(100);

  T_AMOUNT_FORMAT TT_AMOUNT_FORMAT;

  FUNCTION FN_GET_AMOUNT_FORMAT(
                                P_ENTITY_NUMBER IN NUMBER,
                                P_CURR_CODE VARCHAR2,
                                P_AMOUNT NUMBER
                                )

  RETURN NUMBER;

END PKG_LOANDAILYACCRPOST;
/
CREATE OR REPLACE PACKAGE BODY PKG_LOANDAILYACCRPOST IS
V_GLOB_ENTITY_NUM NUMBER;
  /*
   Modification History
    -----------------------------------------------------------------------------------------
   Sl.            Description                              Mod By             Mod on
   -----------------------------------------------------------------------------------------
    1   Changes for Nepal Social Development Bank
    Need to chek LNPRD_UNREAL_INT_INCOME_REQD INSTEAD OF
         LNPRD_INT_APPL_FREQ = 'I'                        K Neelakantan        08-NOV-2010   -- NEELS-MDS-08-NOV-2010
  2   Changes for Nepal Social Development Bank
        Unrealized Int Accounted in Income is changed to
        Unrealized Int Accounted in Suspense
        Label Changes done in ILNPRODPM
        Default 0 Changed from Default 1                 K Neelakantan        30-NOV-2010   -- NEELS-MDS-30-NOV-2010
  3     Changes for Sonali Bank
        Updation of LNSUSPLED and LNSUSPBAL for NPA Accounts in Loan Accrual itself instead of Loan interest application
        Posting for NPA Accounts into Interest Suspense GL   Avinash K            17-AUG-2012   -- Avinash-SONALI-17AUG2012
  -----------------------------------------------------------------------------------------
   */
  TYPE RC IS REF CURSOR;
  E_USEREXCEP EXCEPTION;

  W_ERR_MSG    VARCHAR2(1300);
  W_ERROR      VARCHAR2(1000);
  W_ERROR_CODE VARCHAR2(10);
  W_BATCH_NUM  NUMBER(7);

  TYPE TLOANIA_ACNT_NUM IS TABLE OF NUMBER(14) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_VALUE_DATE IS TABLE OF DATE INDEX BY PLS_INTEGER;
  TYPE TLOANIA_ACNT_CURR IS TABLE OF VARCHAR(3) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_ACNT_BAL IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;

  TYPE TLOANIA_PREV_ACCR_DATE IS TABLE OF DATE INDEX BY PLS_INTEGER;
  TYPE TLOANIA_INT_ON_AMT IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_OD_PORTION IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_TOTAL_NEW_INT_AMT IS TABLE OF NUMBER(18, 9) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_TOTAL_NEW_OD_INT_AMT IS TABLE OF NUMBER(18, 9) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_INT_RATE IS TABLE OF NUMBER(8, 5) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_SLAB_AMT IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_OD_INT_RATE IS TABLE OF NUMBER(8, 5) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_LIMIT IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_DP IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_INT_AMT IS TABLE OF NUMBER(18, 9) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_INT_AMT_RND IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_OD_INT_AMT IS TABLE OF NUMBER(18, 9) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_OD_INT_AMT_RND IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_NPA_INT_POSTED_AMT IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;

  --09-08-2010-beg
  TYPE TLOANIA_ARR_INT_AMT IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  --09-08-2010-end

  TYPE TLOANIA_NPA_STATUS IS TABLE OF CHAR(1) INDEX BY PLS_INTEGER;
  TYPE TLOANIA_NPA_AMOUNT IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;

  TYPE TLOANIADTL_ACNT_NUM IS TABLE OF NUMBER(14) INDEX BY PLS_INTEGER;
  TYPE TLOANIADTL_VALUE_DATE IS TABLE OF DATE INDEX BY PLS_INTEGER;
  TYPE TLOANIADTL_SL_NUM IS TABLE OF NUMBER(5) INDEX BY PLS_INTEGER;
  TYPE TLOANIADTL_INT_RATE IS TABLE OF NUMBER(8, 5) INDEX BY PLS_INTEGER;
  TYPE TLOANIADTL_UPTO_AMT IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;
  TYPE TLOANIADTL_INT_AMT IS TABLE OF NUMBER(18, 9) INDEX BY PLS_INTEGER;
  TYPE TLOANIADTL_INT_AMT_RND IS TABLE OF NUMBER(18, 3) INDEX BY PLS_INTEGER;

  TYPE RTMPLNIA_RECORD IS RECORD(
    RTMPLNIA_RUN_NUMBER     NUMBER(6),
    RTMPLNIA_ACNT_NUM       NUMBER(14),
    RTMPLNIA_VALUE_DATE     DATE,
    RTMPLNIA_ACCRUAL_DATE   DATE,
    RTMPLNIA_ACNT_CURR      VARCHAR2(3),
    RTMPLNIA_ACNT_BAL       NUMBER(18, 3),
    RTMPLNIA_INT_ON_AMT     NUMBER(18, 3),
    RTMPLNIA_OD_PORTION     NUMBER(18, 3),
    RTMPLNIA_INT_RATE       NUMBER(8, 5),
    RTMPLNIA_SLAB_AMT       NUMBER(18, 3),
    RTMPLNIA_OD_INT_RATE    NUMBER(8, 5),
    RTMPLNIA_LIMIT          NUMBER(18, 3),
    RTMPLNIA_DP             NUMBER(18, 3),
    RTMPLNIA_INT_AMT        NUMBER(18, 9),
    RTMPLNIA_INT_AMT_RND    NUMBER(18, 3),
    RTMPLNIA_OD_INT_AMT     NUMBER(18, 9),
    RTMPLNIA_OD_INT_AMT_RND NUMBER(18, 3),
    RTMPLNIA_NPA_STATUS     NUMBER(1),
    RTMPLNIA_NPA_AMT        NUMBER(18, 3),
    RTMPLNIA_ARR_OD_INT_AMT NUMBER(18, 3));

  TYPE LOANCALCPOSTRECORD IS RECORD(
    M_LOAN_AC_TOT_INT_ACCR_AMT NUMBER(18, 3),
    M_LOAN_BC_TOT_INT_ACCR_AMT NUMBER(18, 3));
  TYPE TLOANCALCPOSTRECORD IS TABLE OF LOANCALCPOSTRECORD INDEX BY VARCHAR2(14);

  M_LOANCALCPOSTRECORD TLOANCALCPOSTRECORD;

  TYPE LOANCALCODPOSTRECORD IS RECORD(
    M_LOAN_AC_TOT_INT_ACCR_AMT NUMBER(18, 3),
    M_LOAN_BC_TOT_INT_ACCR_AMT NUMBER(18, 3));
  TYPE TLOANCALCODPOSTRECORD IS TABLE OF LOANCALCODPOSTRECORD INDEX BY VARCHAR2(14);

  M_LOANCALCODPOSTRECORD TLOANCALCODPOSTRECORD;
-- Avinash-SONALI-17AUG2012 Bgn
  TYPE LOANCALCNPAPOSTRECORD IS RECORD(
    M_LOAN_AC_TOT_INT_ACCR_AMT NUMBER(18, 3),
    M_LOAN_BC_TOT_INT_ACCR_AMT NUMBER(18, 3));
  TYPE TLOANCALCNPAPOSTRECORD IS TABLE OF LOANCALCNPAPOSTRECORD INDEX BY VARCHAR2(14);

  M_LOANCALCNPAPOSTRECORD TLOANCALCNPAPOSTRECORD;

  TYPE LOANCALCODNPAPOSTRECORD IS RECORD(
    M_LOAN_AC_TOT_INT_ACCR_AMT NUMBER(18, 3),
    M_LOAN_BC_TOT_INT_ACCR_AMT NUMBER(18, 3));
  TYPE TLOANCALCODNPAPOSTRECORD IS TABLE OF LOANCALCODNPAPOSTRECORD INDEX BY VARCHAR2(14);

  M_LOANCALCODNPAPOSTRECORD TLOANCALCODNPAPOSTRECORD;

  TYPE ACWISE_NPA_INT IS RECORD(
    M_NPA_ACNT_NUM             NUMBER(14),
    M_NPA_TOT_INT_AMT          NUMBER(18,3),
    M_CURR_CODE                VARCHAR2(3));
  TYPE T_ACWISE_NPA_INT IS TABLE OF ACWISE_NPA_INT INDEX BY PLS_INTEGER;

  M_ACWISE_NPA_INT T_ACWISE_NPA_INT;

  W_NPA_TOT_INT_AMT   NUMBER(18,3);
  W_NPA_ACNT_NUM      NUMBER(14);
  W_MAX_SL            NUMBER;
  NPAINDEX            NUMBER;
  W_NPA_ACT_INT_AMT   NUMBER(18,3);
  W_INTERNAL_ACNUM    NUMBER(14);
  DUMMY               NUMBER;
  W_CURR_CODE         VARCHAR2(3);
  W_USER_ID           VARCHAR2(8);
-- Avinash-SONALI-17AUG2012 End
  TYPE TRTMPLNIA_RECORD IS TABLE OF RTMPLNIA_RECORD INDEX BY PLS_INTEGER;
  M_RTMPLNIA_RECORD TRTMPLNIA_RECORD;

  TYPE LOAN_PROD_CURR_GL IS RECORD(
    LNPRDAC_INT_INCOME_GL    VARCHAR2(15),
    LNPRDAC_INT_ACCR_GL      VARCHAR2(15),
    LNPRDAC_PENAL_OD_INT_GL  VARCHAR2(15),
    LNPRDAC_LOAN_PAST_DUE_GL VARCHAR2(15),
    LNPRDAC_INT_SUSP_GL      VARCHAR2(15));

  TYPE TLOAN_PROD_CURR_GL IS TABLE OF LOAN_PROD_CURR_GL INDEX BY VARCHAR2(7);

  MLOAN_PROD_CURR_GL TLOAN_PROD_CURR_GL;

  TYPE TLNACNT_PA_ACCR_POSTED_UPTO IS TABLE OF DATE INDEX BY PLS_INTEGER;

  MLOANIA_ACNT_NUM            TLOANIA_ACNT_NUM;
  MLNACNT_PA_ACCR_POSTED_UPTO TLNACNT_PA_ACCR_POSTED_UPTO;
  MLOANIA_VALUE_DATE          TLOANIA_VALUE_DATE;
  MLOANIA_PREV_ACCR_DATE      TLOANIA_PREV_ACCR_DATE;
  MLOANIA_ACNT_CURR           TLOANIA_ACNT_CURR;
  MLOANIA_ACNT_BAL            TLOANIA_ACNT_BAL;
  MLOANIA_INT_ON_AMT          TLOANIA_INT_ON_AMT;
  MLOANIA_OD_PORTION          TLOANIA_OD_PORTION;
  MLOANIA_INT_RATE            TLOANIA_INT_RATE;
  MLOANIA_SLAB_AMT            TLOANIA_SLAB_AMT;
  MLOANIA_OD_INT_RATE         TLOANIA_OD_INT_RATE;
  MLOANIA_LIMIT               TLOANIA_LIMIT;
  MLOANIA_DP                  TLOANIA_DP;
  MLOANIA_INT_AMT             TLOANIA_INT_AMT;
  MLOANIA_INT_AMT_RND         TLOANIA_INT_AMT_RND;
  MLOANIA_OD_INT_AMT          TLOANIA_OD_INT_AMT;
  MLOANIA_OD_INT_AMT_RND      TLOANIA_OD_INT_AMT_RND;
  MLOANIA_NPA_INT_POSTED_AMT  TLOANIA_NPA_INT_POSTED_AMT;

  --09-08-2010-beg
  MLOANIA_ARR_INT_AMT TLOANIA_ARR_INT_AMT;
  --09-08-2010-end

  MLOANIA_TOTAL_NEW_INT_AMT    TLOANIA_TOTAL_NEW_INT_AMT;
  MLOANIA_TOTAL_NEW_OD_INT_AMT TLOANIA_TOTAL_NEW_OD_INT_AMT;
  MLOANIA_NPA_STATUS           TLOANIA_NPA_STATUS;
  MLOANIA_NPA_AMOUNT           TLOANIA_NPA_AMOUNT;

  MLOANIADTL_ACNT_NUM    TLOANIADTL_ACNT_NUM;
  MLOANIADTL_VALUE_DATE  TLOANIADTL_VALUE_DATE;
  MLOANIADTL_SL_NUM      TLOANIADTL_SL_NUM;
  MLOANIADTL_INT_RATE    TLOANIADTL_INT_RATE;
  MLOANIADTL_UPTO_AMT    TLOANIADTL_UPTO_AMT;
  MLOANIADTL_INT_AMT     TLOANIADTL_INT_AMT;
  MLOANIADTL_INT_AMT_RND TLOANIADTL_INT_AMT_RND;

  W_PROCESS_DATE                 DATE;
  W_RUN_NUMBER                   NUMBER(6);
  W_ARRAY_PROCESS_SL             NUMBER(10);
  W_INT_ACCR_UPTO_DATE           DATE;
  W_POST_ARRAY_INDEX             NUMBER(6);
  W_AC_BRN_CODE                  NUMBER(6);
  W_AC_PREV_BRN_CODE             NUMBER(6);
  W_AC_PROD_CODE                 NUMBER(4);
  W_AC_CURR_CODE                 VARCHAR2(3);
  W_LNACNT_PA_ACCR_POSTED_UPTO   DATE;
  W_LNACNT_INT_APPLIED_UPTO_DATE DATE;
  W_LNACNT_NPA_POSTED_DATE       DATE;
  W_PREV_ROW_AVL                 BOOLEAN;
  W_INDEX_KEY                    VARCHAR2(7);
  W_BRN_INDEX                    NUMBER(10);
  W_NEW_MLOANIA_INT_AMT          NUMBER(18, 9);
  W_NEW_MLOANIA_INT_AMT_RND      NUMBER(18, 3);
  W_NEW_MLOANIA_OD_INT_AMT       NUMBER(18, 9);
  W_NEW_MLOANIA_OD_INT_AMT_RND   NUMBER(18, 3);

  W_OLD_TOTAL_INT_AMOUNT    NUMBER(18, 9);
  W_OLD_TOTAL_INT_OD_AMOUNT NUMBER(18, 9);
  W_OLD_TOTAL_AMOUNT        NUMBER(18, 3);
  W_OLD_TOTAL_OD_AMOUNT     NUMBER(18, 3);
  W_PROD_CURR_KEY           VARCHAR2(7);

  V_LOANIA_PREV_ROW LOANIA%ROWTYPE;

  W_NPA_INT_POST_AMOUNT     NUMBER(18, 3);
  W_NPA_INT_POST_AMOUNT_RND NUMBER(18, 3);

  W_NPA_PREV_ACCOUNT_NUMBER NUMBER(18, 3);

 FUNCTION FN_GET_AMOUNT_FORMAT(
                                P_ENTITY_NUMBER IN NUMBER,
                                P_CURR_CODE VARCHAR2,
                                P_AMOUNT NUMBER
                                )

  RETURN NUMBER
  IS
  W_SUB_UNITS     NUMBER;
  W_BANK_CODE1 VARCHAR2(6);
  V_SERCH_KEY  VARCHAR2(100);
  V_SBUK_BRANCH BOOLEAN;
  V_ROUND_DIGIT NUMBER(2);
  BEGIN

    V_SERCH_KEY:=P_ENTITY_NUMBER||P_CURR_CODE;

    IF T_AMOUNT_FORMAT.EXISTS(V_SERCH_KEY)= TRUE THEN

     V_ROUND_DIGIT:=T_AMOUNT_FORMAT(V_SERCH_KEY).ROUND_DIGIT;

     IF V_SBUK_BRANCH = TRUE THEN

       RETURN TRUNC(TO_NUMBER(P_AMOUNT), 2);

     ELSE
       RETURN TRUNC(ROUND(P_AMOUNT,V_ROUND_DIGIT - 1), V_ROUND_DIGIT - 1);

     END IF;

    END IF;

      IF TRIM(P_CURR_CODE) <> 'INR' then
        <<READCURRENCY>>
        BEGIN
          SELECT CURR_NOOF_SUB_UNITS
            INTO W_SUB_UNITS
            FROM CURRENCY
           WHERE CURR_CODE = TRIM(P_CURR_CODE);
        EXCEPTION
          WHEN OTHERS THEN
            W_SUB_UNITS := 0;
        END READCURRENCY;
      ELSE
        W_SUB_UNITS := 100;
      END IF;

      BEGIN
          SELECT CBS_IMP_KEY_2  INTO W_BANK_CODE1 FROM CBS_IMP
          WHERE
          CBS_IMP_ENTITY_NUM = 1 AND
          CBS_IMP_BRN_CODE = 999999 AND
          CBS_IMP_MODULE_ID = 'TRAN' AND
          CBS_IMP_KEY_1 = 'BASECONVERSION' AND
          CBS_IMP_VALUE = 1 ;
        EXCEPTION WHEN NO_DATA_FOUND THEN
             W_BANK_CODE1 := NULL;
      END;

      IF W_BANK_CODE1 = 'SBUK' THEN

      V_SBUK_BRANCH:=TRUE;
        RETURN TRUNC(TO_NUMBER(P_AMOUNT), 2);
      ELSE

      --V_ROUND_DEGIT:=LENGTH(W_SUB_UNITS);

      T_AMOUNT_FORMAT(V_SERCH_KEY).ROUND_DIGIT:=LENGTH(W_SUB_UNITS);

        RETURN TRUNC(ROUND(P_AMOUNT,LENGTH(W_SUB_UNITS) - 1), LENGTH(W_SUB_UNITS) - 1);

      END IF;

  END FN_GET_AMOUNT_FORMAT;

  PROCEDURE CLEAR_LOANIAARRAY IS
  BEGIN
    MLNACNT_PA_ACCR_POSTED_UPTO.DELETE;
    MLOANIA_ACNT_NUM.DELETE;
    MLOANIA_VALUE_DATE.DELETE;
    MLOANIA_ACNT_CURR.DELETE;
    MLOANIA_ACNT_BAL.DELETE;
    MLOANIA_INT_ON_AMT.DELETE;
    MLOANIA_OD_PORTION.DELETE;
    MLOANIA_INT_RATE.DELETE;
    MLOANIA_SLAB_AMT.DELETE;
    MLOANIA_OD_INT_RATE.DELETE;
    MLOANIA_LIMIT.DELETE;
    MLOANIA_DP.DELETE;
    MLOANIA_INT_AMT.DELETE;
    MLOANIA_INT_AMT_RND.DELETE;
    MLOANIA_OD_INT_AMT.DELETE;
    MLOANIA_OD_INT_AMT_RND.DELETE;
    MLOANIA_OD_INT_AMT_RND.DELETE;
    MLOANIA_TOTAL_NEW_INT_AMT.DELETE;
    MLOANIA_TOTAL_NEW_OD_INT_AMT.DELETE;
    MLOANIA_NPA_STATUS.DELETE;
    MLOANIA_NPA_AMOUNT.DELETE;
    --09-08-2010-beg
    MLOANIA_ARR_INT_AMT.DELETE;
    --09-08-2010-end
    MLOANIA_PREV_ACCR_DATE.DELETE;
  END CLEAR_LOANIAARRAY;

  PROCEDURE CLEAR_LOANIADTLARRAY IS
  BEGIN
    MLOANIADTL_ACNT_NUM.DELETE;
    MLOANIADTL_VALUE_DATE.DELETE;
    MLOANIADTL_SL_NUM.DELETE;
    MLOANIADTL_INT_RATE.DELETE;
    MLOANIADTL_UPTO_AMT.DELETE;
    MLOANIADTL_INT_AMT.DELETE;
    MLOANIADTL_INT_AMT_RND.DELETE;
  END CLEAR_LOANIADTLARRAY;

  PROCEDURE CLEAR_AUTOPOST_ARRAY IS
  BEGIN
    M_LOANCALCODPOSTRECORD.DELETE;
    M_LOANCALCPOSTRECORD.DELETE;
    -- Avinash-SONALI-17AUG2012 Bgn
    M_LOANCALCNPAPOSTRECORD.DELETE;
    M_LOANCALCODNPAPOSTRECORD.DELETE;
    -- Avinash-SONALI-17AUG2012 End
  END CLEAR_AUTOPOST_ARRAY;

  PROCEDURE CLEAR_ALL_ARRAYS IS
  BEGIN
    CLEAR_LOANIAARRAY;
    CLEAR_LOANIADTLARRAY;
    MLOAN_PROD_CURR_GL.DELETE;
    M_RTMPLNIA_RECORD.DELETE;
    CLEAR_AUTOPOST_ARRAY;
  END CLEAR_ALL_ARRAYS;

  PROCEDURE POPULATE_LOANACCR_GL IS
    --16-08-2010-beg
    P_LNPRD_UNREAL_INT_INCOME_REQD CHAR(1);
    P_LNPRD_INT_APPL_FREQ          CHAR(1);
    --16-08-2010-end
    TYPE TEMP_LOAN_PROD_CURR_GL IS RECORD(
      LNPRDAC_PROD_CODE         NUMBER(4),
      LNPRDAC_PROD_CURR_KEY     VARCHAR2(7),
      LNPRDAC_INT_INCOME_GL     VARCHAR2(15),
      LNPRDAC_INT_ACCR_GL       VARCHAR2(15),
      LNPRDAC_PENAL_OD_INT_GL   VARCHAR2(15),
      LNPRDAC_LOAN_PAST_DUE_GL  VARCHAR2(15),
      LNPRDAC_INT_SUSP_GL       VARCHAR2(15),
      LNPRDAC_ACCRINT_SUSP_HEAD VARCHAR2(15));
    TYPE TLOAN_PROD_CURR_GL IS TABLE OF TEMP_LOAN_PROD_CURR_GL INDEX BY PLS_INTEGER;
    MTEMPLOAN_PROD_CURR_GL TLOAN_PROD_CURR_GL;
  BEGIN
    SELECT L.LNPRDAC_PROD_CODE,
           LPAD(L.LNPRDAC_PROD_CODE, 4, 0) || L.LNPRDAC_CURR_CODE,
           L.LNPRDAC_INT_INCOME_GL,
           L.LNPRDAC_INT_ACCR_GL,
           L.LNPRDAC_PENAL_OD_INT_GL,
           L.LNPRDAC_LOAN_PAST_DUE_GL,
           -- 16-08-2010-addd LNPRDAC_ACCRINT_SUSP_HEAD
           L.LNPRDAC_INT_SUSP_GL,
           L.LNPRDAC_ACCRINT_SUSP_HEAD BULK COLLECT
      INTO MTEMPLOAN_PROD_CURR_GL
      FROM LNPRODACPM L;

    IF MTEMPLOAN_PROD_CURR_GL.COUNT > 0 THEN
      FOR IDX IN 1 .. MTEMPLOAN_PROD_CURR_GL.COUNT LOOP
        --16-08-2010-beg
        <<READPRODPM>>
        BEGIN
          P_LNPRD_UNREAL_INT_INCOME_REQD := '0'; -- NEELS-MDS-30-NOV-2010 ADD
          P_LNPRD_INT_APPL_FREQ          := '0';
          -- NEELS-MDS-30-NOV-2010 NVL Changed to 0 from 1
          SELECT NVL(L.LNPRD_UNREAL_INT_INCOME_REQD, 0), -- NEELS-MDS-08-NOV-2010
                 NVL(L.LNPRD_INT_APPL_FREQ, 0)
            INTO P_LNPRD_UNREAL_INT_INCOME_REQD, P_LNPRD_INT_APPL_FREQ
            FROM LNPRODPM L
           WHERE L.LNPRD_PROD_CODE = MTEMPLOAN_PROD_CURR_GL(IDX)
                .LNPRDAC_PROD_CODE;

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            P_LNPRD_UNREAL_INT_INCOME_REQD := '0'; -- NEELS-MDS-30-NOV-2010 ADD
            P_LNPRD_INT_APPL_FREQ          := '';
        END READPRODPM;
        --16-08-2010-end

        /* IF P_LNPRD_UNREAL_INT_INCOME_REQD = '0' AND   -- NEELS-MDS-30-NOV-2010  COND COMMENTED
        P_LNPRD_INT_APPL_FREQ = 'I' THEN*/
        -- NEELS-MDS-30-NOV-2010 IF P_LNPRD_UNREAL_INT_INCOME_REQD = '0' THEN
        IF P_LNPRD_UNREAL_INT_INCOME_REQD = '1' THEN
          -- NEELS-MDS-30-NOV-2010
          MLOAN_PROD_CURR_GL(MTEMPLOAN_PROD_CURR_GL(IDX).LNPRDAC_PROD_CURR_KEY).LNPRDAC_INT_INCOME_GL := NVL(MTEMPLOAN_PROD_CURR_GL(IDX)
                                                                                                             .LNPRDAC_ACCRINT_SUSP_HEAD,
                                                                                                             '');
        ELSE
          MLOAN_PROD_CURR_GL(MTEMPLOAN_PROD_CURR_GL(IDX).LNPRDAC_PROD_CURR_KEY).LNPRDAC_INT_INCOME_GL := MTEMPLOAN_PROD_CURR_GL(IDX)
                                                                                                         .LNPRDAC_INT_INCOME_GL;
        END IF;

        MLOAN_PROD_CURR_GL(MTEMPLOAN_PROD_CURR_GL(IDX).LNPRDAC_PROD_CURR_KEY).LNPRDAC_INT_ACCR_GL := MTEMPLOAN_PROD_CURR_GL(IDX)
                                                                                                     .LNPRDAC_INT_ACCR_GL;

        MLOAN_PROD_CURR_GL(MTEMPLOAN_PROD_CURR_GL(IDX).LNPRDAC_PROD_CURR_KEY).LNPRDAC_PENAL_OD_INT_GL := MTEMPLOAN_PROD_CURR_GL(IDX)
                                                                                                         .LNPRDAC_PENAL_OD_INT_GL;

        MLOAN_PROD_CURR_GL(MTEMPLOAN_PROD_CURR_GL(IDX).LNPRDAC_PROD_CURR_KEY).LNPRDAC_LOAN_PAST_DUE_GL := MTEMPLOAN_PROD_CURR_GL(IDX)
                                                                                                          .LNPRDAC_LOAN_PAST_DUE_GL;

        MLOAN_PROD_CURR_GL(MTEMPLOAN_PROD_CURR_GL(IDX).LNPRDAC_PROD_CURR_KEY).LNPRDAC_INT_SUSP_GL := MTEMPLOAN_PROD_CURR_GL(IDX)
                                                                                                     .LNPRDAC_INT_SUSP_GL;
      END LOOP;
    END IF;
    MTEMPLOAN_PROD_CURR_GL.DELETE;
  END POPULATE_LOANACCR_GL;

  PROCEDURE GET_LOANIA_NPA_INT_AMOUNT IS
    W_APPL_ON_INT_RECOVERY VARCHAR2(1);
    W_I_BASED_LOAN         BOOLEAN;
  BEGIN
    --21-10-2009-beg
    W_APPL_ON_INT_RECOVERY := '';
    W_I_BASED_LOAN         := FALSE;
    <<READLNPRODPM>>
    BEGIN
      SELECT L.LNPRD_INT_APPL_FREQ
        INTO W_APPL_ON_INT_RECOVERY
        FROM LNPRODPM L
       WHERE L.LNPRD_PROD_CODE = W_AC_PROD_CODE;
    EXCEPTION
      WHEN OTHERS THEN
        W_APPL_ON_INT_RECOVERY := '';
    END READLNPRODPM;
    IF NVL(W_APPL_ON_INT_RECOVERY, '') = 'I' THEN
      W_I_BASED_LOAN            := TRUE;
      W_NEW_MLOANIA_INT_AMT     := 0;
      W_NEW_MLOANIA_INT_AMT_RND := 0;
    END IF;
    --21-10-2009-end

    IF W_I_BASED_LOAN = FALSE THEN
      W_NEW_MLOANIA_INT_AMT     := 0;
      W_NEW_MLOANIA_INT_AMT_RND := 0;
      SELECT NVL(SUM(L.LOANIA_INT_AMT), 0),
             NVL(SUM(L.LOANIA_INT_AMT_RND), 0)
        INTO W_NEW_MLOANIA_INT_AMT, W_NEW_MLOANIA_INT_AMT_RND
        FROM LOANIA L
       WHERE LOANIA_ENTITY_NUM = V_GLOB_ENTITY_NUM
         AND L.LOANIA_BRN_CODE = W_AC_BRN_CODE
         AND L.LOANIA_ACNT_NUM = M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL) .RTMPLNIA_ACNT_NUM
         AND L.LOANIA_VALUE_DATE > W_LNACNT_NPA_POSTED_DATE
         AND L.LOANIA_VALUE_DATE <= W_PROCESS_DATE
         AND L.LOANIA_NPA_STATUS = 1;
    END IF;

    -- Note: At Sonali's Business this portion is not necessary. The extra amount added here create more Accrual amount
       W_NEW_MLOANIA_INT_AMT     := 0;
       W_NEW_MLOANIA_INT_AMT_RND := 0;
  END GET_LOANIA_NPA_INT_AMOUNT;

  PROCEDURE PROCESS_FOR_ACTUAL_INTEREST IS

  BEGIN
    W_NEW_MLOANIA_INT_AMT        := 0;
    W_NEW_MLOANIA_INT_AMT_RND    := 0;
    W_NEW_MLOANIA_OD_INT_AMT     := 0;
    W_NEW_MLOANIA_OD_INT_AMT_RND := 0;

    W_OLD_TOTAL_INT_AMOUNT    := 0;
    W_OLD_TOTAL_INT_OD_AMOUNT := 0;

    W_OLD_TOTAL_AMOUNT    := 0;
    W_OLD_TOTAL_OD_AMOUNT := 0;

    MLOANIA_TOTAL_NEW_INT_AMT(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                              .RTMPLNIA_INT_AMT;
    MLOANIA_TOTAL_NEW_OD_INT_AMT(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                                 .RTMPLNIA_OD_INT_AMT;

    IF W_PREV_ROW_AVL = TRUE THEN
      W_OLD_TOTAL_INT_AMOUNT    := V_LOANIA_PREV_ROW.LOANIA_TOTAL_NEW_INT_AMT;
      W_OLD_TOTAL_INT_OD_AMOUNT := V_LOANIA_PREV_ROW.LOANIA_TOTAL_NEW_OD_INT_AMT;
      W_OLD_TOTAL_AMOUNT        := V_LOANIA_PREV_ROW.LOANIA_ACNT_BAL;
      W_OLD_TOTAL_OD_AMOUNT     := V_LOANIA_PREV_ROW.LOANIA_OD_PORTION;
    END IF;

    IF W_PREV_ROW_AVL = TRUE THEN
      MLOANIA_PREV_ACCR_DATE(W_BRN_INDEX) := V_LOANIA_PREV_ROW.LOANIA_ACCRUAL_DATE;
    ELSE
      MLOANIA_PREV_ACCR_DATE(W_BRN_INDEX) := NULL;
    END IF;

    MLOANIA_INT_AMT(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                    .RTMPLNIA_INT_AMT -
                                     W_OLD_TOTAL_INT_AMOUNT;

    MLOANIA_INT_AMT_RND(W_BRN_INDEX) := SIGN(MLOANIA_INT_AMT(W_BRN_INDEX)) *
                                        ABS(FN_GET_AMOUNT_FORMAT(V_GLOB_ENTITY_NUM,
                                                         W_AC_CURR_CODE,
                                                         MLOANIA_INT_AMT(W_BRN_INDEX)));

    --MLOANIA_INT_ON_AMT(W_BRN_INDEX) := MLOANIA_ACNT_BAL(W_BRN_INDEX) -
                                    --   W_OLD_TOTAL_AMOUNT;

    MLOANIA_OD_INT_AMT(W_BRN_INDEX) := MLOANIA_TOTAL_NEW_OD_INT_AMT(W_BRN_INDEX) -
                                       W_OLD_TOTAL_INT_OD_AMOUNT;

    MLOANIA_OD_INT_AMT_RND(W_BRN_INDEX) := SIGN(MLOANIA_OD_INT_AMT(W_BRN_INDEX)) *
                                           ABS(FN_GET_AMOUNT_FORMAT(V_GLOB_ENTITY_NUM,
                                                            W_AC_CURR_CODE,
                                                            MLOANIA_OD_INT_AMT(W_BRN_INDEX)));

    MLOANIA_NPA_STATUS(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                       .RTMPLNIA_NPA_STATUS;

    MLOANIA_NPA_AMOUNT(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                       .RTMPLNIA_NPA_AMT;

    --- INSERT_INTO_LOANIADTL;

    W_PROD_CURR_KEY := LPAD(W_AC_PROD_CODE, 4, 0) || W_AC_CURR_CODE;

    IF W_NPA_PREV_ACCOUNT_NUMBER <> M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
      .RTMPLNIA_ACNT_NUM THEN

      W_NPA_INT_POST_AMOUNT     := 0;
      W_NPA_INT_POST_AMOUNT_RND := 0;
    END IF;

    IF MLOANIA_NPA_STATUS(W_BRN_INDEX) = 1 THEN
    -- Note: At Sonali's Business this portion is not necessary. The extra amount added here create more Accrual amount
     W_NPA_INT_POST_AMOUNT := 0;
     W_NPA_INT_POST_AMOUNT_RND:= 0;
     /* W_NPA_INT_POST_AMOUNT := W_NPA_INT_POST_AMOUNT +
                               NVL(MLOANIA_INT_AMT(W_BRN_INDEX), 0) +
                               NVL(MLOANIA_OD_INT_AMT(W_BRN_INDEX), 0);
      --02-12-2008-beg
      W_NPA_INT_POST_AMOUNT_RND := FN_GET_AMOUNT_FORMAT(V_GLOB_ENTITY_NUM,
                                                W_AC_CURR_CODE,
                                                W_NPA_INT_POST_AMOUNT);
      --02-12-2008-end*/
    END IF;

    W_NPA_PREV_ACCOUNT_NUMBER := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                 .RTMPLNIA_ACNT_NUM;

    MLOANIA_NPA_INT_POSTED_AMT(W_BRN_INDEX) := 0;

    IF MLOANIA_NPA_STATUS(W_BRN_INDEX) = 0 THEN
      W_LNACNT_NPA_POSTED_DATE := NULL;
      IF W_LNACNT_PA_ACCR_POSTED_UPTO IS NOT NULL THEN
        IF W_LNACNT_INT_APPLIED_UPTO_DATE IS NOT NULL THEN
          IF W_LNACNT_PA_ACCR_POSTED_UPTO > W_LNACNT_INT_APPLIED_UPTO_DATE THEN
            W_LNACNT_NPA_POSTED_DATE := W_LNACNT_PA_ACCR_POSTED_UPTO;
          ELSE
            W_LNACNT_NPA_POSTED_DATE := W_LNACNT_INT_APPLIED_UPTO_DATE;
          END IF;
        ELSE
          W_LNACNT_NPA_POSTED_DATE := W_LNACNT_PA_ACCR_POSTED_UPTO;
        END IF;
      ELSE
        W_LNACNT_NPA_POSTED_DATE := W_LNACNT_INT_APPLIED_UPTO_DATE;
      END IF;
    END IF;

    W_NEW_MLOANIA_INT_AMT := 0;

    MLNACNT_PA_ACCR_POSTED_UPTO(W_BRN_INDEX) := W_LNACNT_PA_ACCR_POSTED_UPTO;

    IF MLOANIA_NPA_STATUS(W_BRN_INDEX) = 0 THEN
      MLNACNT_PA_ACCR_POSTED_UPTO(W_BRN_INDEX) := W_PROCESS_DATE;
      IF M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
       --14-11-2008-rem                .RTMPLNIA_VALUE_DATE = PKG_PB_GLOBAL.FN_GET_CURR_BUS_DATE THEN
       .RTMPLNIA_VALUE_DATE = W_PROCESS_DATE THEN
        IF W_LNACNT_NPA_POSTED_DATE IS NOT NULL AND
           (W_LNACNT_NPA_POSTED_DATE <> W_INT_ACCR_UPTO_DATE) THEN
          GET_LOANIA_NPA_INT_AMOUNT;
        END IF;

        MLOANIA_INT_AMT(W_BRN_INDEX) := MLOANIA_INT_AMT(W_BRN_INDEX) +
                                        W_NEW_MLOANIA_INT_AMT +
                                        W_NPA_INT_POST_AMOUNT;

        MLOANIA_INT_AMT_RND(W_BRN_INDEX) := MLOANIA_INT_AMT_RND(W_BRN_INDEX) +
                                            W_NEW_MLOANIA_INT_AMT_RND +
                                            W_NPA_INT_POST_AMOUNT_RND;

        MLOANIA_NPA_INT_POSTED_AMT(W_BRN_INDEX) := W_NEW_MLOANIA_INT_AMT_RND +
                                                   W_NPA_INT_POST_AMOUNT_RND;

      END IF;
    END IF;

    IF MLOANIA_INT_AMT(W_BRN_INDEX) <> 0 THEN
      IF MLOANIA_NPA_STATUS(W_BRN_INDEX) = 0 THEN
        IF M_LOANCALCPOSTRECORD.EXISTS(W_PROD_CURR_KEY) = TRUE THEN
          M_LOANCALCPOSTRECORD(W_PROD_CURR_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT := M_LOANCALCPOSTRECORD(W_PROD_CURR_KEY)
                                                                              .M_LOAN_AC_TOT_INT_ACCR_AMT +
                                                                               MLOANIA_INT_AMT_RND(W_BRN_INDEX);
        ELSE
          M_LOANCALCPOSTRECORD(W_PROD_CURR_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT := MLOANIA_INT_AMT_RND(W_BRN_INDEX);

        END IF;
      END IF;
    END IF;

    IF MLOANIA_OD_INT_AMT(W_BRN_INDEX) <> 0 THEN
      IF MLOANIA_NPA_STATUS(W_BRN_INDEX) = 0 THEN
        IF M_LOANCALCODPOSTRECORD.EXISTS(W_PROD_CURR_KEY) = TRUE THEN
          M_LOANCALCODPOSTRECORD(W_PROD_CURR_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT := M_LOANCALCODPOSTRECORD(W_PROD_CURR_KEY)
                                                                                .M_LOAN_AC_TOT_INT_ACCR_AMT +
                                                                                 MLOANIA_OD_INT_AMT_RND(W_BRN_INDEX);
        ELSE
          M_LOANCALCODPOSTRECORD(W_PROD_CURR_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT := MLOANIA_OD_INT_AMT_RND(W_BRN_INDEX);

        END IF;
      END IF;
    END IF;

    -- Avinash-SONALI-17AUG2012 Bgn
    IF MLOANIA_INT_AMT(W_BRN_INDEX) <> 0 THEN
      IF MLOANIA_NPA_STATUS(W_BRN_INDEX) = 1 THEN
        IF M_LOANCALCNPAPOSTRECORD.EXISTS(W_PROD_CURR_KEY) = TRUE THEN
          M_LOANCALCNPAPOSTRECORD(W_PROD_CURR_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT := M_LOANCALCNPAPOSTRECORD(W_PROD_CURR_KEY)
                                                                              .M_LOAN_AC_TOT_INT_ACCR_AMT +
                                                                               NVL(MLOANIA_INT_AMT_RND(W_BRN_INDEX),0);
        ELSE
          M_LOANCALCNPAPOSTRECORD(W_PROD_CURR_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT := NVL(MLOANIA_INT_AMT_RND(W_BRN_INDEX),0);

        END IF;
      END IF;
    END IF;

    IF MLOANIA_OD_INT_AMT(W_BRN_INDEX) <> 0 THEN
      IF MLOANIA_NPA_STATUS(W_BRN_INDEX) = 1 THEN
        IF M_LOANCALCODNPAPOSTRECORD.EXISTS(W_PROD_CURR_KEY) = TRUE THEN
          M_LOANCALCODNPAPOSTRECORD(W_PROD_CURR_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT := M_LOANCALCODNPAPOSTRECORD(W_PROD_CURR_KEY)
                                                                                .M_LOAN_AC_TOT_INT_ACCR_AMT +
                                                                                 NVL(MLOANIA_OD_INT_AMT_RND(W_BRN_INDEX),0);
        ELSE
          M_LOANCALCODNPAPOSTRECORD(W_PROD_CURR_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT := NVL(MLOANIA_OD_INT_AMT_RND(W_BRN_INDEX),0);

        END IF;
      END IF;
    END IF;
    -- Avinash-SONALI-17AUG2012 End

  END PROCESS_FOR_ACTUAL_INTEREST;

  PROCEDURE PROCESS_FOR_INT_CALC IS
  BEGIN
    W_BRN_INDEX := W_BRN_INDEX + 1;
    MLOANIA_ACNT_NUM(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                     .RTMPLNIA_ACNT_NUM;
    MLOANIA_VALUE_DATE(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                       .RTMPLNIA_VALUE_DATE;
    --09-08-2010-beg
    MLOANIA_ARR_INT_AMT(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                        .RTMPLNIA_ARR_OD_INT_AMT;
    --09-08-2010-end

    MLOANIA_ACNT_CURR(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                      .RTMPLNIA_ACNT_CURR;
    MLOANIA_ACNT_BAL(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                     .RTMPLNIA_ACNT_BAL;
    MLOANIA_INT_ON_AMT(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                     .RTMPLNIA_INT_ON_AMT;
    MLOANIA_OD_PORTION(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                       .RTMPLNIA_OD_PORTION;
    MLOANIA_INT_RATE(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                     .RTMPLNIA_INT_RATE;
    MLOANIA_SLAB_AMT(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                     .RTMPLNIA_SLAB_AMT;
    MLOANIA_OD_INT_RATE(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL) .
                                         RTMPLNIA_OD_INT_RATE;
    MLOANIA_LIMIT(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                                  .RTMPLNIA_LIMIT;
    MLOANIA_DP(W_BRN_INDEX) := M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                               .RTMPLNIA_DP;

    PROCESS_FOR_ACTUAL_INTEREST;
  END PROCESS_FOR_INT_CALC;

  PROCEDURE SET_TRAN_KEY_VALUES(W_AC_PREV_BRN_CODE IN NUMBER) IS
  BEGIN
    PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BRN_CODE := W_AC_PREV_BRN_CODE;
    --05-12-2007-rem          PKG_AUTOPOST.PV_TRAN_KEY.TRAN_DATE_OF_TRAN := W_PROCESS_DATE;
    PKG_AUTOPOST.PV_TRAN_KEY.TRAN_DATE_OF_TRAN := PKG_PB_GLOBAL.FN_GET_CURR_BUS_DATE(V_GLOB_ENTITY_NUM);
    PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BATCH_NUMBER := 0;
    PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BATCH_SL_NUM := 0;
  END SET_TRAN_KEY_VALUES;

  PROCEDURE SET_TRANBAT_VALUES IS
  BEGIN
    PKG_AUTOPOST.PV_TRANBAT.TRANBAT_SOURCE_TABLE := 'LOANIA';
    PKG_AUTOPOST.PV_TRANBAT.TRANBAT_SOURCE_KEY   := W_PROCESS_DATE;

    PKG_AUTOPOST.PV_TRANBAT.TRANBAT_NARR_DTL1 := 'Loan Accrual Posting';
  END SET_TRANBAT_VALUES;

  PROCEDURE MOVE_POST_ARRAY_VALUES(W_DB_CR_FLG    IN CHAR,
                                   W_CURR_CODE    IN VARCHAR2,
                                   W_TRAN_AMOUNT  IN NUMBER,
                                   W_AC_BRN_CODE  IN NUMBER,
                                   W_GL_CURR_CODE IN VARCHAR2,
                                   W_PROD_CODE    IN NUMBER) IS
  BEGIN
    W_POST_ARRAY_INDEX := W_POST_ARRAY_INDEX + 1;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_DB_CR_FLG := W_DB_CR_FLG;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_CURR_CODE := W_CURR_CODE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_AMOUNT := W_TRAN_AMOUNT;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_ACING_BRN_CODE := W_AC_BRN_CODE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_GLACC_CODE := W_GL_CURR_CODE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL1 := 'Loan Accrual Posting';
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL2 := 'Prod Code - ' ||
                                                                   W_PROD_CODE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL3 := 'Curr Code - ' ||
                                                                   W_CURR_CODE;
  END MOVE_POST_ARRAY_VALUES;

  PROCEDURE SET_VOUCHER_DETAILS(W_PREV_BRN_CODE IN NUMBER) IS
    W_PROD_CODE           NUMBER(4);
    W_CURR_CODE           VARCHAR2(3);
    W_ACCR_DB_CR          CHAR(1);
    W_INCOME_DB_CR        CHAR(1);
    W_ACCR_DB_CR_GLCODE   VARCHAR2(15);
    W_INCOME_DB_CR_GLCODE VARCHAR2(15);
  BEGIN

    W_INDEX_KEY := M_LOANCALCPOSTRECORD.FIRST;
    WHILE W_INDEX_KEY IS NOT NULL LOOP
      IF M_LOANCALCPOSTRECORD(W_INDEX_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT <> 0 THEN
        W_PROD_CODE := SUBSTR(W_INDEX_KEY, 1, 4);
        W_CURR_CODE := SUBSTR(W_INDEX_KEY, 5, 3);

        --ACCRUAL VOUCHERS
        IF M_LOANCALCPOSTRECORD(W_INDEX_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT < 0 THEN
          W_ACCR_DB_CR   := 'D';
          W_INCOME_DB_CR := 'C';

        ELSE
          W_ACCR_DB_CR   := 'C';
          W_INCOME_DB_CR := 'D';

        END IF;
        -- R.Senthil Kumar - 12-Aug-2010 - Modified - Begin
        IF MLOAN_PROD_CURR_GL.EXISTS(W_INDEX_KEY) THEN
          IF TRIM(MLOAN_PROD_CURR_GL(W_INDEX_KEY).LNPRDAC_INT_ACCR_GL) IS NULL THEN
            W_ERR_MSG := 'Accounting Parameter Not Defined(ACCRUAL) - Prod Code = ' ||
                         W_PROD_CODE || '  ' || ' Curr Code = ' ||
                         W_CURR_CODE;
            RAISE E_USEREXCEP;
          ELSE
            W_ACCR_DB_CR_GLCODE := MLOAN_PROD_CURR_GL(W_INDEX_KEY)
                                   .LNPRDAC_INT_ACCR_GL;
            MOVE_POST_ARRAY_VALUES(W_ACCR_DB_CR,
                                   W_CURR_CODE,
                                   ABS(M_LOANCALCPOSTRECORD(W_INDEX_KEY)
                                       .M_LOAN_AC_TOT_INT_ACCR_AMT),
                                   W_PREV_BRN_CODE,
                                   W_ACCR_DB_CR_GLCODE,
                                   W_PROD_CODE);
          END IF;

          IF TRIM(MLOAN_PROD_CURR_GL(W_INDEX_KEY).LNPRDAC_INT_INCOME_GL) IS NULL THEN
            W_ERR_MSG := 'Accounting Parameter Not Defined(INCOME) - Prod Code = ' ||
                         W_PROD_CODE || '  ' || ' Curr Code = ' ||
                         W_CURR_CODE;
            RAISE E_USEREXCEP;
          ELSE
            W_INCOME_DB_CR_GLCODE := MLOAN_PROD_CURR_GL(W_INDEX_KEY)
                                     .LNPRDAC_INT_INCOME_GL;
            MOVE_POST_ARRAY_VALUES(W_INCOME_DB_CR,
                                   W_CURR_CODE,
                                   ABS(M_LOANCALCPOSTRECORD(W_INDEX_KEY)
                                       .M_LOAN_AC_TOT_INT_ACCR_AMT),
                                   W_PREV_BRN_CODE,
                                   W_INCOME_DB_CR_GLCODE,
                                   W_PROD_CODE);
          END IF;
        ELSE
          W_ERR_MSG := 'Accounting Parameter Not Defined - Prod Code = ' ||
                       W_PROD_CODE || '  ' || ' Curr Code = ' ||
                       W_CURR_CODE;
          RAISE E_USEREXCEP;
        END IF;
        -- R.Senthil Kumar - 12-Aug-2010 - Modified - End

      END IF;
      W_INDEX_KEY := M_LOANCALCPOSTRECORD.NEXT(W_INDEX_KEY);
    END LOOP;
    W_INDEX_KEY := M_LOANCALCODPOSTRECORD.FIRST;
    WHILE W_INDEX_KEY IS NOT NULL LOOP
      IF M_LOANCALCODPOSTRECORD(W_INDEX_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT <> 0 THEN
        W_PROD_CODE := SUBSTR(W_INDEX_KEY, 1, 4);
        W_CURR_CODE := SUBSTR(W_INDEX_KEY, 5, 3);

        --ACCRUAL VOUCHERS
        IF M_LOANCALCODPOSTRECORD(W_INDEX_KEY)
         .M_LOAN_AC_TOT_INT_ACCR_AMT < 0 THEN
          W_ACCR_DB_CR   := 'D';
          W_INCOME_DB_CR := 'C';

        ELSE
          W_ACCR_DB_CR   := 'C';
          W_INCOME_DB_CR := 'D';

        END IF;

        -- R.Senthil Kumar - 12-Aug-2010 - Modified - Begin
        IF MLOAN_PROD_CURR_GL.EXISTS(W_INDEX_KEY) THEN
          IF TRIM(MLOAN_PROD_CURR_GL(W_INDEX_KEY).LNPRDAC_INT_ACCR_GL) IS NULL THEN
            W_ERR_MSG := 'Accounting Parameter Not Defined(OVERDUE) - Prod Code = ' ||
                         W_PROD_CODE || '  ' || ' Curr Code = ' ||
                         W_CURR_CODE;
            RAISE E_USEREXCEP;
          ELSE
            W_ACCR_DB_CR_GLCODE := MLOAN_PROD_CURR_GL(W_INDEX_KEY) .
                                    LNPRDAC_INT_ACCR_GL;
            MOVE_POST_ARRAY_VALUES(W_ACCR_DB_CR,
                                   W_CURR_CODE,
                                   ABS(M_LOANCALCODPOSTRECORD(W_INDEX_KEY)
                                       .M_LOAN_AC_TOT_INT_ACCR_AMT),
                                   W_PREV_BRN_CODE,
                                   W_ACCR_DB_CR_GLCODE,
                                   W_PROD_CODE);
          END IF;

          IF TRIM(MLOAN_PROD_CURR_GL(W_INDEX_KEY).LNPRDAC_INT_INCOME_GL) IS NULL THEN
            W_ERR_MSG := 'Accounting Parameter Not Defined(INCOME) - Prod Code = ' ||
                         W_PROD_CODE || '  ' || ' Curr Code = ' ||
                         W_CURR_CODE;
            RAISE E_USEREXCEP;
          ELSE
            W_INCOME_DB_CR_GLCODE := MLOAN_PROD_CURR_GL(W_INDEX_KEY)
                                     .LNPRDAC_INT_INCOME_GL;
            MOVE_POST_ARRAY_VALUES(W_INCOME_DB_CR,
                                   W_CURR_CODE,
                                   ABS(M_LOANCALCODPOSTRECORD(W_INDEX_KEY)
                                       .M_LOAN_AC_TOT_INT_ACCR_AMT),
                                   W_PREV_BRN_CODE,
                                   W_INCOME_DB_CR_GLCODE,
                                   W_PROD_CODE);
          END IF;
        ELSE
          W_ERR_MSG := 'Accounting Parameter Not Defined - Prod Code = ' ||
                       W_PROD_CODE || '  ' || ' Curr Code = ' ||
                       W_CURR_CODE;
          RAISE E_USEREXCEP;
        END IF;
        -- R.Senthil Kumar - 12-Aug-2010 - Modified - End

      END IF;
      W_INDEX_KEY := M_LOANCALCODPOSTRECORD.NEXT(W_INDEX_KEY);
    END LOOP;

    -- Avinash-SONALI-17AUG2012 Bgn
    W_INDEX_KEY := M_LOANCALCNPAPOSTRECORD.FIRST;
    WHILE W_INDEX_KEY IS NOT NULL LOOP
      IF M_LOANCALCNPAPOSTRECORD(W_INDEX_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT <> 0 THEN
        W_PROD_CODE := SUBSTR(W_INDEX_KEY, 1, 4);
        W_CURR_CODE := SUBSTR(W_INDEX_KEY, 5, 3);

        --ACCRUAL VOUCHERS
        IF M_LOANCALCNPAPOSTRECORD(W_INDEX_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT < 0 THEN
          W_ACCR_DB_CR   := 'D';
          W_INCOME_DB_CR := 'C';

        ELSE
          W_ACCR_DB_CR   := 'C';
          W_INCOME_DB_CR := 'D';

        END IF;
        IF MLOAN_PROD_CURR_GL.EXISTS(W_INDEX_KEY) THEN
          IF TRIM(MLOAN_PROD_CURR_GL(W_INDEX_KEY).LNPRDAC_INT_ACCR_GL) IS NULL THEN
            W_ERR_MSG := 'Accounting Parameter Not Defined(ACCRUAL) - Prod Code = ' ||
                         W_PROD_CODE || '  ' || ' Curr Code = ' ||
                         W_CURR_CODE;
            RAISE E_USEREXCEP;
          ELSE
            W_ACCR_DB_CR_GLCODE := MLOAN_PROD_CURR_GL(W_INDEX_KEY)
                                   .LNPRDAC_INT_ACCR_GL;
            MOVE_POST_ARRAY_VALUES(W_ACCR_DB_CR,
                                   W_CURR_CODE,
                                   ABS(M_LOANCALCNPAPOSTRECORD(W_INDEX_KEY)
                                       .M_LOAN_AC_TOT_INT_ACCR_AMT),
                                   W_PREV_BRN_CODE,
                                   W_ACCR_DB_CR_GLCODE,
                                   W_PROD_CODE);
          END IF;

          IF TRIM(MLOAN_PROD_CURR_GL(W_INDEX_KEY).LNPRDAC_INT_SUSP_GL) IS NULL THEN
            W_ERR_MSG := 'Accounting Parameter Not Defined(SUSPENSE) - Prod Code = ' ||
                         W_PROD_CODE || '  ' || ' Curr Code = ' ||
                         W_CURR_CODE;
            RAISE E_USEREXCEP;
          ELSE
            W_INCOME_DB_CR_GLCODE := MLOAN_PROD_CURR_GL(W_INDEX_KEY)
                                     .LNPRDAC_INT_SUSP_GL;
            MOVE_POST_ARRAY_VALUES(W_INCOME_DB_CR,
                                   W_CURR_CODE,
                                   ABS(M_LOANCALCNPAPOSTRECORD(W_INDEX_KEY)
                                       .M_LOAN_AC_TOT_INT_ACCR_AMT),
                                   W_PREV_BRN_CODE,
                                   W_INCOME_DB_CR_GLCODE,
                                   W_PROD_CODE);
          END IF;
        ELSE
          W_ERR_MSG := 'Accounting Parameter Not Defined - Prod Code = ' ||
                       W_PROD_CODE || '  ' || ' Curr Code = ' ||
                       W_CURR_CODE;
          RAISE E_USEREXCEP;
        END IF;

      END IF;
      W_INDEX_KEY := M_LOANCALCNPAPOSTRECORD.NEXT(W_INDEX_KEY);
    END LOOP;
    W_INDEX_KEY := M_LOANCALCODNPAPOSTRECORD.FIRST;
    WHILE W_INDEX_KEY IS NOT NULL LOOP
      IF M_LOANCALCODNPAPOSTRECORD(W_INDEX_KEY).M_LOAN_AC_TOT_INT_ACCR_AMT <> 0 THEN
        W_PROD_CODE := SUBSTR(W_INDEX_KEY, 1, 4);
        W_CURR_CODE := SUBSTR(W_INDEX_KEY, 5, 3);

        --ACCRUAL VOUCHERS
        IF M_LOANCALCODNPAPOSTRECORD(W_INDEX_KEY)
         .M_LOAN_AC_TOT_INT_ACCR_AMT < 0 THEN
          W_ACCR_DB_CR   := 'D';
          W_INCOME_DB_CR := 'C';

        ELSE
          W_ACCR_DB_CR   := 'C';
          W_INCOME_DB_CR := 'D';

        END IF;

        IF MLOAN_PROD_CURR_GL.EXISTS(W_INDEX_KEY) THEN
          IF TRIM(MLOAN_PROD_CURR_GL(W_INDEX_KEY).LNPRDAC_INT_ACCR_GL) IS NULL THEN
            W_ERR_MSG := 'Accounting Parameter Not Defined(OVERDUE) - Prod Code = ' ||
                         W_PROD_CODE || '  ' || ' Curr Code = ' ||
                         W_CURR_CODE;
            RAISE E_USEREXCEP;
          ELSE
            W_ACCR_DB_CR_GLCODE := MLOAN_PROD_CURR_GL(W_INDEX_KEY) .
                                    LNPRDAC_INT_ACCR_GL;
            MOVE_POST_ARRAY_VALUES(W_ACCR_DB_CR,
                                   W_CURR_CODE,
                                   ABS(M_LOANCALCODNPAPOSTRECORD(W_INDEX_KEY)
                                       .M_LOAN_AC_TOT_INT_ACCR_AMT),
                                   W_PREV_BRN_CODE,
                                   W_ACCR_DB_CR_GLCODE,
                                   W_PROD_CODE);
          END IF;

          IF TRIM(MLOAN_PROD_CURR_GL(W_INDEX_KEY).LNPRDAC_INT_SUSP_GL) IS NULL THEN
            W_ERR_MSG := 'Accounting Parameter Not Defined(SUSPENSE) - Prod Code = ' ||
                         W_PROD_CODE || '  ' || ' Curr Code = ' ||
                         W_CURR_CODE;
            RAISE E_USEREXCEP;
          ELSE
            W_INCOME_DB_CR_GLCODE := MLOAN_PROD_CURR_GL(W_INDEX_KEY)
                                     .LNPRDAC_INT_SUSP_GL;
            MOVE_POST_ARRAY_VALUES(W_INCOME_DB_CR,
                                   W_CURR_CODE,
                                   ABS(M_LOANCALCODNPAPOSTRECORD(W_INDEX_KEY)
                                       .M_LOAN_AC_TOT_INT_ACCR_AMT),
                                   W_PREV_BRN_CODE,
                                   W_INCOME_DB_CR_GLCODE,
                                   W_PROD_CODE);
          END IF;
        ELSE
          W_ERR_MSG := 'Accounting Parameter Not Defined - Prod Code = ' ||
                       W_PROD_CODE || '  ' || ' Curr Code = ' ||
                       W_CURR_CODE;
          RAISE E_USEREXCEP;
        END IF;

      END IF;
      W_INDEX_KEY := M_LOANCALCODNPAPOSTRECORD.NEXT(W_INDEX_KEY);
    END LOOP;
    -- Avinash-SONALI-17AUG2012 End

  END SET_VOUCHER_DETAILS;

  PROCEDURE POST_TRANSACTION IS
  BEGIN
    PKG_APOST_INTERFACE.SP_POST_SODEOD_BATCH(V_GLOB_ENTITY_NUM,
                                             'A',
                                             W_POST_ARRAY_INDEX,
                                             0,
                                             W_ERROR_CODE,
                                             W_ERROR,
                                             W_BATCH_NUM);

    IF (W_ERROR_CODE <> '0000') THEN
      W_ERR_MSG := 'Process Brn Code -  ' || W_AC_PREV_BRN_CODE || ' ' ||
                   FN_GET_AUTOPOST_ERR_MSG(V_GLOB_ENTITY_NUM);
      RAISE E_USEREXCEP;
    END IF;

  END POST_TRANSACTION;

  PROCEDURE POST_BRN_WISE_TRANSACTION(W_AC_PREV_BRN_CODE IN NUMBER) IS
  BEGIN
    W_POST_ARRAY_INDEX := 0;
    PKG_APOST_INTERFACE.SP_POSTING_BEGIN(V_GLOB_ENTITY_NUM);
    SET_TRAN_KEY_VALUES(W_AC_PREV_BRN_CODE);
    SET_TRANBAT_VALUES;
    SET_VOUCHER_DETAILS(W_AC_PREV_BRN_CODE);
    IF W_POST_ARRAY_INDEX > 0 THEN
      POST_TRANSACTION;
    END IF;
    PKG_APOST_INTERFACE.SP_POSTING_END(V_GLOB_ENTITY_NUM);
    W_POST_ARRAY_INDEX := 0;
  END POST_BRN_WISE_TRANSACTION;

  PROCEDURE INSERT_ROW_INTO_LOANIA IS
  BEGIN
    IF MLOANIA_ACNT_NUM.COUNT > 0 THEN
      FORALL M_INDEX IN 1 .. MLOANIA_ACNT_NUM.COUNT
        INSERT INTO LOANIA
          (LOANIA_ENTITY_NUM,
           LOANIA_BRN_CODE,
           LOANIA_ACNT_NUM,
           LOANIA_VALUE_DATE,
           LOANIA_ACCRUAL_DATE,
           LOANIA_ACNT_CURR,
           LOANIA_ACNT_BAL,
           LOANIA_TOTAL_NEW_INT_AMT,
           LOANIA_INT_ON_AMT,
           LOANIA_OD_PORTION,
           LOANIA_TOTAL_NEW_OD_INT_AMT,
           LOANIA_INT_RATE,
           LOANIA_SLAB_AMT,
           LOANIA_OD_INT_RATE,
           LOANIA_LIMIT,
           LOANIA_DP,
           LOANIA_INT_AMT,
           LOANIA_INT_AMT_RND,
           LOANIA_OD_INT_AMT,
           LOANIA_OD_INT_AMT_RND,
           LOANIA_NPA_STATUS,
           LOANIA_NPA_AMT,
           LOANIA_NPA_INT_POSTED_AMT,
           LOANIA_ARR_INT_AMT)
        VALUES
          (V_GLOB_ENTITY_NUM,
           W_AC_PREV_BRN_CODE,
           MLOANIA_ACNT_NUM(M_INDEX),
           MLOANIA_VALUE_DATE(M_INDEX),
           W_PROCESS_DATE,
           MLOANIA_ACNT_CURR(M_INDEX),
           MLOANIA_ACNT_BAL(M_INDEX),
           MLOANIA_TOTAL_NEW_INT_AMT(M_INDEX),
           MLOANIA_INT_ON_AMT(M_INDEX),
           MLOANIA_OD_PORTION(M_INDEX),
           MLOANIA_TOTAL_NEW_OD_INT_AMT(M_INDEX),
           MLOANIA_INT_RATE(M_INDEX),
           MLOANIA_SLAB_AMT(M_INDEX),
           MLOANIA_OD_INT_RATE(M_INDEX),
           MLOANIA_LIMIT(M_INDEX),
           MLOANIA_DP(M_INDEX),
           MLOANIA_INT_AMT(M_INDEX),
           MLOANIA_INT_AMT_RND(M_INDEX),
           MLOANIA_OD_INT_AMT(M_INDEX),
           MLOANIA_OD_INT_AMT_RND(M_INDEX),
           MLOANIA_NPA_STATUS(M_INDEX),
           MLOANIA_NPA_AMOUNT(M_INDEX),
           MLOANIA_NPA_INT_POSTED_AMT(M_INDEX),
           MLOANIA_ARR_INT_AMT(M_INDEX));
		   
         FORALL M_INDEX IN 1 .. MLOANIA_ACNT_NUM.COUNT
            INSERT INTO LOANIADTL LL (LOANIADTL_ENTITY_NUM,
                                   LOANIADTL_BRN_CODE,
                                   LOANIADTL_ACNT_NUM,
                                   LOANIADTL_VALUE_DATE,
                                   LOANIADTL_ACCRUAL_DATE,
                                   LOANIADTL_SL_NUM,
                                   LOANIADTL_INT_RATE,
                                   LOANIADTL_UPTO_AMT,
                                   LOANIADTL_INT_AMT,
                                   LOANIADTL_INT_AMT_RND)
                 VALUES (V_GLOB_ENTITY_NUM,
                         W_AC_PREV_BRN_CODE,
                         MLOANIA_ACNT_NUM (M_INDEX),
                         MLOANIA_VALUE_DATE (M_INDEX),
                         W_PROCESS_DATE,
                         1,
                         MLOANIA_INT_RATE (M_INDEX),
                         MLOANIA_INT_ON_AMT (M_INDEX),
                         MLOANIA_INT_AMT (M_INDEX),
                         MLOANIA_INT_AMT_RND (M_INDEX)
                         );
    END IF;
  END INSERT_ROW_INTO_LOANIA;

  -- Avinash-SONALI-17AUG2012 (begin)
  PROCEDURE UPDATE_LNSUSPLED IS
      W_CRDB_FLG CHAR(1);
      W_CBD_TIME VARCHAR2(20);
  BEGIN
      SELECT NVL(MAX(LNSUSP_SL_NUM), 0) + 1
        INTO W_MAX_SL
        FROM LNSUSPLED
       WHERE LNSUSP_ENTITY_NUM = V_GLOB_ENTITY_NUM
         AND LNSUSP_ACNT_NUM = W_INTERNAL_ACNUM
         AND LNSUSP_TRAN_DATE = W_PROCESS_DATE;

      IF (W_NPA_ACT_INT_AMT > 0) THEN
        --W_CRDB_FLG := 'C'; -- Changed to maintain SUSPENSE BALANCE AS CREDIT BALANCE FOR BANGLADESH  AVINASH-SONALI-29AUG2012
        W_CRDB_FLG := 'D';
      ELSE
        --W_CRDB_FLG := 'D'; -- Changed to maintain SUSPENSE BALANCE AS CREDIT BALANCE FOR BANGLADESH  AVINASH-SONALI-29AUG2012
        W_CRDB_FLG := 'C';
      END IF;
      W_CBD_TIME := W_PROCESS_DATE || ' ' ||PKG_PB_GLOBAL.FN_GET_CURR_BUS_TIME(V_GLOB_ENTITY_NUM);

      INSERT INTO LNSUSPLED
        (LNSUSP_ENTITY_NUM,
         LNSUSP_ACNT_NUM,
         LNSUSP_TRAN_DATE,
         LNSUSP_SL_NUM,
         LNSUSP_VALUE_DATE,
         LNSUSP_ENTRY_TYPE,
         LNSUSP_DB_CR_FLG,
         LNSUSP_CURR_CODE,
         LNSUSP_AMOUNT,
         LNSUSP_INT_AMT,
         LNSUSP_CHGS_AMT,
         LNSUSP_INT_FROM_DATE,
         LNSUSP_INT_UPTO_DATE,
         LNSUSP_REMARKS1,
         LNSUSP_REMARKS2,
         LNSUSP_REMARKS3,
         LNSUSP_AUTO_MANUAL,
         LNSUSP_ENTD_BY,
         LNSUSP_ENTD_ON,
         LNSUSP_LAST_MOD_BY,
         LNSUSP_LAST_MOD_ON,
         LNSUSP_AUTH_BY,
         LNSUSP_AUTH_ON,
         TBA_MAIN_KEY)
      VALUES
        (V_GLOB_ENTITY_NUM,
         W_INTERNAL_ACNUM,
         W_PROCESS_DATE,
         W_MAX_SL,
         W_PROCESS_DATE,
         '2',
         W_CRDB_FLG,
         W_CURR_CODE,
         ABS(W_NPA_ACT_INT_AMT),
         ABS(W_NPA_ACT_INT_AMT),
         0,
         W_PROCESS_DATE,
         W_PROCESS_DATE,
         'By Interest Accrual',
         '',
         '',
         'A',
         W_USER_ID,
         TO_DATE(W_CBD_TIME, 'DD-MON-YY HH24:MI:SS'),
         '',
         NULL,
         W_USER_ID,
         TO_DATE(W_CBD_TIME, 'DD-MON-YY HH24:MI:SS'),
         '');
    EXCEPTION
      WHEN OTHERS THEN
        W_ERR_MSG := 'Error in Updating LNSUSPLED (Creation of Suspense Ledger)';
        RAISE E_USEREXCEP;
  END UPDATE_LNSUSPLED;

  PROCEDURE UPDATE_LNSUSPBAL IS
    W_DB_SUM NUMBER;
    W_CR_SUM NUMBER;
  BEGIN
      SELECT LNSUSPBAL_SUSP_BAL
        INTO DUMMY
        FROM LNSUSPBAL
       WHERE LNSUSPBAL_ENTITY_NUM = V_GLOB_ENTITY_NUM
         AND LNSUSPBAL_ACNT_NUM = W_INTERNAL_ACNUM
         AND LNSUSPBAL_CURR_CODE = W_CURR_CODE;

      --IF (W_NPA_ACT_INT_AMT > 0) THEN -- Changed to maintain SUSPENSE BALANCE AS CREDIT BALANCE FOR BANGLADESH  AVINASH-SONALI-29AUG2012
      IF (W_NPA_ACT_INT_AMT < 0) THEN
        UPDATE LNSUSPBAL
           SET LNSUSPBAL_SUSP_BAL    = LNSUSPBAL_SUSP_BAL +
                                       ABS(W_NPA_ACT_INT_AMT),
               LNSUSPBAL_SUSP_CR_SUM = LNSUSPBAL_SUSP_CR_SUM +
                                       ABS(W_NPA_ACT_INT_AMT),
               LNSUSPBAL_INT_BAL     = LNSUSPBAL_INT_BAL + ABS(W_NPA_ACT_INT_AMT)
         WHERE LNSUSPBAL_ENTITY_NUM = V_GLOB_ENTITY_NUM
           AND LNSUSPBAL_ACNT_NUM = W_INTERNAL_ACNUM
           AND LNSUSPBAL_CURR_CODE = W_CURR_CODE;
      ELSE
        --IF (W_NPA_ACT_INT_AMT < 0) THEN -- Changed to maintain SUSPENSE BALANCE AS CREDIT BALANCE FOR BANGLADESH  AVINASH-SONALI-29AUG2012
        IF (W_NPA_ACT_INT_AMT > 0) THEN
          UPDATE LNSUSPBAL
             SET LNSUSPBAL_SUSP_BAL    = LNSUSPBAL_SUSP_BAL -
                                         ABS(W_NPA_ACT_INT_AMT),
                 LNSUSPBAL_SUSP_DB_SUM = LNSUSPBAL_SUSP_DB_SUM +
                                         ABS(W_NPA_ACT_INT_AMT),
                 LNSUSPBAL_INT_BAL     = LNSUSPBAL_INT_BAL -
                                         ABS(W_NPA_ACT_INT_AMT)
           WHERE LNSUSPBAL_ENTITY_NUM = V_GLOB_ENTITY_NUM
             AND LNSUSPBAL_ACNT_NUM = W_INTERNAL_ACNUM
             AND LNSUSPBAL_CURR_CODE = W_CURR_CODE;
        END IF;
      END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      --IF (W_NPA_ACT_INT_AMT > 0) THEN -- Changed to maintain SUSPENSE BALANCE AS CREDIT BALANCE FOR BANGLADESH  AVINASH-SONALI-29AUG2012
      IF (W_NPA_ACT_INT_AMT < 0) THEN
        W_CR_SUM := ABS(W_NPA_ACT_INT_AMT);
        W_DB_SUM := 0;
      ELSE
        --IF (W_NPA_ACT_INT_AMT < 0) THEN -- Changed to maintain SUSPENSE BALANCE AS CREDIT BALANCE FOR BANGLADESH  AVINASH-SONALI-29AUG2012
        IF (W_NPA_ACT_INT_AMT > 0) THEN
          W_DB_SUM := ABS(W_NPA_ACT_INT_AMT);
          W_CR_SUM := 0;
        END IF;
      END IF;

      <<ADD_LNSUSPBAL>>
      BEGIN
          INSERT INTO LNSUSPBAL
            (LNSUSPBAL_ENTITY_NUM,
             LNSUSPBAL_ACNT_NUM,
             LNSUSPBAL_CURR_CODE,
             LNSUSPBAL_SUSP_BAL,
             LNSUSPBAL_SUSP_DB_SUM,
             LNSUSPBAL_SUSP_CR_SUM,
             LNSUSPBAL_PRIN_BAL,
             LNSUSPBAL_INT_BAL,
             LNSUSPBAL_CHG_BAL,
             LNSUSPBAL_WRTOFF_AMT,
             LNSUSPBAL_WRTOFF_RECOV,
             LNSUSPBAL_PROV_HELD,
             LNSUSPBAL_BC_PROV_HELD)
          VALUES
            (V_GLOB_ENTITY_NUM,
             W_INTERNAL_ACNUM,
             W_CURR_CODE,
             -- W_NPA_ACT_INT_AMT,  -- Changed to maintain SUSPENSE BALANCE AS CREDIT BALANCE FOR BANGLADESH  AVINASH-SONALI-29AUG2012
             -W_NPA_ACT_INT_AMT,
             W_DB_SUM,
             W_CR_SUM,
             0,
             -- W_NPA_ACT_INT_AMT,  -- Changed to maintain SUSPENSE BALANCE AS CREDIT BALANCE FOR BANGLADESH  AVINASH-SONALI-29AUG2012
             -W_NPA_ACT_INT_AMT,
             0,
             0,
             0,
             0,
             0);
      EXCEPTION
        WHEN OTHERS THEN
          W_ERR_MSG := 'Error in Updating LNSUSPBAL (Creation of Suspense Balance)';
          RAISE E_USEREXCEP;
      END ADD_LNSUSPBAL;
  END UPDATE_LNSUSPBAL;

  PROCEDURE GET_ACWISE_SUSP_INT IS
  BEGIN
  W_NPA_TOT_INT_AMT   := 0;
  W_NPA_ACNT_NUM      := 0;
  W_CURR_CODE         := '';
  W_MAX_SL            := 0;
  W_NPA_ACT_INT_AMT   := 0;
  W_INTERNAL_ACNUM    := 0;
  DUMMY               := 0;
  NPAINDEX            := 0;
    FOR J IN 1 .. MLOANIA_ACNT_NUM.COUNT LOOP
      IF MLOANIA_NPA_STATUS(J) = 1 AND W_NPA_ACNT_NUM = 0 THEN
        W_NPA_ACNT_NUM         := MLOANIA_ACNT_NUM(J);
        W_NPA_TOT_INT_AMT      := NVL(MLOANIA_INT_AMT_RND(J),0) + NVL(MLOANIA_OD_INT_AMT_RND(J),0);
        W_CURR_CODE            := MLOANIA_ACNT_CURR(J);
        NPAINDEX               := 1;
      ELSIF MLOANIA_NPA_STATUS(J) = 1 AND W_NPA_ACNT_NUM <> MLOANIA_ACNT_NUM(J) AND W_NPA_ACNT_NUM <> 0 THEN
        M_ACWISE_NPA_INT(NPAINDEX).M_NPA_ACNT_NUM          :=  W_NPA_ACNT_NUM;
        M_ACWISE_NPA_INT(NPAINDEX).M_NPA_TOT_INT_AMT       :=  W_NPA_TOT_INT_AMT;
        M_ACWISE_NPA_INT(NPAINDEX).M_CURR_CODE             :=  W_CURR_CODE;
        NPAINDEX               := NPAINDEX + 1;
        W_NPA_ACNT_NUM         := MLOANIA_ACNT_NUM(J);
        W_CURR_CODE            := MLOANIA_ACNT_CURR(J);
        W_NPA_TOT_INT_AMT      := NVL(MLOANIA_INT_AMT_RND(J),0) + NVL(MLOANIA_OD_INT_AMT_RND(J),0);
      ELSIF MLOANIA_NPA_STATUS(J) = 1 AND W_NPA_ACNT_NUM = MLOANIA_ACNT_NUM(J) THEN
        W_NPA_TOT_INT_AMT      := W_NPA_TOT_INT_AMT + NVL(MLOANIA_INT_AMT_RND(J),0) + NVL(MLOANIA_OD_INT_AMT_RND(J),0);
      END IF;
    END LOOP;
        M_ACWISE_NPA_INT(NPAINDEX).M_NPA_ACNT_NUM          :=  W_NPA_ACNT_NUM;
        M_ACWISE_NPA_INT(NPAINDEX).M_NPA_TOT_INT_AMT       :=  W_NPA_TOT_INT_AMT;
        M_ACWISE_NPA_INT(NPAINDEX).M_CURR_CODE             :=  W_CURR_CODE;

    IF NPAINDEX <> 0 THEN
    FOR K IN 1 .. NPAINDEX LOOP
      IF M_ACWISE_NPA_INT(K).M_NPA_TOT_INT_AMT <> 0 THEN
        W_NPA_ACT_INT_AMT   := M_ACWISE_NPA_INT(K).M_NPA_TOT_INT_AMT;
        W_INTERNAL_ACNUM    := M_ACWISE_NPA_INT(K).M_NPA_ACNT_NUM;
        W_CURR_CODE         := M_ACWISE_NPA_INT(K).M_CURR_CODE;
        UPDATE_LNSUSPLED;
        UPDATE_LNSUSPBAL;
      END IF;
      W_MAX_SL := 0;
    END LOOP;
    END IF;

  END GET_ACWISE_SUSP_INT;
  -- Avinash-SONALI-17AUG2012 (end)

  PROCEDURE UPDATE_ACNTS_INT_ACCR_UPTO IS
  BEGIN
    IF MLOANIA_ACNT_NUM.COUNT > 0 THEN
      FORALL M_INDEX IN 1 .. MLOANIA_ACNT_NUM.COUNT
        UPDATE LOANACNTS L
           SET L.LNACNT_INT_ACCR_UPTO       = W_PROCESS_DATE,
               L.LNACNT_PA_ACCR_POSTED_UPTO = MLNACNT_PA_ACCR_POSTED_UPTO(M_INDEX)
         WHERE LNACNT_ENTITY_NUM = V_GLOB_ENTITY_NUM
           AND L.LNACNT_INTERNAL_ACNUM = MLOANIA_ACNT_NUM(M_INDEX);
      FORALL M_INDEX IN 1 .. MLOANIA_ACNT_NUM.COUNT
        UPDATE ACNTS A
           SET A.ACNTS_INT_ACCR_UPTO = W_PROCESS_DATE
         WHERE ACNTS_ENTITY_NUM = V_GLOB_ENTITY_NUM
           AND A.ACNTS_INTERNAL_ACNUM = MLOANIA_ACNT_NUM(M_INDEX);

    END IF;
  END UPDATE_ACNTS_INT_ACCR_UPTO;

  PROCEDURE CLEAR_BRNWISE_ARRAY IS
  BEGIN
    CLEAR_LOANIAARRAY;
    CLEAR_LOANIADTLARRAY;
    W_BRN_INDEX := 0;
    -- Anat-25-10-2007-add
    CLEAR_AUTOPOST_ARRAY;
    --       12-10-2007   W_ARRAY_PROCESS_SL := 0;
    -- Avinash-SONALI-17AUG2012 (begin)
    NPAINDEX            := 0;
    M_ACWISE_NPA_INT.DELETE;
    -- Avinash-SONALI-17AUG2012 (end)
  END CLEAR_BRNWISE_ARRAY;

  PROCEDURE PROCESS_FOR_POSTING(W_AC_BRANCH_CODE IN NUMBER) IS
  BEGIN

    IF M_LOANCALCPOSTRECORD.COUNT > 0 OR M_LOANCALCODPOSTRECORD.COUNT > 0 OR M_LOANCALCNPAPOSTRECORD.COUNT > 0 OR M_LOANCALCODNPAPOSTRECORD.COUNT > 0 THEN  -- Avinash-SONALI-17AUG2012 modified to post M_LOANCALCNPAPOSTRECORD and M_LOANCALCODNPAPOSTRECORD
      POST_BRN_WISE_TRANSACTION(W_AC_BRANCH_CODE);
    END IF;

    INSERT_ROW_INTO_LOANIA;
    -- Avinash-SONALI-17AUG2012 (begin)
    GET_ACWISE_SUSP_INT;
    -- Avinash-SONALI-17AUG2012 (end)
    UPDATE_ACNTS_INT_ACCR_UPTO;
    W_AC_PREV_BRN_CODE := 0;

    CLEAR_BRNWISE_ARRAY;

  END PROCESS_FOR_POSTING;

  PROCEDURE GET_PREVIOUS_INT_AMT_AND_RATE IS
    W_PREV_ACCR_DATE DATE;
  BEGIN
    <<READPREVLOANIA>>
    BEGIN

      SELECT *
        INTO V_LOANIA_PREV_ROW
        FROM LOANIA L
       WHERE LOANIA_ENTITY_NUM = V_GLOB_ENTITY_NUM
         AND L.LOANIA_BRN_CODE = W_AC_BRN_CODE
         AND L.LOANIA_ACNT_NUM = M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
            .RTMPLNIA_ACNT_NUM
         AND L.LOANIA_VALUE_DATE = M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
            .RTMPLNIA_VALUE_DATE
         AND L.LOANIA_ACCRUAL_DATE =
             (SELECT MAX(LL.LOANIA_ACCRUAL_DATE)
                FROM LOANIA LL
               WHERE LOANIA_ENTITY_NUM = V_GLOB_ENTITY_NUM
                 AND LL.LOANIA_BRN_CODE = W_AC_BRN_CODE
                 AND LL.LOANIA_ACNT_NUM = M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                    .RTMPLNIA_ACNT_NUM
                 AND LL.LOANIA_VALUE_DATE = M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                    .RTMPLNIA_VALUE_DATE);
      IF SQL%FOUND THEN
        W_PREV_ROW_AVL := TRUE;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_LOANIA_PREV_ROW := NULL;
    END READPREVLOANIA;
  END GET_PREVIOUS_INT_AMT_AND_RATE;

  PROCEDURE CHECK_THE_ROW_IN_ACNTS IS
  BEGIN
    W_PREV_ROW_AVL                 := FALSE;
    W_LNACNT_PA_ACCR_POSTED_UPTO   := NULL;
    W_LNACNT_INT_APPLIED_UPTO_DATE := NULL;

    <<READLOANACNT>>
    BEGIN
      SELECT L.LNACNT_INT_ACCR_UPTO,
             A.ACNTS_BRN_CODE,
             A.ACNTS_CURR_CODE,
             A.ACNTS_PROD_CODE,
             L.LNACNT_PA_ACCR_POSTED_UPTO,
             L.LNACNT_INT_APPLIED_UPTO_DATE
        INTO W_INT_ACCR_UPTO_DATE,
             W_AC_BRN_CODE,
             W_AC_CURR_CODE,
             W_AC_PROD_CODE,
             W_LNACNT_PA_ACCR_POSTED_UPTO,
             W_LNACNT_INT_APPLIED_UPTO_DATE
        FROM ACNTS A, LOANACNTS L
       WHERE LNACNT_ENTITY_NUM = V_GLOB_ENTITY_NUM
         AND ACNTS_ENTITY_NUM = V_GLOB_ENTITY_NUM
         AND L.LNACNT_INTERNAL_ACNUM = M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL).RTMPLNIA_ACNT_NUM
         AND A.ACNTS_INTERNAL_ACNUM = L.LNACNT_INTERNAL_ACNUM;

      IF W_AC_PREV_BRN_CODE <> W_AC_BRN_CODE AND W_AC_PREV_BRN_CODE <> 0 THEN
        PROCESS_FOR_POSTING(W_AC_PREV_BRN_CODE);
      END IF;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        W_ERR_MSG := 'Account Number not Available in Loanacnts - ' ||V_GLOB_ENTITY_NUM||' ENTITY '||
                     FACNO(V_GLOB_ENTITY_NUM,
                           M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL)
                           .RTMPLNIA_ACNT_NUM);
        RAISE E_USEREXCEP;
    END READLOANACNT;

    W_PREV_ROW_AVL := FALSE;

    IF W_INT_ACCR_UPTO_DATE IS NOT NULL THEN
      IF M_RTMPLNIA_RECORD(W_ARRAY_PROCESS_SL) .
        RTMPLNIA_VALUE_DATE <= W_INT_ACCR_UPTO_DATE THEN
        GET_PREVIOUS_INT_AMT_AND_RATE;
      END IF;
    END IF;

    IF (W_INT_ACCR_UPTO_DATE IS NULL OR
       W_INT_ACCR_UPTO_DATE < W_PROCESS_DATE) THEN
      PROCESS_FOR_INT_CALC;
    END IF;
    W_AC_PREV_BRN_CODE := W_AC_BRN_CODE;

  END CHECK_THE_ROW_IN_ACNTS;

  PROCEDURE READ_RTMPLNIA(P_BRN_CODE NUMBER) IS
  BEGIN
    SELECT RTMPLNIA_RUN_NUMBER,
           RTMPLNIA_ACNT_NUM,
           RTMPLNIA_VALUE_DATE,
           RTMPLNIA_ACCRUAL_DATE,
           RTMPLNIA_ACNT_CURR,
           RTMPLNIA_ACNT_BAL,
           RTMPLNIA_INT_ON_AMT,
           RTMPLNIA_OD_PORTION,
           RTMPLNIA_INT_RATE,
           RTMPLNIA_SLAB_AMT,
           RTMPLNIA_OD_INT_RATE,
           RTMPLNIA_LIMIT,
           RTMPLNIA_DP,
           RTMPLNIA_INT_AMT,
           RTMPLNIA_INT_AMT_RND,
           RTMPLNIA_OD_INT_AMT,
           RTMPLNIA_OD_INT_AMT_RND,
           CASE
           WHEN BANKCD_ACCR_DAILY_ASSET_CD = '0' AND ASSETCD_ASSET_CLASS = 'P'
           THEN
              0
           WHEN BANKCD_ACCR_DAILY_ASSET_CD = '0' AND ASSETCD_ASSET_CLASS = 'N'
           THEN
              1
           WHEN BANKCD_ACCR_DAILY_ASSET_CD = '1'
           THEN
              RTMPLNIA_NPA_STATUS
           END
           RTMPLNIA_NPA_STATUS,
           RTMPLNIA_NPA_AMT,
           RTMPLNIA_ARR_OD_INT_AMT BULK COLLECT
      INTO M_RTMPLNIA_RECORD
      FROM RTMPLNIA R, ACNTS A, ASSETCLS, ASSETCD, INSTALL, BANKCD
     WHERE A.ACNTS_ENTITY_NUM = V_GLOB_ENTITY_NUM
     AND ASSETCLS_ENTITY_NUM = V_GLOB_ENTITY_NUM
     AND ASSETCLS_INTERNAL_ACNUM = A.ACNTS_INTERNAL_ACNUM
     AND ASSETCLS_ASSET_CODE = ASSETCD_CODE
     AND ASSETCD_NONPERF_CAT <> '3'
     AND A.ACNTS_INTERNAL_ACNUM = R.RTMPLNIA_ACNT_NUM
     AND A.ACNTS_BRN_CODE = P_BRN_CODE
     --AND TO_CHAR (RTMPLNIA_ACCRUAL_DATE,'MON-YYYY') = TO_CHAR (PKG_PB_GLOBAL_EOD_SOD.T_INSTALL (V_GLOB_ENTITY_NUM).MN_CURR_BUSINESS_DATE,'MON-YYYY')
     AND R.RTMPLNIA_INSERT_FROM = 'A'
     AND RTMPLNIA_BRN_CODE = A.ACNTS_BRN_CODE
     AND A.ACNTS_CLOSURE_DATE IS NULL 
     AND INS_OUR_BANK_CODE = BANKCD_CODE
     ORDER BY RTMPLNIA_ACNT_NUM, R.RTMPLNIA_VALUE_DATE;

    W_ARRAY_PROCESS_SL        := 0;
    W_BRN_INDEX               := 0;
    W_NPA_INT_POST_AMOUNT     := 0;
    W_NPA_INT_POST_AMOUNT_RND := 0;

    IF M_RTMPLNIA_RECORD.COUNT > 0 THEN
      FOR IDX IN 1 .. M_RTMPLNIA_RECORD.COUNT LOOP
        W_ARRAY_PROCESS_SL := IDX;
        CHECK_THE_ROW_IN_ACNTS;
      END LOOP;

      IF W_AC_PREV_BRN_CODE <> 0 THEN
        PROCESS_FOR_POSTING(W_AC_PREV_BRN_CODE);
      END IF;
    END IF;
  END READ_RTMPLNIA;

  PROCEDURE UPDATELOACALCCTL IS
  BEGIN
    UPDATE LOANCALCCTL L
       SET L.LOANCTL_POSTED_BY = PKG_EODSOD_FLAGS.PV_USER_ID,
           L.LOANCTL_POSTED_ON = SYSDATE
     WHERE LOANCTL_ENTITY_NUM = V_GLOB_ENTITY_NUM
       AND L.LOANCTL_RUN_NUMBER = W_RUN_NUMBER;
  END UPDATELOACALCCTL;

  PROCEDURE PROCESS_FROM_RTMPLNIA (P_BRN_CODE NUMBER ) IS
  BEGIN
    <<READRTMPLNIA>>
    BEGIN
      POPULATE_LOANACCR_GL;
      READ_RTMPLNIA(P_BRN_CODE);
      UPDATELOACALCCTL;

      --21-08-2010-beg
      CLEAR_ALL_ARRAYS;
      --21-08-2010-end

    EXCEPTION
      WHEN OTHERS THEN
        --21-08-2010-beg
        CLEAR_ALL_ARRAYS;
        --21-08-2010-end
        IF TRIM(W_ERR_MSG) IS NULL THEN
          W_ERR_MSG := SUBSTR(SQLERRM, 1, 1000);
        END IF;
        PKG_EODSOD_FLAGS.PV_ERROR_MSG := W_ERR_MSG;
        PKG_PB_GLOBAL.DETAIL_ERRLOG(V_GLOB_ENTITY_NUM,
                                    'E',
                                    W_ERR_MSG,
                                    ' ',
                                    0);
    END READRTMPLNIA;

  END PROCESS_FROM_RTMPLNIA;

  PROCEDURE SP_LOANACCRPOST(V_ENTITY_NUM IN NUMBER, P_BRN_CODE NUMBER ) IS
  BEGIN
    --ENTITY CODE COMMONLY ADDED - 06-11-2009  - BEG
    PKG_ENTITY.SP_SET_ENTITY_CODE(V_ENTITY_NUM);
    V_GLOB_ENTITY_NUM:=V_ENTITY_NUM;
    --ENTITY CODE COMMONLY ADDED - 06-11-2009  - END
    --AGK-14-AUG-2009 (ERROR MESSAGE INITIALIZED)
    W_ERR_MSG          := '';
    W_PROCESS_DATE     := PKG_EODSOD_FLAGS.PV_CURRENT_DATE;
    -- Avinash-SONALI-17AUG2012 (begin)
    W_USER_ID          := PKG_EODSOD_FLAGS.PV_USER_ID;
    -- Avinash-SONALI-17AUG2012 (end)
    W_RUN_NUMBER       := PKG_EODSOD_FLAGS.GET_RUN_NUM(V_GLOB_ENTITY_NUM);
    W_AC_PREV_BRN_CODE := 0;
    PROCESS_FROM_RTMPLNIA(P_BRN_CODE);
  END SP_LOANACCRPOST;
END PKG_LOANDAILYACCRPOST;
/
